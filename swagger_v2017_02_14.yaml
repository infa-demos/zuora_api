swagger: '2.0'
info:

  termsOfService: |
    
    *************PLEASE READ BEFORE USING THIS SPECIFICATION*********************
    
    This OpenAPI specification of the Zuora REST API is provided “AS IS”, for reference purposes only. 
    Zuora does not guarantee or make any representations regarding the use, results of use, accuracy, security, timeliness, or completeness of any data or information provided in this specification. 
    If you, the customer, use this specification in your implementation, you are responsible for making sure that your implementation is functional and secure. 
    
    Go to [Zuora Community](http://community.zuora.com/) to report issues or discuss this specification with your peers. 
  
    *****************************************************************************




  version: '2017-02-14'
  title: Zuora API Reference
  description: "# Introduction\nWelcome to the reference for the Zuora REST API!\n\
    \n<a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a>\
    \ is a web-service protocol that lends itself to rapid development by using everyday\
    \ HTTP and JSON technology.\n\nThe Zuora REST API provides a broad set of operations\
    \ and resources that:\n\n  * Enable Web Storefront integration from your website.\n\
    \  * Support self-service subscriber sign-ups and account management.\n  * Process\
    \ revenue schedules through custom revenue rule models.\n  * Enable manipulation\
    \ of most objects in the Zuora Object Model.\n  \n  ## Endpoints\n  \n  The Zuora\
    \ REST API is provided via the following endpoints.\n  | Tenant              |\
    \ Base URL for REST Endpoints |\n  |-------------------------|-------------------------|\n\
    \  |Production | https://rest.zuora.com/v1   |\n  |API Sandbox    | https://rest.apisandbox.zuora.com/v1|\n\
    \  \n  The production endpoint provides access to your live user data. The API\
    \ Sandbox tenant is a good place to test your code without affecting real-world\
    \ data. To use it, you must be provisioned with an API Sandbox tenant - your Zuora\
    \ representative can help you if needed.\n  \n  ## Access to the API\n  \n  If\
    \ you have a Zuora tenant, you already have access to the API.\n  \n  If you don't\
    \ have a Zuora tenant, go to <a href=\"\nhttps://www.zuora.com/resource/zuora-test-drive\"\
    \ target=\"_blank\">https://www.zuora.com/resource/zuora-test-drive</a> and sign\
    \ up for a Production Test Drive tenant. The tenant comes with seed data, such\
    \ as a sample product catalog.\n\nWe recommend that you <a href=\"https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/Manage_Users/Create_an_API_User\"\
    \ target=\"_blank\">create an API user</a> specifically for making API calls.\
    \ Don't log in to the Zuora UI with this account. Logging in to the UI enables\
    \ a security feature that periodically expires the account's password, which may\
    \ eventually cause authentication failures with the API. Note that a user role\
    \ does not have write access to Zuora REST services unless it has the API Write\
    \ Access permission as described in those instructions.\n\n# Authentication\n\n\
    There are three ways to authenticate:\n\n  * Use username and password. Include\
    \ authentication with each request in the header: \n  \n    * `apiAccessKeyId`\
    \ \n    * `apiSecretAccessKey`\n    * `entityId` or `entityName` (Only for [Zuora\
    \ Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity\
    \ \"Multi-entity\"). See \"Entity Id and Entity Name\" below for more information.)\n\
    \  * Use an authorization cookie. The cookie authorizes the user to make calls\
    \ to the REST API for the duration specified in  **Administration > Security Policies\
    \ > Session timeout**. The cookie expiration time is reset with this duration\
    \ after every call to the REST API. To obtain a cookie, call the REST  `connections`\
    \ resource with the following API user information: \n  \n    *   ID    \n   \
    \ *   password\n    *   entity Id or entity name (Only for [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity\
    \ \"Multi-entity\"). See \"Entity Id and Entity Name\" below for more information.)\
    \ \n    \n  * For CORS-enabled APIs only: Include a 'single-use' token in the\
    \ request header, which re-authenticates the user with each request. See below\
    \ for more details.\n\n## Entity Id and Entity Name\n\nThe `entityId` and `entityName`\
    \ parameters are only used for [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity\
    \ \"Zuora Multi-entity\").\n\n\nThe  `entityId` and `entityName` parameters specify\
    \ the Id and the [name of the entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/B_Introduction_to_Entity_and_Entity_Hierarchy#Name_and_Display_Name\
    \ \"Introduction to Entity and Entity Hierarchy\") that you want to access, respectively.\
    \ Note that you must have permission to access the entity. You can get the entity\
    \ Id and entity name through the REST GET Entities call.\n\nYou can specify either\
    \ the `entityId` or `entityName` parameter in the authentication to access and\
    \ view an entity.\n\n  * If both `entityId` and `entityName` are specified in\
    \ the authentication, an error occurs. \n  * If neither `entityId` nor `entityName`\
    \ is specified in the authentication, you will log in to the entity in which your\
    \ user account is created. \n  \n  See [API User Authentication](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity/A_Overview_of_Multi-entity#API_User_Authentication\
    \ \"API User Authentication\") for more information.\n  \n  ## Token Authentication\
    \ for CORS-Enabled APIs\n  \n  The CORS mechanism enables REST API calls to Zuora\
    \ to be made directly from your customer's browser, with all credit card and security\
    \ information transmitted directly to Zuora. This minimizes your PCI compliance\
    \ burden, allows you to implement advanced validation on your payment forms, and\
    \  makes your payment forms look just like any other part of your website.\n \
    \ \nFor security reasons, instead of using cookies, an API request via CORS uses\
    \ **tokens** for authentication.\n\nThe token method of authentication is only\
    \ designed for use with requests that must originate from your customer's browser;\
    \ **it should  not be considered a replacement to the existing cookie authentication**\
    \ mechanism.\n\nSee [Zuora CORS REST](https://knowledgecenter.zuora.com/DC_Developers/REST_API/A_REST_basics/G_CORS_REST\
    \ \"Zuora CORS REST\") for details on how CORS works and how you can begin to\
    \ implement customer calls to the Zuora REST APIs. See  [HMAC Signatures](https://www.zuora.com/developer/API-Reference/#operation/POSTHMACSignature\
    \ \"HMAC Signatures\") for details on the HMAC method that returns the authentication\
    \ token.\n\n# Requests and Responses\n\n## Request IDs \nAs a general rule, when\
    \ asked to supply a \"key\" for an account or subscription (accountKey, account-key,\
    \ subscriptionKey, subscription-key), you can provide either the actual ID or\
    \  the number of the entity.\n\n## HTTP Request Body\n\nMost of the parameters\
    \ and data accompanying your requests will be contained in the body of the HTTP\
    \ request. \n\nThe Zuora REST API accepts JSON in the HTTP request body. No other\
    \ data format (e.g., XML) is supported.\n\n## Testing a Request\n\nUse a third\
    \ party client, such as [curl](https://curl.haxx.se \"curl\"), [Postman](https://www.getpostman.com\
    \ \"Postman\"), or [Advanced REST Client](https://advancedrestclient.com \"Advanced\
    \ REST Client\"), to test the Zuora REST API.\n\nYou can test the Zuora REST API\
    \ from the Zuora API Sandbox or Production tenants. If connecting to Production,\
    \ bear in mind that you are working with your live production data, not sample\
    \ data or test data.\n\n## Testing with Credit Cards\n\nSooner or later it will\
    \ probably be necessary to test some transactions that involve credit cards. For\
    \ suggestions on how to handle this, see [Going Live With Your Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/C_Managing_Payment_Gateways/B_Going_Live_Payment_Gateways#Testing_with_Credit_Cards\
    \ \"C_Zuora_User_Guides/A_Billing_and_Payments/M_Payment_Gateways/C_Managing_Payment_Gateways/B_Going_Live_Payment_Gateways#Testing_with_Credit_Cards\"\
    \n).\n\n## Error Handling\n\nResponses and error codes are detailed in [Responses\
    \ and errors](https://knowledgecenter.zuora.com/DC_Developers/REST_API/A_REST_basics/3_Responses_and_errors\
    \ \"Responses and errors\").\n\n# Pagination\n\nWhen retrieving information (using\
    \ GET methods), the optional `pageSize` query parameter sets the maximum number\
    \ of rows to return in a response. The maximum is `40`; larger values are treated\
    \ as `40`. If this value is empty or invalid, `pageSize` typically defaults to\
    \ `10`.\n\nThe default value for the maximum number of rows retrieved can be overridden\
    \ at the method level.\n\nIf more rows are available, the response will include\
    \ a `nextPage` element, which contains a URL for requesting the next page.  If\
    \ this value is not provided, no more rows are available. No \"previous page\"\
    \ element is explicitly provided; to support backward paging, use the previous\
    \ call.\n\n## Array Size\n\nFor data items that are not paginated, the REST API\
    \ supports arrays of up to 300 rows.  Thus, for instance, repeated pagination\
    \ can retrieve thousands of customer accounts, but within any account an array\
    \ of no more than 300 rate plans is returned.\n\n# API Versions\n\nThe Zuora REST\
    \ API are version controlled. Versioning ensures that Zuora REST API changes are\
    \ backward compatible. Zuora uses a major and minor version nomenclature to manage\
    \ changes. By specifying a version in a REST request, you can get expected responses\
    \ regardless of future changes to the API.\n\n## Major Version\n\nThe major version\
    \ number of the REST API appears in the REST URL. Currently, Zuora only supports\
    \ the **v1** major version. For example, `POST https://rest.zuora.com/v1/subscriptions`.\n\
    \n## Minor Version\n\nZuora uses minor versions for the REST API to control small\
    \ changes. For example, a field in a REST method is deprecated and a new field\
    \ is used to replace it. \n\nSome fields in the REST methods are supported as\
    \ of minor versions. If a field is not noted with a minor version, this field\
    \ is available for all minor versions. If a field is noted with a minor version,\
    \ this field is in version control. You must specify the supported minor version\
    \ in the request header to process without an error. \n\nIf a field is in version\
    \ control, it is either with a minimum minor version or a maximum minor version,\
    \ or both of them. You can only use this field with the minor version between\
    \ the minimum and the maximum minor versions. For example, the `invoiceCollect`\
    \ field in the POST Subscription method is in version control and its maximum\
    \ minor version is 189.0. You can only use this field with the minor version 189.0\
    \ or earlier.\n\nIf you specify a version number in the request header that is\
    \ not supported, Zuora will use the minimum minor version of the REST API. In\
    \ our REST API documentation, if a field or feature requires a minor version number,\
    \ we note that in the field description.\n\nYou only need to specify the version\
    \ number when you use the fields require a minor version. To specify the minor\
    \ version, set the `zuora-version` parameter to the minor version number in the\
    \ request header for the request call. For example, the `collect` field is in\
    \ 196.0 minor version. If you want to use this field for the POST Subscription\
    \ method, set the  `zuora-version` parameter to `196.0` in the request header.\
    \ The `zuora-version` parameter is case sensitive.\n\nFor all the REST API fields,\
    \ by default, if the minor version is not specified in the request header, Zuora\
    \ will use the minimum minor version of the REST API to avoid breaking your integration.\
    \ \n\n### Minor Version History\n\nThe supported minor versions are not serial.\
    \ This section documents the changes made to each Zuora REST API minor version.\n\
    \nThe following table lists the supported versions and the fields that have a\
    \ Zuora REST API minor version.\n\n| Fields         | Minor Version      | REST\
    \ Methods    | Description |\n|:--------|:--------|:--------|:--------|\n| invoiceCollect\
    \ | 189.0 and earlier  | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription\
    \ \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription\
    \ \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/POSTSubscriptionCancellation\
    \ \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionSuspend\
    \ \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionResume\
    \ \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account\
    \ \"Create Account\")|Generates an invoice and collects a payment for a subscription.\
    \ |\n| collect        | 196.0 and later    | [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription\
    \ \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription\
    \ \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/POSTSubscriptionCancellation\
    \ \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionSuspend\
    \ \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionResume\
    \ \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account\
    \ \"Create Account\")|Collects an automatic payment for a subscription. |\n| invoice\
    \ | 196.0 and later| [Create Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription\
    \ \"Create Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\"); [Renew Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_RenewSubscription\
    \ \"Renew Subscription\"); [Cancel Subscription](https://www.zuora.com/developer/api-reference/#operation/POSTSubscriptionCancellation\
    \ \"Cancel Subscription\"); [Suspend Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionSuspend\
    \ \"Suspend Subscription\"); [Resume Subscription](https://www.zuora.com/developer/api-reference/#operation/PUTSubscriptionResume\
    \ \"Resume Subscription\"); [Create Account](https://www.zuora.com/developer/API-Reference/#operation/POST_Account\
    \ \"Create Account\")|Generates an invoice for a subscription. |\n| invoiceTargetDate\
    \ | 196.0 and earlier  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\") |Date through which charges are calculated on the\
    \ invoice, as `yyyy-mm-dd`. |\n| targetDate | 207.0 and later | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\") |Date through which charges are calculated on the\
    \ invoice, as `yyyy-mm-dd`. |\n| includeExisting DraftInvoiceItems | 196.0 and\
    \ earlier| [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\") | Specifies whether to include draft invoice items\
    \ in subscription previews. Specify it to be `true` (default) to include draft\
    \ invoice items in the preview result. Specify it to be `false` to excludes draft\
    \ invoice items in the preview result. |\n| includeExisting DraftDocItems | 207.0\
    \ and later  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\") | Specifies whether to include draft invoice items\
    \ in subscription previews. Specify it to be `true` (default) to include draft\
    \ invoice items in the preview result. Specify it to be `false` to excludes draft\
    \ invoice items in the preview result. |\n| previewType | 196.0 and earlier| [Preview\
    \ Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\") | The type of preview you will receive. The possible\
    \ values are `InvoiceItem`(default), `ChargeMetrics`, and `InvoiceItemChargeMetrics`.\
    \ |\n| previewType | 207.0 and later  | [Preview Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\"); [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\") | The type of preview you will receive. The possible\
    \ values are `LegalDoc`(default), `ChargeMetrics`, and `LegalDocChargeMetrics`.\
    \ |\n\n#### Version 207.0 and Later\n\nThe response structure of the [Preview\
    \ Subscription](https://www.zuora.com/developer/api-reference/#operation/POST_SubscriptionPreview\
    \ \"Preview Subscription\") and [Update Subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription\
    \ \"Update Subscription\") methods are changed. The following invoice related\
    \ response fields are moved to the invoice container:\n\n  * amount\n  * amountWithoutTax\n\
    \  * taxAmount\n  * invoiceItems\n  * targetDate\n  * chargeMetrics\n\n# Zuora\
    \ Object Model\n\nThe following diagram presents a high-level view of the key\
    \ Zuora objects. Click the image to open it in a new tab to resize it.\n\n<a href=\"\
    https://www.zuora.com/wp-content/uploads/2017/01/ZuoraERD.jpeg\" target=\"_blank\"\
    ><img src=\"https://www.zuora.com/wp-content/uploads/2017/01/ZuoraERD.jpeg\" alt=\"\
    Zuora Object Model Diagram\"></a>\n"
  contact:
    email: docs@zuora.com
  x-logo:
    url: https://dl.dropboxusercontent.com/u/99612594/zuoralogo.png
host: rest.zuora.com
schemes:
- https
basePath: /v1
produces:
- application/json; charset=utf-8
consumes:
- application/json; charset=utf-8
tags:
- name: Actions
  description: Actions are operations that are batch in nature. For example, the "create",
    "update", "delete", and other operations allow changes to up-to 50 objects at
    a time. The "query" operation will return up-to 2000 result records back at a
    time, before requiring additional pages of data to be returned via a subsequent
    "queryMore" operation.
- name: Accounting Codes
  description: ''
- name: Accounting Periods
  description: ''
- name: Accounts
  description: ''
- name: Amendments
  description: ''
- name: Attachments
  description: ''
- name: Bill Run
  description: "Use the Bill Run call to create ad hoc bill runs and Post, Cancel,\
    \ Query, and Delete bill runs.\n\n**Note:** This feature is in **Limited Availability**.\
    \ If you wish to have access to the feature, submit a request at [Zuora Global\
    \ Support](http://support.zuora.com). \n"
- name: Catalog
  description: ''
- name: Charge Revenue Summaries
  description: ''
- name: Communication Profiles
  description: ''
- name: Connections
  description: ''
- name: Contacts
  description: ''
- name: Credit Balance Adjustments
  description: ''
- name: Custom Exchange Rates
  description: ''
- name: Exports
  description: ''
- name: Features
  description: ''
- name: Get Files
  description: ''
- name: HMAC Signatures
  description: ''
- name: Hosted Pages
  description: ''
- name: Imports
  description: ''
- name: Invoice Adjustments
  description: ''
- name: Invoice Item Adjustments
  description: ''
- name: Invoice Items
  description: ''
- name: Invoice Payments
  description: ''
- name: Invoice Split Items
  description: ''
- name: Invoice Splits
  description: ''
- name: Invoices
  description: ''
- name: Journal Runs
  description: ''
- name: Mass Updater
  description: ''
- name: Notification History
  description: ''
- name: Operations
  description: ''
- name: Payment Method Snapshots
  description: ''
- name: Payment Method Transaction Logs
  description: ''
- name: Payment Methods
  description: ''
- name: Payment Transaction Logs
  description: ''
- name: Payments
  description: ''
- name: Product Features
  description: ''
- name: Product Rate Plan Charge Tiers
  description: ''
- name: Product Rate Plan Charges
  description: ''
- name: Product Rate Plans
  description: ''
- name: Products
  description: ''
- name: Quotes Document
  description: ''
- name: Rate Plan Charge Tiers
  description: ''
- name: Rate Plan Charges
  description: ''
- name: Rate Plans
  description: ''
- name: Refund Invoice Payments
  description: ''
- name: Refund Transaction Logs
  description: ''
- name: Refunds
  description: ''
- name: Revenue Events
  description: ''
- name: Revenue Items
  description: ''
- name: Revenue Rules
  description: ''
- name: Revenue Schedules
  description: ''
- name: RSA Signatures
  description: ''
- name: Settings
  description: ''
- name: Subscription Product Features
  description: ''
- name: Subscriptions
  description: ''
- name: Summary Journal Entries
  description: ''
- name: Taxation Items
  description: ''
- name: Transactions
  description: ''
- name: Unit Of Measure
  description: ''
- name: Usage
  description: ''
paths:
  /accounting-codes:
    post:
      summary: Create accounting code
      operationId: POST_AccountingCode
      description: "This reference describes how to create a new accounting code through\
        \ the REST API. \nThe accounting code will be active as soon as it has been\
        \ created.\n\n## Prerequisites\n  If you have Zuora Finance enabled on your\
        \ tenant, you must have the  Configure Accounting Codes permission. \n"
      tags:
      - Accounting Codes
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTAccountingCodeType'
      responses:
        '200':
          examples:
            application/json:
              id: 8a8081ae547aac1e01547efb61f20140
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTAccountingCodeResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"name\"\
          : \"CASH\", \n    \"type\": \"Cash\"\n}' \"https://rest.zuora.com/v1/accounting-codes\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounting-codes');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"name\"\
          : \"CASH\", \n    \"type\": \"Cash\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/accounting-codes", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    get:
      summary: Get all accounting codes
      operationId: GET_AllAccountingCodes
      description: This reference describes how to query all accounting codes in your
        chart of accounts through the REST API.
      tags:
      - Accounting Codes
      responses:
        '200':
          examples:
            application/json:
              accountingCodes:
              - id: e20b0747478025a10147816ba1c20097
                name: Accounts Receivable
                type: AccountsReceivable
                glAccountName: null
                glAccountNumber: null
                notes: null
                category: Assets
                status: Active
                CustomField__c: null
                createdOn: '2014-07-29 02:20:20'
                createdBy: e20b074746ec48f40147140f51e30a1a
                updatedOn: '2014-07-29 02:20:20'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              - id: e20b0747478025a10147816ba21900a0
                name: Discounts
                type: SalesDiscounts
                glAccountName: null
                glAccountNumber: null
                notes: null
                category: Revenue
                status: Inactive
                CustomField__c: null
                createdOn: '2014-07-29 02:20:20'
                createdBy: e20b074746ec48f40147140f51e30a1a
                updatedOn: '2014-09-27 22:11:07'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAccountingCodesType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-codes"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-codes');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounting-codes", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /accounting-codes/{ac-id}/activate:
    put:
      summary: Activate accounting code
      operationId: PUT_ActivateAccountingCode
      description: "This reference describes how to activate an accounting code through\
        \ the REST API.\n\nPrerequisites\n-------------\nIf you have Zuora Finance\
        \ enabled on your tenant, you must have the Manage Accounting Code permission.\
        \ \n"
      tags:
      - Accounting Codes
      parameters:
      - name: ac-id
        in: path
        required: true
        type: string
        description: ID of the accounting code you want to activate.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-codes/{ac-id}/activate"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-codes/{ac-id}/activate');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes/{ac-id}/activate")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-codes/{ac-id}/activate", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes/{ac-id}/activate")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes/{ac-id}/activate");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-codes/{ac-id}/deactivate:
    put:
      summary: Deactivate accounting code
      operationId: PUT_DeactivateAccountingCode
      description: "This reference describes how to deactivate an accounting code\
        \ through the REST API.\n\n## Prerequisites\nIf you have Zuora Finance enabled\
        \ on your tenant, you must have the Manage Accounting Code permission.\n##\
        \ Limitations\nYou can only deactivate accounting codes that are not associated\
        \ with any transactions. \nYou cannot disable accounting codes of type AccountsReceivable.\n"
      tags:
      - Accounting Codes
      parameters:
      - name: ac-id
        in: path
        required: true
        type: string
        description: ID of the accounting code you want to deactivate.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-codes/{ac-id}/deactivate"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-codes/{ac-id}/deactivate');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes/{ac-id}/deactivate")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-codes/{ac-id}/deactivate", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes/{ac-id}/deactivate")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes/{ac-id}/deactivate");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-codes/{ac-id}:
    delete:
      summary: Delete accounting code
      operationId: DELETE_AccountingCode
      description: |
        This reference describes how to delete an accounting code through the REST API.
        ## Prerequisites
        If you have Zuora Finance enabled on your tenant, then you must have the Delete Unused Accounting Code permission.
        ## Limitations
        You can only delete accounting codes that have never been associated with any transactions. An accounting code must be deactivated before you can delete it.
      tags:
      - Accounting Codes
      parameters:
      - name: ac-id
        in: path
        required: true
        type: string
        description: ID of the accounting code you want to delete.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-codes/{ac-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-codes/{ac-id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes/{ac-id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/accounting-codes/{ac-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes/{ac-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes/{ac-id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    get:
      summary: Query an accounting code
      operationId: GET_AccountingCode
      description: This reference describes how to query an accounting code through
        the REST API.
      tags:
      - Accounting Codes
      parameters:
      - name: ac-id
        in: path
        description: ID of the accounting code you want to query.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              id: 8a8081ae547aac1e01547efb61f20140
              name: CASH
              type: Cash
              glAccountName: null
              glAccountNumber: null
              notes: null
              category: Assets
              status: Active
              customField__c: customValue
              createdOn: '2016-05-04 01:23:07'
              createdBy: e20b074746ec48f40147140f51e30a1a
              updatedOn: '2016-05-05 20:07:38'
              updatedBy: e20b074746ec48f40147140f51e30a1a
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAccountingCodeItemType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-codes/{ac-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-codes/{ac-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes/{ac-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounting-codes/{ac-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes/{ac-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes/{ac-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Update an accounting code
      operationId: PUT_AccountingCode
      description: "This reference describes how to update an existing accounting\
        \ code through the REST API.\n## Prerequisites\n  If you have Zuora Finance\
        \ enabled on your tenant, you must have the  Manage Accounting Code permission.\
        \ \n## Limitations\nYou can only update accounting codes that are not already\
        \ associated with any transactions.\n"
      tags:
      - Accounting Codes
      parameters:
      - name: ac-id
        in: path
        description: ID of the accounting code you want to update.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTAccountingCodeType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"name\"\
          : \"CASH\", \n    \"type\": \"Cash\"\n}' \"https://rest.zuora.com/v1/accounting-codes/{ac-id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounting-codes/{ac-id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"name\"\
          : \"CASH\", \n    \"type\": \"Cash\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-codes/{ac-id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-codes/{ac-id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-codes/{ac-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-codes/{ac-id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"name\": \"CASH\", \n    \"type\": \"Cash\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-periods/{ap-id}/close:
    put:
      summary: Close accounting period
      operationId: PUT_CloseAccountingPeriod
      description: |-
        Close an accounting period by accounting period ID.

        Prerequisites
        -------------
        You must have Zuora Finance enabled on your tenant. You must have the Manage Close Process and Run Trial Balance user permissions.

        Limitations
        -----------
        * The accounting period cannot already be closed.
        * The accounting period cannot be in the process of running a trial balance.
        * All earlier accounting periods must be closed.
        * There must be no required action items for the accounting period. See Reconcile Transactions Before Closing an Accounting Period for more information.

        Notes
        -----
        When you close an accounting period in Zuora, a trial balance is automatically run for that period. A successful response means only that the accounting period is now closed, but does not mean that the trial balance has successfully completed.
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        description: ID of the accounting period you want to close.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-periods/{ap-id}/close"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}/close');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}/close")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-periods/{ap-id}/close", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}/close")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}/close");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-periods/{ap-id}/pending-close:
    put:
      summary: Set accounting period to pending close
      operationId: PUT_PendingCloseAccountingPeriod
      description: "Sets an accounting period to pending close.\n\n\nPrerequisites\n\
        -------------\n\n* You must have Zuora Finance enabled on your tenant.\n*\
        \ You must have the Manage Close Process and Run Trial Balance user permissions.\n\
        \n            \nLimitations \n -----------\n \n * The accounting period cannot\
        \ be closed or pending close.\n \n * The accounting period cannot be in the\
        \ process of running a trial balance.\n \n * All earlier accounting periods\
        \ must be closed.\n \n \nNotes\n-----\nWhen you set an accounting period to\
        \ pending close in Zuora, a trial balance is automatically run for that period.\
        \ A response of `{ \"success\": true }`  means only that the accounting period\
        \ status is now pending close, but does not mean that the trial balance has\
        \ successfully completed. You can use the Get Accounting Period REST API call\
        \ to view details about the outcome of the trial balance.\n"
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        description: ID of the accounting period you want to set to pending close.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-periods/{ap-id}/pending-close"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}/pending-close');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}/pending-close")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-periods/{ap-id}/pending-close", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}/pending-close")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}/pending-close");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-periods:
    post:
      summary: Create accounting period
      operationId: POST_AccountingPeriod
      description: |-
        Creates an accounting period.
        Prerequisites
        -------------
        * You must have Zuora Finance enabled on your tenant.
        * You must have the Create Accounting Period user permission.

        Limitations
        -----------
        * When creating the first accounting period on your tenant, the start date must be equal to or earlier than the date of the earliest transaction on the tenant.
        * Start and end dates of accounting periods must be contiguous. For example, if one accounting period ends on January 31, the next period must start on February 1.
        * If you have the Revenue Recognition Package and have enabled the "Monthly recognition over time" revenue recognition model, the accounting period start date and end date must be on the first day and last day of the month, respectively. Note that the start and end dates do not necessarily have to be in the same month.
      tags:
      - Accounting Periods
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTAccountingPeriodType'
      responses:
        '200':
          examples:
            application/json:
              id: 7b7181ae547aac1e01547efb61f20162
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTAccountingPeriodResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"endDate\"\
          : \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\"\
          , \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\
          \n}' \"https://rest.zuora.com/v1/accounting-periods\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounting-periods');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"endDate\"\
          : \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\"\
          , \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/accounting-periods", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"endDate\": \"2016-06-30\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jun 2016\", \n    \"notes\": \"optional notes here\", \n    \"startDate\": \"2016-06-01\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    get:
      summary: Get all accounting periods
      operationId: GET_AllAccountingPeriods
      description: Retrieves all accounting periods on your tenant.
      tags:
      - Accounting Periods
      responses:
        '200':
          examples:
            application/json:
              accountingPeriods:
              - id: 8a8081ae5374904f01538338b66e1005
                name: Mar 2016
                startDate: '2016-03-01'
                endDate: '2016-03-31'
                status: Open
                runTrialBalanceStatus: Error
                runTrialBalanceStart: '2016-03-16 23:25:22'
                runTrialBalanceEnd: null
                runTrialBalanceErrorMessage: 'Error creating the trial balance: exchange
                  rate from USD to GBP on 08/03/2015 is not available.  Please import
                  the rate and run trial balance again.'
                fiscalYear: 2016
                notes: ''
                fileIds:
                  unprocessedChargesFileId: null
                  accountsReceivableInvoiceAgingDetailExportFileId: 8a8081ae5374904f01538340273013f3
                  accountsReceivableAccountAgingDetailExportFileId: 8a8081ae5374904f01538340274a13f4
                  revenueDetailExcelFileId: 8a8081ae5374904f0153834032e41417
                  revenueDetailCsvFileId: 8a8081ae5374904f0153834033221418
                  arRollForwardDetailExportFileId: null
                  fxRealizedGainAndLossDetailExportFileId: null
                  fxUnrealizedGainAndLossDetailExportFileId: null
                createdOn: '2016-03-16 23:17:25'
                createdBy: e20b074746ec48f40147140f51e30a1a
                updatedOn: '2016-03-16 23:25:22'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              - id: 8a8081ae5374904f0153833918af1007
                name: Apr 2016
                startDate: '2016-04-01'
                endDate: '2016-04-30'
                status: Open
                runTrialBalanceStatus: Error
                runTrialBalanceStart: '2016-03-16 23:23:40'
                runTrialBalanceEnd: null
                runTrialBalanceErrorMessage: null
                fiscalYear: 2016
                notes: ''
                fileIds:
                  unprocessedChargesFileId: null
                  accountsReceivableInvoiceAgingDetailExportFileId: 8a8081ae5374904f0153833e9a651363
                  accountsReceivableAccountAgingDetailExportFileId: 8a8081ae5374904f0153833e9a7a1364
                  revenueDetailExcelFileId: 8a8081ae5374904f0153833ea2c813ae
                  revenueDetailCsvFileId: 8a8081ae5374904f0153833ea2d613af
                  arRollForwardDetailExportFileId: null
                  fxRealizedGainAndLossDetailExportFileId: null
                  fxUnrealizedGainAndLossDetailExportFileId: null
                createdOn: '2016-03-16 23:17:50'
                createdBy: e20b074746ec48f40147140f51e30a1a
                updatedOn: '2016-03-16 23:23:40'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              - id: 8a8081ae5374904f0153833e4590132d
                name: May 2016
                startDate: '2016-05-01'
                endDate: '2016-05-31'
                status: Open
                runTrialBalanceStatus: Error
                runTrialBalanceStart: '2016-05-18 01:42:30'
                runTrialBalanceEnd: null
                runTrialBalanceErrorMessage: null
                fiscalYear: 2016
                notes: ''
                fileIds:
                  unprocessedChargesFileId: null
                  accountsReceivableInvoiceAgingDetailExportFileId: null
                  accountsReceivableAccountAgingDetailExportFileId: null
                  revenueDetailExcelFileId: 8a8081ae54c2eabb0154c307e27e0033
                  revenueDetailCsvFileId: 8a8081ae54c2eabb0154c307e2920034
                  arRollForwardDetailExportFileId: null
                  fxRealizedGainAndLossDetailExportFileId: null
                  fxUnrealizedGainAndLossDetailExportFileId: null
                createdOn: '2016-03-16 23:23:29'
                createdBy: e20b074746ec48f40147140f51e30a1a
                updatedOn: '2016-05-18 01:42:30'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              - id: e20b0747478025a1014780e489a60002
                name: Open-Ended
                startDate: '2016-06-01'
                endDate: null
                status: Open
                runTrialBalanceStatus: Pending
                runTrialBalanceStart: null
                runTrialBalanceEnd: null
                runTrialBalanceErrorMessage: null
                fiscalYear: 0
                notes: null
                fileIds:
                  unprocessedChargesFileId: null
                  accountsReceivableInvoiceAgingDetailExportFileId: null
                  accountsReceivableAccountAgingDetailExportFileId: null
                  revenueDetailExcelFileId: null
                  revenueDetailCsvFileId: null
                  arRollForwardDetailExportFileId: null
                  fxRealizedGainAndLossDetailExportFileId: null
                  fxUnrealizedGainAndLossDetailExportFileId: null
                createdOn: '2014-07-28 23:52:46'
                createdBy: 402881e522cf4f9b0122cf5d82860002
                updatedOn: '2016-03-16 23:23:29'
                updatedBy: e20b074746ec48f40147140f51e30a1a
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAccountingPeriodsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-periods"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounting-periods", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /accounting-periods/{ap-id}:
    get:
      summary: Get accounting period
      operationId: GET_AccountingPeriod
      description: |
        Retrieves an accounting period.
        Prerequisites
        -------------

        You must have Zuora Finance enabled on your tenant.
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        description: ID of the accounting period you want to get.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              id: e20b074749d2a38b0149eac2e9550aa9
              name: Oct 2014
              startDate: '2014-10-01'
              endDate: '2014-10-31'
              status: Closed
              runTrialBalanceStatus: Completed
              runTrialBalanceStart: '2015-09-28 00:53:13'
              runTrialBalanceEnd: '2015-09-28 00:53:36'
              runTrialBalanceErrorMessage: null
              fiscalYear: 2014
              notes: ''
              fileIds:
                unprocessedChargesFileId: null
                accountsReceivableInvoiceAgingDetailExportFileId: 8a8081ae5002967c015012f122f10913
                accountsReceivableAccountAgingDetailExportFileId: 8a8081ae5002967c015012f1230e0914
                revenueDetailExcelFileId: 8a8081ae5002967c015012f129870925
                revenueDetailCsvFileId: 8a8081ae5002967c015012f129a10926
                arRollForwardDetailExportFileId: 8a8081ae5002967c015012f15d7b09e2
                fxRealizedGainAndLossDetailExportFileId: 8a8081ae5002967c015012f151a609ba
                fxUnrealizedGainAndLossDetailExportFileId: 8a8081ae5002967c015012f150b509b8
              createdOn: '2014-11-25 22:21:22'
              createdBy: e20b074746ec48f40147140f51e30a1a
              updatedOn: '2015-09-28 00:53:13'
              updatedBy: e20b074746ec48f40147140f51e30a1a
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAccountingPeriodType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-periods/{ap-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounting-periods/{ap-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Update accounting period
      operationId: PUT_UpdateAccountingPeriod
      description: |2

        Updates an accounting period.

        Prerequisites
        -------------

        * You must have Zuora Finance enabled on your tenant.

        * You must have the Create Accounting Period user permission. See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).

        Limitations
        -----------

        * You can update the start date of only the earliest accounting period on your tenant. You cannot update the start date of later periods.

        * If you update the earliest accounting period, the start date must be equal to or earlier than the date of the earliest transaction on the tenant.

        * Start and end dates of accounting periods must be contiguous. For example, if one accounting period ends on January 31, the next period must start on February 1.

        * If you have the Revenue Recognition Package and have enabled the "Monthly recognition over time" revenue recognition model, the accounting period start date and end date must be on the first day and last day of the month, respectively. Note that the start and end dates do not necessarily have to be in the same month.

        * You cannot update the start date or end date of an accounting period if:
          * Any revenue has been distributed into the period.
          * The period has any active journal entries.
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        description: ID of the accounting period you want to update.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTAccountingPeriodType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"endDate\"\
          : \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\"\
          , \n    \"startDate\": \"2016-01-01\"\n}' \"https://rest.zuora.com/v1/accounting-periods/{ap-id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"endDate\"\
          : \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\"\
          , \n    \"startDate\": \"2016-01-01\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-periods/{ap-id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"endDate\": \"2016-01-31\", \n    \"fiscalYear\": 2016, \n    \"name\": \"Jan 2016\", \n    \"startDate\": \"2016-01-01\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: Delete accounting period
      operationId: DELETE_AccountingPeriod
      description: |2

        Deletes an accounting period.

        Prerequisites
        -------------

         * You must have Zuora Finance enabled on your tenant.

         * You must have the Delete Accounting Period user permission. See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).


        Limitations
        -----------

        The accounting period to be deleted:

        * Must be the most recent accounting period

        * Must be an open accounting period

        * Must have no revenue distributed into it

        * Must not have any active journal entries

        * Must not be the open-ended accounting period

        * Must not be in the process of running a trial balance
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        required: true
        type: string
        description: ID of the accounting period you want to delete.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounting-periods/{ap-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/accounting-periods/{ap-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /accounting-periods/{ap-id}/reopen:
    put:
      summary: Re-open accounting period
      operationId: PUT_ReopenAccountingPeriod
      description: |-
        Re-opens an accounting period.
        Prerequisites
        -------------
        * You must have Zuora Finance enabled on your tenant.
        * You must have the Manage Close Process and Run Trial Balance user permissions.

        Limitations
        -----------
        * The accounting period must be closed or pending close.
        * You can only re-open an accounting period that is immediately previous to an open period.
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        required: true
        type: string
        description: ID of the accounting period that you want to re-open.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-periods/{ap-id}/reopen"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}/reopen');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}/reopen")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-periods/{ap-id}/reopen", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}/reopen")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}/reopen");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounting-periods/{ap-id}/run-trial-balance:
    put:
      summary: Run trial balance
      operationId: PUT_RunTrialBalance
      description: "Runs the trial balance for an accounting period. \n\nPrerequisites\n\
        -------------\n\n* You must have Zuora Finance enabled on your tenant.\n\n\
        * You must have the Manage Close Process and Run Trial Balance user permissions.\
        \ See [Finance Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/f_Finance_Roles).\n\
        \n          \nLimitations \n-----------\n \n * The accounting period must\
        \ be open.\n \n * The accounting period cannot already be in the process of\
        \ running a trial balance.\n \nNotes\n-----\nThe trial balance is run asynchronously.\
        \ A response of `{ \"success\": true }` means only that the trial balance\
        \ has started processing, but does not mean that the trial balance has successfully\
        \ completed. You can use the [Get Accounting Period](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Accounting_Periods/Get_Accounting_Period)\
        \ REST API call to view details about the outcome of the trial balance.\n"
      tags:
      - Accounting Periods
      parameters:
      - name: ap-id
        in: path
        required: true
        type: string
        description: ID of the accounting period for which you want to run a trial
          balance.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/accounting-periods/{ap-id}/run-trial-balance"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounting-periods/{ap-id}/run-trial-balance');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounting-periods/{ap-id}/run-trial-balance")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounting-periods/{ap-id}/run-trial-balance", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounting-periods/{ap-id}/run-trial-balance")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounting-periods/{ap-id}/run-trial-balance");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounts:
    post:
      summary: Create account
      operationId: POST_Account
      description: "This REST API reference describes how to create a customer account\
        \ with a credit-card payment method, a bill-to contact, and an optional sold-to\
        \ contact. Request and response field descriptions and sample code are provided.\
        \ Use this method to optionally create a subscription, invoice for that subscription,\
        \ and collect payment through the default payment method. The transaction\
        \ is atomic; if any part fails for any reason, the entire transaction is rolled\
        \ back.\n\nThis API call is CORS Enabled, so you can use client-side Javascript\
        \ to invoke the call. \n\n## Notes\n1. The account is created in active status.\
        \  \n2. The request must provide either a **creditCard** structure or the\
        \ **hpmCreditCardPaymentMethodId** field (but not both). The one provided\
        \ becomes the default payment method for this account. If the credit card\
        \ information is declined or can't be verified, then the account is not created.\n\
        3. Customer accounts created with this call are automatically be set to Auto\
        \ Pay.\n4. If either the **workEmail** or **personalEmail** are specified,\
        \ then the account's email delivery preference is automatically set to `true`.\
        \ (In that case, emails go to the **workEmail** address, if it exists, or\
        \ else the **personalEmail**.) If neither field is specified, the email delivery\
        \ preference is automatically set to `false`.\n\n## Defaults for customerAcceptanceDate\
        \ and serviceActivationDate\nDefault values for **customerAcceptanceDate**\
        \ and **serviceActivationDate** are set as follows.\n\n|        | serviceActivationDate(SA)\
        \ specified          | serviceActivationDate (SA) NOT specified  |\n| -------------\
        \ |:-------------:| -----:|\n| customerAcceptanceDate (CA) specified     \
        \ | SA uses value in the request call; CA uses value in the request call|\
        \ CA uses value in the request call;SA uses CE as default |\n| customerAcceptanceDate\
        \ (CA) NOT specified      | SA uses value in the request call; CA uses SA\
        \ as default |   SA and CA use CE as default |\n"
      tags:
      - Accounts
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ fields.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTAccountType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              accountId: 402892c74c9193cd014c96bbe7c101f9
              accountNumber: A00000004
              paymentMethodId: 402892c74c9193cd014c96bbe7d901fd
          description: ''
          schema:
            $ref: '#/definitions/POSTAccountResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"additionalEmailAddresses\"\
          : [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n\
          \    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\"\
          : {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\"\
          : \"Foster City\", \n        \"country\": \"United States\", \n        \"\
          firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\"\
          : \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"\
          zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\"\
          : \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\"\
          , \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n\
          \    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test\
          \ Account\", \n    \"notes\": \"This account is for demo purposes.\", \n\
          \    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n\
          \        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\"\
          , \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial\
          \ subscription for POST account demo.\", \n        \"renewalTerm\": 12,\
          \ \n        \"subscribeToRatePlans\": [\n            {\n               \
          \ \"chargeOverrides\": [\n                    {\n                      \
          \  \"price\": 1000, \n                        \"productRatePlanChargeId\"\
          : \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n      \
          \              {\n                        \"price\": 1000, \n          \
          \              \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\
          \n                    }\n                ], \n                \"productRatePlanId\"\
          : \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n\
          \                \"chargeOverrides\": [\n                    {\n       \
          \                 \"price\": 1000, \n                        \"productRatePlanChargeId\"\
          : \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n        \
          \        ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\
          \n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n\
          }' \"https://rest.zuora.com/v1/accounts\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounts');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"additionalEmailAddresses\"\
          : [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n\
          \    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\"\
          : {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\"\
          : \"Foster City\", \n        \"country\": \"United States\", \n        \"\
          firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\"\
          : \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"\
          zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\"\
          : \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\"\
          , \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n\
          \    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test\
          \ Account\", \n    \"notes\": \"This account is for demo purposes.\", \n\
          \    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n\
          \        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\"\
          , \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial\
          \ subscription for POST account demo.\", \n        \"renewalTerm\": 12,\
          \ \n        \"subscribeToRatePlans\": [\n            {\n               \
          \ \"chargeOverrides\": [\n                    {\n                      \
          \  \"price\": 1000, \n                        \"productRatePlanChargeId\"\
          : \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n      \
          \              {\n                        \"price\": 1000, \n          \
          \              \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\
          \n                    }\n                ], \n                \"productRatePlanId\"\
          : \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n\
          \                \"chargeOverrides\": [\n                    {\n       \
          \                 \"price\": 1000, \n                        \"productRatePlanChargeId\"\
          : \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n        \
          \        ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\
          \n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n\
          }');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounts")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/accounts", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounts")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounts");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"additionalEmailAddresses\": [\n        \"test1@test.com\", \n        \"test2@test.com\"\n    ], \n    \"autoPay\": false, \n    \"billCycleDay\": 0, \n    \"billToContact\": {\n        \"address1\": \"1051 E Hillsdale Blvd\", \n        \"city\": \"Foster City\", \n        \"country\": \"United States\", \n        \"firstName\": \"John\", \n        \"lastName\": \"Smith\", \n        \"state\": \"CA\", \n        \"workEmail\": \"john.smith@test.com\", \n        \"zipCode\": \"94404\"\n    }, \n    \"collect\": false, \n    \"currency\": \"USD\", \n    \"hpmCreditCardPaymentMethodId\": \"2c92c0f93cf64d94013cfe2d20db61a7\", \n    \"invoice\": true, \n    \"invoiceDeliveryPrefsEmail\": true, \n    \"invoiceDeliveryPrefsPrint\": false, \n    \"name\": \"Zuora Test Account\", \n    \"notes\": \"This account is for demo purposes.\", \n    \"paymentTerm\": \"Due Upon Receipt\", \n    \"subscription\": {\n        \"autoRenew\": true, \n        \"contractEffectiveDate\": \"2016-01-01\", \n        \"initialTerm\": 12, \n        \"notes\": \"This is a trial subscription for POST account demo.\", \n        \"renewalTerm\": 12, \n        \"subscribeToRatePlans\": [\n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5d4a5156b28\"\n                    }, \n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f94ac8307f014ae5dbe2947851\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f94ac8307f014ae5d3d1d469e2\"\n            }, \n            {\n                \"chargeOverrides\": [\n                    {\n                        \"price\": 1000, \n                        \"productRatePlanChargeId\": \"2c92c0f83cf64298013d027725a67b7b\"\n                    }\n                ], \n                \"productRatePlanId\": \"2c92c0f93cf64d94013d027681560341\"\n            }\n        ], \n        \"termType\": \"TERMED\"\n    }\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounts/{account-key}:
    get:
      summary: Get account
      operationId: GET_Account
      description: |
        This REST API reference describes how to retrieve basic information about a customer account.

        This REST call is a quick retrieval that doesn't include the account's subscriptions, invoices, payments, or usage details. Use Get account summary to get more detailed information about an account.
      tags:
      - Accounts
      parameters:
      - name: account-key
        in: path
        description: Account number or account ID.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              basicInfo:
                id: 402892c74c9193cd014c91d35b0a0132
                name: Test
                accountNumber: A00000001
                notes: ''
                status: Active
                crmId: ''
                batch: Batch1
                invoiceTemplateId: null
                communicationProfileId: 303d186840e611df817c002185d714e1
              billingAndPayment:
                billCycleDay: 1
                currency: USD
                paymentTerm: Net 30
                paymentGateway: TestGateway
                invoiceDeliveryPrefsPrint: false
                invoiceDeliveryPrefsEmail: true
                additionalEmailAddresses:
                - test1@test.com
                - test2@test.com
              metrics:
                balance: 0
                totalInvoiceBalance: 0
                creditBalance: 0
                contractedMrr: -900
              billToContact:
                address1: ''
                address2: ''
                city: ''
                country: null
                county: null
                fax: ''
                firstName: Test
                homePhone: ''
                lastName: Test
                mobilePhone: ''
                nickname: ''
                otherPhone: ''
                otherPhoneType: null
                personalEmail: ''
                state: ''
                taxRegion: null
                workEmail: Test@test.com
                workPhone: ''
                zipCode: ''
              soldToContact:
                address1: ''
                address2: ''
                city: ''
                country: null
                county: null
                fax: ''
                firstName: Test
                homePhone: ''
                lastName: Test
                mobilePhone: ''
                nickname: ''
                otherPhone: ''
                otherPhoneType: null
                personalEmail: ''
                state: ''
                taxRegion: null
                workEmail: Test@test.com
                workPhone: ''
                zipCode: ''
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAccountType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Update account
      operationId: PUT_Account
      description: |
        This REST API reference describes how to update a customer account by specifying the account-key.

        ## Notes
        1. Only the fields to be changed should be specified.  Any field that's not included in the request body will not be changed.
        2. If an empty field is submitted with this call, the corresponding field in the account is emptied.
        3. Email addresses: If no email addresses are specified, no change is made to the email addresses on file or to the email delivery preference. If either the **personalEmail** or **workEmail** is specified (or both), the system updates the corresponding email address(es) on file and the email delivery preference is set to `true`. (In that case, emails go to the **workEmail** address, if it exists, or else the **personalEmail**.) On the other hand, if as a result of this call both of the email addresses for the account are empty, the email delivery preference is set to `false`.
        4. The bill-to and sold-to contacts are separate data entities; updating either one does not update the other.
      tags:
      - Accounts
      parameters:
      - name: account-key
        in: path
        required: true
        type: string
        description: Account number or account ID.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTAccountType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"additionalEmailAddresses\"\
          : [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n\
          \    \"paymentGateway\": \"TestGateway\"\n}' \"https://rest.zuora.com/v1/accounts/{account-key}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/accounts/{account-key}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"additionalEmailAddresses\"\
          : [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n\
          \    \"paymentGateway\": \"TestGateway\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounts/{account-key}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/accounts/{account-key}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounts/{account-key}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"additionalEmailAddresses\": [\n        \"test3@test.com\", \n        \"test4@test.com\"\n    ], \n    \"paymentGateway\": \"TestGateway\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /accounts/{account-key}/summary:
    get:
      summary: Get account summary
      operationId: GET_AccountSummary
      description: "This REST API reference describes how to retrieve detailed information\
        \ about the specified customer account.\n\nThe response includes everything\
        \ retrieved with the Get basic account information call, plus a summary of\
        \ the account's subscriptions, invoices, payments, and usage for the last\
        \ six months.\n\n## Notes \nReturns only the six most recent subscriptions\
        \ based on the subscription updatedDate. Within those subscriptions, there\
        \ may be many rate plans and many rate plan charges. These items are subject\
        \ to the maximum limit on the array size. \n"
      tags:
      - Accounts
      parameters:
      - name: account-key
        in: path
        required: true
        type: string
        description: Account number or account ID.
      responses:
        '200':
          examples:
            application/json:
              payments:
              - paidInvoices:
                - invoiceNumber: INV00000159
                  appliedPaymentAmount: 5.0
                  invoiceId: 2c92a09539190dbe0139190f42780012
                - invoiceNumber: INV00000323
                  appliedPaymentAmount: 139722.1
                  invoiceId: 2c92a0953a3fa95d013a407c10a60100
                - invoiceNumber: INV00000160
                  appliedPaymentAmount: 10521.0
                  invoiceId: 2c92a09739190dc60139194bcf1b0098
                paymentNumber: P-00000075
                status: Processed
                effectiveDate: '2013-03-27'
                id: 2c92c8f83dabf9cf013daf3bfa0305a6
                paymentType: Electronic
              - paidInvoices:
                - invoiceNumber: INV00000159
                  appliedPaymentAmount: 5.0
                  invoiceId: 2c92a09539190dbe0139190f42780012
                paymentNumber: P-00000056
                status: Processed
                effectiveDate: '2012-08-11'
                id: 2c92a0f9391832b101391922ad5f049d
                paymentType: Electronic
              invoices:
              - amount: 139722.1
                status: Posted
                invoiceNumber: INV00000323
                invoiceDate: '2013-02-11'
                balance: 0.0
                id: 2c92a0953a3fa95d013a407c10a60100
                dueDate: '2013-02-11'
              - amount: 10521.0
                status: Posted
                invoiceNumber: INV00000160
                invoiceDate: '2012-08-11'
                balance: 0.0
                id: 2c92a09739190dc60139194bcf1b0098
                dueDate: '2012-08-11'
              - amount: 10.0
                status: Posted
                invoiceNumber: INV00000159
                invoiceDate: '2012-08-11'
                balance: 0.0
                id: 2c92a09539190dbe0139190f42780012
                dueDate: '2012-08-11'
              usage:
              - unitOfMeasure: UOM
                quantity: 10.0
                startDate: 2012-02
              - unitOfMeasure: UOM
                quantity: 10.0
                startDate: 2012-01
              basicInfo:
                defaultPaymentMethod:
                  creditCardNumber: '************1111'
                  paymentMethodType: CreditCard
                  creditCardExpirationMonth: 10
                  creditCardExpirationYear: 2020
                  creditCardType: Visa
                  id: 2c92c8f83dabf9cf013daef12dd303b0
                status: Active
                lastInvoiceDate: '2013-02-11'
                lastPaymentAmount: 150248.1
                billCycleDay: 1
                invoiceDeliveryPrefsPrint: false
                invoiceDeliveryPrefsEmail: true
                additionalEmailAddresses:
                - test1@test.com
                - test2@test.com
                name: subscribeCallYan_1
                balance: 0.0
                accountNumber: A00001115
                id: 2c92a0f9391832b10139183e277a0042
                dfadsf__c: null
                currency: USD
                lastPaymentDate: '2013-03-27'
              soldToContact:
                fax: ''
                taxRegion: ''
                country: United States
                zipCode: '95135'
                county: ''
                lastName: Cho
                workEmail: work_email@zbcloud.com
                state: California
                address2: ''
                address1: 278 Bridgeton Circle
                firstName: Bill
                id: 2c92a0f9391832b10139183e27940043
                workPhone: '5555551212'
                city: San Jose
              success: true
              subscriptions:
              - termEndDate: '2014-02-01'
                termStartDate: '2013-02-01'
                status: Active
                initialTerm: 12
                autoRenew: true
                subscriptionNumber: A-S00001081
                subscriptionStartDate: '2013-02-01'
                id: 2c92c8f83dc4f752013dc72c24ee016d
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: QSF_Tier
                termType: TERMED
                renewalTerm: 3
              - termEndDate: '2014-02-01'
                termStartDate: '2013-02-01'
                status: Active
                initialTerm: 12
                autoRenew: true
                subscriptionNumber: A-S00001080
                subscriptionStartDate: '2013-02-01'
                id: 2c92c8f83dc4f752013dc72bb85c0127
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: QSF_Tier
                termType: TERMED
                renewalTerm: 3
              - termEndDate: '2014-04-01'
                termStartDate: '2013-12-01'
                status: Cancelled
                initialTerm: 10
                autoRenew: false
                subscriptionNumber: A-S00001079
                subscriptionStartDate: '2013-02-01'
                id: 2c92c8f83dc4f752013dc723fdab00d4
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: QSF_Tier
                termType: TERMED
                renewalTerm: 4
              - termEndDate: '2012-02-11'
                termStartDate: '2011-02-11'
                status: Active
                initialTerm: 12
                autoRenew: false
                subscriptionNumber: A-S00001076
                subscriptionStartDate: '2011-02-11'
                id: 2c92c8f83db0b4b4013db4717ad000ec
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: Month_PerUnit
                - productName: Recurring Charge
                  ratePlanName: Month_PerUnit
                termType: TERMED
                renewalTerm: 3
              - termEndDate: '2012-02-11'
                termStartDate: '2011-02-11'
                status: Active
                initialTerm: 12
                autoRenew: false
                subscriptionNumber: A-S00001075
                subscriptionStartDate: '2011-02-11'
                id: 2c92c8f83db0b4b4013db3ab6a4d00bc
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: Month_PerUnit
                - productName: Recurring Charge
                  ratePlanName: Month_PerUnit
                termType: TERMED
                renewalTerm: 3
              - termEndDate: '2012-02-11'
                termStartDate: '2011-02-11'
                status: Active
                initialTerm: 12
                autoRenew: false
                subscriptionNumber: A-S00001074
                subscriptionStartDate: '2011-02-11'
                id: 2c92c8f83db0b4b4013db3aa9fbd0090
                ratePlans:
                - productName: Recurring Charge
                  ratePlanName: Month_PerUnit
                termType: TERMED
                renewalTerm: 3
              billToContact:
                fax: ''
                taxRegion: ''
                country: United States
                zipCode: '95135'
                county: ''
                lastName: Zou
                workEmail: work_email@zbcloud.com
                state: California
                address2: ''
                address1: 1400 Bridge Pkwy
                firstName: Cheng
                id: 2c92a0f9391832b10139183e27940043
                workPhone: '5555551212'
                city: San Jose
          description: ''
          schema:
            $ref: '#/definitions/GETAccountSummaryType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/accounts/{account-key}/summary"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/accounts/{account-key}/summary');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/accounts/{account-key}/summary")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/accounts/{account-key}/summary", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/accounts/{account-key}/summary")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/accounts/{account-key}/summary");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /action/amend:
    post:
      summary: Amend
      operationId: Action_POSTamend
      description: "\nUse the amend call to change a subscription, such as upgrading\
        \ the subscription.\n\nThe amend call:\n\n* Supports the Amendment object\n\
        * Is not an asynchronous process\n\n## Limits \n### Objects per Call \nUp\
        \ to ten Amendment objects.\n\n### System Rate Limits  \n1,000 calls per 10-minute\
        \ time window per tenant.\n\nIf you approach or exceed this limit, you will\
        \ receive a 429 error. Multi-threading causes you to approach this limit more\
        \ quickly.\n\n### Errors \nIf one of your Amendment objects fails in a single\
        \ amend call, then the entire call fails.\n\n## Required Fields \nThe following\
        \ fields are always required for this call:\n\n* `Amendment`.`Type`\n* `Amendment`.`Name`\n\
        * `Amendment`.`SubscriptionId`\n"
      tags:
      - Actions
      parameters:
      - name: amendRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionamendRequest'
      responses:
        '200':
          examples:
            application/json:
              results:
              - SubscriptionId: 2c93808457d787030157e02e27e21eaa
                TotalDeltaTcv: 360
                AmendmentIds:
                - 2c93808457d787030157e02e27781ea0
                TotalDeltaMrr: 30
                Success: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionamendResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"requests\"\
          : [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\"\
          : false, \n                \"InvoiceProcessingOptions\": {}, \n        \
          \        \"ProcessPayments\": false\n            }, \n            \"Amendments\"\
          : [\n                {\n                    \"ContractEffectiveDate\": \"\
          2016-10-20\", \n                    \"CurrentTerm\": 3, \n             \
          \       \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\"\
          : \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\"\
          , \n                    \"EffectiveDate\": \"2016-10-20\", \n          \
          \          \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\"\
          : {\n                        \"RatePlan\": {\n                         \
          \   \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n      \
          \                  }, \n                        \"RatePlanChargeData\":\
          \ [\n                            {\n                                \"RatePlanCharge\"\
          : {\n                                    \"ProductRatePlanChargeId\": \"\
          2c93808457d787030157e02e26701e9d\"\n                                }\n\
          \                            }\n                        ]\n            \
          \        }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\"\
          , \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\"\
          : \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\"\
          , \n                    \"Status\": \"Completed\", \n                  \
          \  \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n        \
          \            \"TermStartDate\": \"2016-10-20\", \n                    \"\
          TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n\
          \                }\n            ], \n            \"PreviewOptions\": {\n\
          \                \"EnablePreviewMode\": false\n            }\n        }\n\
          \    ]\n}' \"https://rest.zuora.com/v1/action/amend\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/amend');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"requests\"\
          : [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\"\
          : false, \n                \"InvoiceProcessingOptions\": {}, \n        \
          \        \"ProcessPayments\": false\n            }, \n            \"Amendments\"\
          : [\n                {\n                    \"ContractEffectiveDate\": \"\
          2016-10-20\", \n                    \"CurrentTerm\": 3, \n             \
          \       \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\"\
          : \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\"\
          , \n                    \"EffectiveDate\": \"2016-10-20\", \n          \
          \          \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\"\
          : {\n                        \"RatePlan\": {\n                         \
          \   \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n      \
          \                  }, \n                        \"RatePlanChargeData\":\
          \ [\n                            {\n                                \"RatePlanCharge\"\
          : {\n                                    \"ProductRatePlanChargeId\": \"\
          2c93808457d787030157e02e26701e9d\"\n                                }\n\
          \                            }\n                        ]\n            \
          \        }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\"\
          , \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\"\
          : \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\"\
          , \n                    \"Status\": \"Completed\", \n                  \
          \  \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n        \
          \            \"TermStartDate\": \"2016-10-20\", \n                    \"\
          TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n\
          \                }\n            ], \n            \"PreviewOptions\": {\n\
          \                \"EnablePreviewMode\": false\n            }\n        }\n\
          \    ]\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/amend")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/amend", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/amend")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/amend");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"requests\": [\n        {\n            \"AmendOptions\": {\n                \"GenerateInvoice\": false, \n                \"InvoiceProcessingOptions\": {}, \n                \"ProcessPayments\": false\n            }, \n            \"Amendments\": [\n                {\n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"CurrentTerm\": 3, \n                    \"CurrentTermPeriodType\": \"Day\", \n                    \"CustomerAcceptanceDate\": \"2016-10-20\", \n                    \"Description\": \"AM7j4i2rsxb9\", \n                    \"EffectiveDate\": \"2016-10-20\", \n                    \"Name\": \"AM7j4i2rsxb9\", \n                    \"RatePlanData\": {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e02e250e1e9a\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02e26701e9d\"\n                                }\n                            }\n                        ]\n                    }, \n                    \"RenewalSetting\": \"RENEW_TO_EVERGREEN\", \n                    \"RenewalTerm\": 2, \n                    \"RenewalTermPeriodType\": \"Day\", \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"Status\": \"Completed\", \n                    \"SubscriptionId\": \"2c93808457d787030157e02e23911e8d\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\", \n                    \"Type\": \"NewProduct\"\n                }\n            ], \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false\n            }\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/create:
    post:
      summary: Create
      operationId: Action_POSTcreate
      description: "Use the create call to create one or more objects of a specific\
        \ type. You can specify different types in different create calls, but each\
        \ create call must apply to only one type of object.\n\n## Limits\n\n### Objects\
        \ per Call\n\n50 objects are supported in a single call.\n\n### Rate Limiting\n\
        \nA maximum of 8,000 calls is supported per 10-minute time window per tenant.\n\
        \nIf you approach or exceed this limit, you will receive a 429 error. Multi-threading\
        \ causes you to approach this limit more quickly.\n\n## How to Use this Call\n\
        \nYou can call create on an array of one or more zObjects. It returns an array\
        \ of SaveResults, indicating the success or failure of creating each object.\
        \ The following information applies to this call:\n\n* You cannot pass in\
        \ null zObjects.\n* You can pass in a maximum of 50 zObjects at a time.\n\
        * All objects must be of the same type.\n\n### Using Create and Subscribe\
        \ Calls \nBoth the create and subscribe calls will create a new account. However,\
        \ there are differences between the calls.\n\nUse the create call to create\
        \ an account independent of a subscription.\n\nUse the subscribe call to create\
        \ the account with the subscription and the initial payment information.\n"
      tags:
      - Actions
      parameters:
      - name: createRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActioncreateRequest'
      responses:
        '200':
          examples:
            application/json:
            - Success: true
              Id: 2c93808457d787030157e0324aea5158
          description: ''
          schema:
            $ref: '#/definitions/ProxyActioncreateResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\"\
          : [\n        {\n            \"AccountingCode\": \"Accounts Receivable\"\
          , \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\"\
          : 1.2, \n            \"Comment\": \"this is comments\", \n            \"\
          InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\"\
          : \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\"\
          , \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n \
          \           \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"\
          Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n\
          }' \"https://rest.zuora.com/v1/action/create\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/create');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\"\
          : [\n        {\n            \"AccountingCode\": \"Accounts Receivable\"\
          , \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\"\
          : 1.2, \n            \"Comment\": \"this is comments\", \n            \"\
          InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\"\
          : \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\"\
          , \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n \
          \           \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"\
          Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n\
          }');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/create")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/create", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/create")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/create");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"objects\": [\n        {\n            \"AccountingCode\": \"Accounts Receivable\", \n            \"AdjustmentDate\": \"2016-10-20\", \n            \"Amount\": 1.2, \n            \"Comment\": \"this is comments\", \n            \"InvoiceId\": \"2c93808457d787030157e03248c75142\", \n            \"InvoiceNumber\": \"INV00000001\", \n            \"ReferenceId\": \"refid-1476935174845\", \n            \"SourceId\": \"2c93808457d787030157e03248c95144\", \n            \"SourceType\": \"InvoiceDetail\", \n            \"Type\": \"Credit\"\n        }\n    ], \n    \"type\": \"InvoiceItemAdjustment\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/delete:
    post:
      summary: Delete
      operationId: Action_POSTdelete
      description: |
        Deletes one or more objects of the same type. You can specify different types in different delete calls, but each delete call must apply only to one type of object.

        The following information applies to this call:

        * You will need to first determine the IDs for the objects you wish to delete.
        * You cannot pass in any null IDs.
        * All objects in a specific delete call must be of the same type.


        ### Objects per Call
        50 objects are supported in a single call.

        ### Rate Limiting
        1,000 calls are supported per 10-minute time window per tenant.

        If you approach or exceed this limit, you will receive a 429 error. Multi-threading causes you to approach this limit more quickly.
      tags:
      - Actions
      parameters:
      - name: deleteRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActiondeleteRequest'
      responses:
        '200':
          examples:
            application/json:
            - id: 2c93808457d787030157e031fcd34e19
              success: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyActiondeleteResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ids\"\
          : [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\"\
          : \"ProductRatePlanCharge\"\n}' \"https://rest.zuora.com/v1/action/delete\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/delete');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ids\"\
          : [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\"\
          : \"ProductRatePlanCharge\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/delete")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/delete", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/delete")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/delete");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"ids\": [\n        \"2c93808457d787030157e031fcd34e19\"\n    ], \n    \"type\": \"ProductRatePlanCharge\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/execute:
    post:
      summary: Execute
      operationId: Action_POSTexecute
      description: "Use the execute call to execute a process to split an invoice\
        \ into multiple invoices. The original invoice must be in draft status. The\
        \ resulting invoices are called split invoices.\n\n**Note:** This feature\
        \ is in **Limited Availability**. If you wish to have access to the feature,\
        \ submit a request at [Zuora Global Support](http://support.zuora.com). \n\
        \nTo split a draft invoice into multiple split invoices:\n\n1. Use the create\
        \ call to create a separate InvoiceSplitItem object for each split invoice\
        \ that you want to create from the original draft invoice.\n2. Use the create\
        \ call to create a single InvoiceSplit object to collect all of the InvoiceSplitItem\
        \ objects.\n3. Use the execute call to split the draft invoice into multiple\
        \ split invoices.\n\nYou need to create InvoiceSplitItem objects and an InvoiceSplit\
        \ object before you can use the execute call. \n\n* Supported objects: InvoiceSplit\n\
        * Asynchronous process: yes\n"
      tags:
      - Actions
      parameters:
      - name: executeRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionexecuteRequest'
      responses:
        '200':
          examples:
            application/json:
            - Success: true
              Id: 2c93808457d787030157e031d5844c53
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionexecuteResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ids\"\
          : [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\"\
          : false, \n    \"type\": \"InvoiceSplit\"\n}' \"https://rest.zuora.com/v1/action/execute\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/execute');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ids\"\
          : [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\"\
          : false, \n    \"type\": \"InvoiceSplit\"\n}');\n\ntry {\n  $response =\
          \ $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/execute")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/execute", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/execute")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/execute");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"ids\": [\n        \"2c93808457d787030157e031d5844c53\"\n    ], \n    \"synchronous\": false, \n    \"type\": \"InvoiceSplit\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/generate:
    post:
      summary: Generate
      operationId: Action_POSTgenerate
      description: |
        Generates an on-demand invoice for a specific customer. This is similar to creating an ad-hoc bill run for a specific customer account in the Zuora UI.

        * Supported objects: Invoice
        * Asynchronous process: yes

        The id of the generated invoice is returned in the response. If multiple invoices are generated, only the id of the first invoice generated is returned. This occurs when an account has multiple subscriptions with the [invoice subscription separately](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/B_Creating_Subscriptions/Invoicing_Subscriptions_Separately) option enabled.

        ## Limits
        Rate limit: 8000 calls per 10-minute block, per-tenant

        If you approach or exceed the limits, then you receive a 429 error.
      tags:
      - Actions
      parameters:
      - name: generateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActiongenerateRequest'
      responses:
        '200':
          examples:
            application/json:
            - Success: true
              Id: 2c93808457d787030157e0306cd13a86
          description: ''
          schema:
            $ref: '#/definitions/ProxyActiongenerateResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\"\
          : [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\"\
          , \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\"\
          : \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}' \"https://rest.zuora.com/v1/action/generate\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/generate');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\"\
          : [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\"\
          , \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\"\
          : \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}');\n\n\
          try {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/generate")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/generate", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/generate")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/generate");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"objects\": [\n        {\n            \"AccountId\": \"2c93808457d787030157e0306be53a75\", \n            \"InvoiceDate\": \"2016-10-20\", \n            \"TargetDate\": \"2016-10-20\"\n        }\n    ], \n    \"type\": \"Invoice\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/query:
    post:
      summary: Query
      operationId: Action_POSTquery
      description: "The query call sends a query expression by specifying the object\
        \ to query, the fields to retrieve from that object, and any filters to determine\
        \ whether a given object should be queried.\n\n\nYou can use ZOQL (Zuora Object\
        \ Query Language) to construct those queries, passing them through the `queryString`.\n\
        \n\nOnce the call is made, the API executes the query against the specified\
        \ object and returns a query response object to your application. Your application\
        \ can then iterate through rows in the query response to retrieve information.\n\
        \n## Limitations \n\nThis call has the following limitations:\n\n* All ZOQL\
        \ keywords must be in lower case.\n* The number of records returned is limited\
        \ to 2000 records\n"
      tags:
      - Actions
      parameters:
      - name: queryRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionqueryRequest'
      responses:
        '200':
          examples:
            application/json:
              records:
              - AdjustmentNumber: IIA-00000001
                ServiceEndDate: '2016-10-20'
                Id: 2c93808457d787030157e0324aea5158
                AccountingCode: Accounts Receivable
                UpdatedDate: '2016-10-20T05:46:14.000+02:00'
                AccountId: 2c93808457d787030157e032485b5131
                Comment: this is comments
                InvoiceNumber: INV00000001
                InvoiceId: 2c93808457d787030157e03248c75142
                ServiceStartDate: '2016-10-20'
                CreatedById: 2c93808457d787030157e032283c4fb2
                CreatedDate: '2016-10-20T05:46:14.000+02:00'
                InvoiceItemName: OneTime_Flat Fee Pricing1476935174089
                UpdatedById: 2c93808457d787030157e032283c4fb2
                Amount: 1.2
                AdjustmentDate: '2016-10-20'
                SourceId: 2c93808457d787030157e03248c95144
                SourceType: InvoiceDetail
                Status: Processed
                Type: Credit
                ReferenceId: refid-1476935174845
                ReasonCode: Standard Adjustment
              size: 1
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionqueryResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: |-
          curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey: dummyPassword" -H "Content-Type: application/json" -d '{
              "queryString": "select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'"
          }' "https://rest.zuora.com/v1/action/query"
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/action/query');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{
              "queryString": "select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'"
          }');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/query")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/query", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/query")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/query");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"queryString\": \"select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber, Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId, InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate, SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById, UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/queryMore:
    post:
      summary: QueryMore
      operationId: Action_POSTqueryMore
      description: |
        Use queryMore to request additional results from a previous query call. If your initial query call returns more than 2000 results, you can use queryMore to query for the additional results.


        Any `queryLocator` results greater than 2,000, will only be stored by Zuora for 5 days before it is deleted.


         This call sends a request for additional results from an initial query call. If the initial query call returns more than 2000 results, you can use the `queryLocator` returned from query to request the next set of results.


        **Note:** Zuora expires queryMore cursors after 15 minutes of activity.


        To use queryMore, you first construct a query call. By default, the query call will return up to 2000 results. If there are more than 2000 results, query will return a boolean `done`, which will be marked as `false`, and a `queryLocator`, which is a marker you will pass to queryMore to get the next set of results.
      tags:
      - Actions
      parameters:
      - name: queryMoreRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionqueryMoreRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionqueryMoreResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/action/queryMore"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/action/queryMore');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/queryMore")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/queryMore", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/queryMore")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/queryMore");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/subscribe:
    post:
      summary: Subscribe
      operationId: Action_POSTsubscribe
      description: "\nThis call performs many actions.  Use the subscribe call to\
        \ bundle information required to create at least one new subscription. \n\n\
        The call takes in an array of SubscribeRequests. Because it takes an array,\
        \ you can submit a batch of subscription requests at once. You can create\
        \ up to 50 different subscriptions in a single subscribe call.\n\nThis is\
        \ a combined call that you can use to perform all of the following tasks in\
        \ a single call:\n\n* Create accounts\n* Create contacts\n* Create payment\
        \ methods, including external payment options\n* Create an invoice for the\
        \ subscription\n* Apply the first payment to a subscription\n\n## Object Limits\
        \ \n50 objects are supported in a single call.\n\n## System Rate Limits \n\
        A maximum of 3,000 calls is supported per 10-minute time window per tenant.\n\
        \nIf you approach or exceed this limit, you will receive a 429 error. Multi-threading\
        \ causes you to approach this limit more quickly.\n\n## Effective Date\nIf\
        \ the effective date is in the future, the invoices will not be generated,\
        \ and there will be no invoice number.\n\n## Subscription Name, Number, and\
        \ ID \n### Subscription Name and Number \nThe subscription name is a unique\
        \ identifier for the subscription. If you do not specify a value for the name,\
        \ Zuora will create one automatically. The automatically generated value is\
        \ known as the subscription number, such as `A-S00000080`. You cannot change\
        \ the subscription name or number after creating the subscription. \n\n* **Subscription\
        \ name**: The name that you set for the subscription.\n* **Subscription number**:\
        \ The value generated by Zuora automatically if you do not specify a subscription\
        \ name. \n\nBoth the subscription name and number must be unique. If they\
        \ are not, an error will occur.\n\n### Subscription ID \nThe subscription\
        \ ID is a 32-digit ID in the format 4028xxxx. This is also the unique identifier\
        \ for a subscription. This value is automatically generated by the system\
        \ and cannot be edited or updated, but it can be queried. One subscription\
        \ can have only one subscription name or number, but it can have multiple\
        \ IDs: Each version of a subscription has a different ID.\n\nThe Subscription\
        \ object contains the fields `OriginalId` and `PreviousSubscriptionId`. `OriginalId`\
        \ is the ID for the first version of a subscription. `PreviousSubscriptionId`\
        \ is the ID of the version created immediately prior to the current version.\n\
        \n## Subscription Preview \nYou can preview invoices that would be generated\
        \ by the subscribe call. \n\n## Invoice Subscriptions Separately\nIf you have\
        \ enabled the invoice subscriptions separately feature, a subscribe call will\
        \ generate an invoice for each subscription for every subscription where the\
        \ field `IsInvoiceSeparate` is set to `true`.\n\nIf the invoice subscriptions\
        \ separately feature is disabled, a subscribe call will generate a single\
        \ invoice for all subscriptions.\n\nSee [Invoicing Subscriptions Separately](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/B_Creating_Subscriptions/Invoicing_Subscriptions_Separately)\
        \ for more information.\n\n## Subscriptions and Draft Invoices \nIf a draft\
        \ invoice that includes charges exists in a customer account, using the subscribe\
        \ call to create a new subscription and generate an invoice will cause the\
        \ new subscription to be added to the existing draft invoice. Zuora will then\
        \ post the invoice. \n\n## When to Use Subscribe and Create Calls \nYou can\
        \ use either the subscribe call or the create call to create the objects associated\
        \ with a subscription (accounts, contacts, and so on). There are differences\
        \ between these calls, however, and some situations are better for one or\
        \ the other.\n\n### Use the Subscribe Call \nThe subscribe call bundles up\
        \ all the information you need for a subscription. Use the subscribe call\
        \ to create new subscriptions when you have all the information you need.\n\
        \nSubscribe calls cannot update BillTo, SoldTo, and Payment information objects\
        \ cannot be updated if there is an existing account ID in the call. These\
        \ objects are not supported in a subscribe call.\n\n### Use the Create Call\
        \ \nThe create call is more useful when you want to develop in stages. For\
        \ example, if you want to first create an account, then a contact, and so\
        \ on. If you do not have all information available, use the create call. To\
        \ create a subscription, you must activate the account from Draft status to\
        \ Active by calling the subscribe call.\n"
      tags:
      - Actions
      parameters:
      - name: subscribeRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionsubscribeRequest'
      responses:
        '200':
          examples:
            application/json:
            - AccountNumber: AN_1476935174239
              SubscriptionNumber: S_1476935174239
              InvoiceResult:
                Invoice:
                - InvoiceNumber: INV00000001
                  Id: 2c93808457d787030157e03248c75142
              TotalTcv: 100.3
              SubscriptionId: 2c93808457d787030157e03248715134
              TotalMrr: 0
              AccountId: 2c93808457d787030157e032485b5131
              Success: true
              InvoiceNumber: INV00000001
              InvoiceId: 2c93808457d787030157e03248c75142
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionsubscribeResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"subscribes\"\
          : [\n        {\n            \"Account\": {\n                \"AccountNumber\"\
          : \"AN_1476935174239\", \n                \"AutoPay\": false, \n       \
          \         \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1,\
          \ \n                \"Currency\": \"USD\", \n                \"Name\": \"\
          AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\"\
          , \n                \"Status\": \"Draft\"\n            }, \n           \
          \ \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\"\
          , \n                \"City\": \"Seattle\", \n                \"Country\"\
          : \"United States\", \n                \"FirstName\": \"FN1476935174239\"\
          , \n                \"LastName\": \"LN1476935174239\", \n              \
          \  \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\"\
          : \"98119\", \n                \"State\": \"Washington\", \n           \
          \     \"WorkEmail\": \"work@test.com\"\n            }, \n            \"\
          PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave\
          \ W\", \n                \"CreditCardCity\": \"Seattle\", \n           \
          \     \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\"\
          : 12, \n                \"CreditCardExpirationYear\": 2020, \n         \
          \       \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\"\
          : \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\"\
          , \n                \"CreditCardState\": \"Washington\", \n            \
          \    \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\
          \n            }, \n            \"PreviewOptions\": {\n                \"\
          EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n \
          \           }, \n            \"SubscribeOptions\": {\n                \"\
          GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n\
          \                \"SubscribeInvoiceProcessingOptions\": {}\n           \
          \ }, \n            \"SubscriptionData\": {\n                \"RatePlanData\"\
          : [\n                    {\n                        \"RatePlan\": {\n  \
          \                          \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\
          \n                        }, \n                        \"RatePlanChargeData\"\
          : [\n                            {\n                                \"RatePlanCharge\"\
          : {\n                                    \"ProductRatePlanChargeId\": \"\
          2c93808457d787030157e03247c2512d\"\n                                }\n\
          \                            }\n                        ]\n            \
          \        }\n                ], \n                \"Subscription\": {\n \
          \                   \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\"\
          : \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\"\
          , \n                    \"InitialTerm\": 12, \n                    \"Name\"\
          : \"S_1476935174239\", \n                    \"Notes\": \"this is notes\"\
          , \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\"\
          : \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\"\
          , \n                    \"TermType\": \"TERMED\"\n                }\n  \
          \          }\n        }\n    ]\n}' \"https://rest.zuora.com/v1/action/subscribe\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/subscribe');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"subscribes\"\
          : [\n        {\n            \"Account\": {\n                \"AccountNumber\"\
          : \"AN_1476935174239\", \n                \"AutoPay\": false, \n       \
          \         \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1,\
          \ \n                \"Currency\": \"USD\", \n                \"Name\": \"\
          AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\"\
          , \n                \"Status\": \"Draft\"\n            }, \n           \
          \ \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\"\
          , \n                \"City\": \"Seattle\", \n                \"Country\"\
          : \"United States\", \n                \"FirstName\": \"FN1476935174239\"\
          , \n                \"LastName\": \"LN1476935174239\", \n              \
          \  \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\"\
          : \"98119\", \n                \"State\": \"Washington\", \n           \
          \     \"WorkEmail\": \"work@test.com\"\n            }, \n            \"\
          PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave\
          \ W\", \n                \"CreditCardCity\": \"Seattle\", \n           \
          \     \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\"\
          : 12, \n                \"CreditCardExpirationYear\": 2020, \n         \
          \       \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\"\
          : \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\"\
          , \n                \"CreditCardState\": \"Washington\", \n            \
          \    \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\
          \n            }, \n            \"PreviewOptions\": {\n                \"\
          EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n \
          \           }, \n            \"SubscribeOptions\": {\n                \"\
          GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n\
          \                \"SubscribeInvoiceProcessingOptions\": {}\n           \
          \ }, \n            \"SubscriptionData\": {\n                \"RatePlanData\"\
          : [\n                    {\n                        \"RatePlan\": {\n  \
          \                          \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\
          \n                        }, \n                        \"RatePlanChargeData\"\
          : [\n                            {\n                                \"RatePlanCharge\"\
          : {\n                                    \"ProductRatePlanChargeId\": \"\
          2c93808457d787030157e03247c2512d\"\n                                }\n\
          \                            }\n                        ]\n            \
          \        }\n                ], \n                \"Subscription\": {\n \
          \                   \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\"\
          : \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\"\
          , \n                    \"InitialTerm\": 12, \n                    \"Name\"\
          : \"S_1476935174239\", \n                    \"Notes\": \"this is notes\"\
          , \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\"\
          : \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\"\
          , \n                    \"TermType\": \"TERMED\"\n                }\n  \
          \          }\n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/subscribe")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/subscribe", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/subscribe")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/subscribe");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"subscribes\": [\n        {\n            \"Account\": {\n                \"AccountNumber\": \"AN_1476935174239\", \n                \"AutoPay\": false, \n                \"Batch\": \"Batch1\", \n                \"BillCycleDay\": 1, \n                \"Currency\": \"USD\", \n                \"Name\": \"AC_1476935174239\", \n                \"PaymentTerm\": \"Due Upon Receipt\", \n                \"Status\": \"Draft\"\n            }, \n            \"BillToContact\": {\n                \"Address1\": \"312 2nd Ave W\", \n                \"City\": \"Seattle\", \n                \"Country\": \"United States\", \n                \"FirstName\": \"FN1476935174239\", \n                \"LastName\": \"LN1476935174239\", \n                \"PersonalEmail\": \"person@test.com\", \n                \"PostalCode\": \"98119\", \n                \"State\": \"Washington\", \n                \"WorkEmail\": \"work@test.com\"\n            }, \n            \"PaymentMethod\": {\n                \"CreditCardAddress1\": \"312 2nd Ave W\", \n                \"CreditCardCity\": \"Seattle\", \n                \"CreditCardCountry\": \"United States\", \n                \"CreditCardExpirationMonth\": 12, \n                \"CreditCardExpirationYear\": 2020, \n                \"CreditCardHolderName\": \"Somebody\", \n                \"CreditCardNumber\": \"4111111111111111\", \n                \"CreditCardPostalCode\": \"98119\", \n                \"CreditCardState\": \"Washington\", \n                \"CreditCardType\": \"Visa\", \n                \"Type\": \"CreditCard\"\n            }, \n            \"PreviewOptions\": {\n                \"EnablePreviewMode\": false, \n                \"NumberOfPeriods\": 3\n            }, \n            \"SubscribeOptions\": {\n                \"GenerateInvoice\": true, \n                \"ProcessPayments\": false, \n                \"SubscribeInvoiceProcessingOptions\": {}\n            }, \n            \"SubscriptionData\": {\n                \"RatePlanData\": [\n                    {\n                        \"RatePlan\": {\n                            \"ProductRatePlanId\": \"2c93808457d787030157e0324735512b\"\n                        }, \n                        \"RatePlanChargeData\": [\n                            {\n                                \"RatePlanCharge\": {\n                                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e03247c2512d\"\n                                }\n                            }\n                        ]\n                    }\n                ], \n                \"Subscription\": {\n                    \"AutoRenew\": false, \n                    \"ContractAcceptanceDate\": \"2016-10-20\", \n                    \"ContractEffectiveDate\": \"2016-10-20\", \n                    \"InitialTerm\": 12, \n                    \"Name\": \"S_1476935174239\", \n                    \"Notes\": \"this is notes\", \n                    \"RenewalTerm\": 12, \n                    \"ServiceActivationDate\": \"2016-10-20\", \n                    \"TermStartDate\": \"2016-10-20\", \n                    \"TermType\": \"TERMED\"\n                }\n            }\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /action/update:
    post:
      summary: Update
      operationId: Action_POSTupdate
      description: "\nUpdates the information in one or more objects of the same type.\
        \ You can specify different types of objects in different update calls, but\
        \ each specific update call must apply to only one type of object.\n\nYou\
        \ can update an array of one or more zObjects. It returns an array of SaveResults,\
        \ indicating the success or failure of updating each object. The following\
        \ information applies to this call:\n\n* You cannot pass in null zObjects.\n\
        * You can pass in a maximum of 50 zObjects at a time.\n* All objects must\
        \ be of the same type.\n* For each field in each object, you must determine\
        \ that object's ID. Then populate the fields that you want update with the\
        \ new information.\n* Zuora ignores unrecognized fields in update calls. For\
        \ example, if an optional field is spelled incorrectly or a field that does\
        \ not exist is specified, Zuora ignores the field and continues to process\
        \ the call. No error message is returned for unrecognized fields.\n\n## Object\
        \ Limits \n50 objects are supported in a single call.\n\n## System Rate Limits\
        \  \nA maximum of 5,000 calls is supported per 10-minute time window per tenant.\n\
        \nIf you approach or exceed this limit, you will receive a 429 error. Multi-threading\
        \ causes you to approach this limit more quickly.\n"
      tags:
      - Actions
      parameters:
      - name: updateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyActionupdateRequest'
      responses:
        '200':
          examples:
            application/json:
            - Success: true
              Id: 2c93808457d787030157e0321fdf4fab
          description: ''
          schema:
            $ref: '#/definitions/ProxyActionupdateResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"objects\"\
          : [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n\
          \            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n\
          \            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\"\
          , \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\"\
          , \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\"\
          , \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n       \
          \     \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n  \
          \          \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this\
          \ is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n  \
          \          \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n      \
          \      \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\
          \n}' \"https://rest.zuora.com/v1/action/update\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/action/update');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"objects\"\
          : [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n\
          \            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n\
          \            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\"\
          , \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\"\
          , \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\"\
          , \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n       \
          \     \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n  \
          \          \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this\
          \ is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n  \
          \          \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n      \
          \      \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/action/update")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/action/update", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/action/update")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/action/update");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"objects\": [\n        {\n            \"AccountNumber\": \"AN_1476935163869\", \n            \"AutoPay\": true, \n            \"Batch\": \"Batch1\", \n            \"BillCycleDay\": 1, \n            \"BillToId\": \"2c93808457d787030157e03220684fac\", \n            \"CrmId\": \"crmid\", \n            \"Currency\": \"USD\", \n            \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n            \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n            \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n            \"Name\": \"AC_1476935163869\", \n            \"Notes\": \"this is notes\", \n            \"PaymentTerm\": \"Due Upon Receipt\", \n            \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n            \"Status\": \"Active\"\n        }\n    ], \n    \"type\": \"Account\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /amendments/{amendment-key}:
    get:
      summary: Get amendments by key
      operationId: GET_AmendmentsByKey
      description: Retrieves detailed information about the specified subscription
        amendment.
      tags:
      - Amendments
      parameters:
      - name: amendment-key
        in: path
        description: Can be the amendment ID or the amendment code.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 402896a9529c100a01529c30e26a0018
              code: A-AM00000002
              name: testAmendment
              type: TermsAndConditions
              description: just for test
              status: Completed
              contractEffectiveDate: '2016-02-01'
              serviceActivationDate: '2016-02-01'
              customerAcceptanceDate: '2016-02-01'
              effectiveDate: '2016-02-01'
              newSubscriptionId: 402896a9529c100a01529c311930001d
              baseSubscriptionId: 402896a9529c100a01529c2f2cc30010
              termType: TERMED
              currentTerm: 2
              currentTermPeriodType: Month
              termStartDate: '2015-12-31'
              renewalSetting: RENEW_WITH_SPECIFIC_TERM
              renewalTerm: 1
              renewalTermPeriodType: Month
              autoRenew: false
              specificUpdateDate: null
              newRatePlanId: null
              baseRatePlanId: null
              destinationAccountId: 402896a9529bc3dc01529bcba7120023
              destinationInvoiceOwnerId: 402896a9529bc3dc01529bcba7120023
          description: ''
          schema:
            $ref: '#/definitions/GETAmendmentType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/amendments/{amendment-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/amendments/{amendment-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/amendments/{amendment-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/amendments/{amendment-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/amendments/{amendment-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/amendments/{amendment-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /amendments/subscriptions/{subscription-id}:
    get:
      summary: Get amendments by subscription ID
      operationId: GET_AmendmentsBySubscriptionID
      description: Retrieves detailed information about the amendment with the specified
        subscription.
      tags:
      - Amendments
      parameters:
      - name: subscription-id
        in: path
        description: The ID of the subscription whose amendment changes you want to
          retrieve.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 402896a9529c100a01529c30e26a0018
              code: A-AM00000002
              name: testAmendment
              type: TermsAndConditions
              description: just for test
              status: Completed
              contractEffectiveDate: '2016-02-01'
              serviceActivationDate: '2016-02-01'
              customerAcceptanceDate: '2016-02-01'
              effectiveDate: '2016-02-01'
              newSubscriptionId: 402896a9529c100a01529c311930001d
              baseSubscriptionId: 402896a9529c100a01529c2f2cc30010
              termType: TERMED
              currentTerm: 2
              currentTermPeriodType: Month
              termStartDate: '2015-12-31'
              renewalSetting: RENEW_WITH_SPECIFIC_TERM
              renewalTerm: 1
              renewalTermPeriodType: Month
              autoRenew: false
              specificUpdateDate: null
              newRatePlanId: null
              baseRatePlanId: null
              destinationAccountId: 402896a9529bc3dc01529bcba7120023
              destinationInvoiceOwnerId: 402896a9529bc3dc01529bcba7120023
          description: ''
          schema:
            $ref: '#/definitions/GETAmendmentType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/amendments/subscriptions/{subscription-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/amendments/subscriptions/{subscription-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/amendments/subscriptions/{subscription-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/amendments/subscriptions/{subscription-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/amendments/subscriptions/{subscription-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/amendments/subscriptions/{subscription-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /attachments:
    post:
      summary: Add attachments
      operationId: POST_Attachments
      description: Use the Add Attachment REST request with a multipart/form-data
        to attach a document file to an Account, a Subscription, or an Invoice.
      tags:
      - Attachments
      parameters:
      - name: description
        in: query
        description: 'Description of the attachment document.

          '
        required: false
        type: string
      - name: associatedObjectType
        in: query
        description: 'Specify one of the following values: Account, Subscription,
          or Invoice.

          '
        required: true
        type: string
      - name: associatedObjectKey
        in: query
        description: |
          For the Subscription type, specify the Subscription Number. An attachment is tied tied to the Subscription Number and thus viewable with every subscription version.

          For Account and Invoice, specify the id.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTAttachmentType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 402880ea536ff494015372a7ea17001f
              fileId: 402880ea536ff494015372a7ea12001e
          description: ''
          schema:
            $ref: '#/definitions/POSTAttachmentResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''"curl\n--form \"file=@PODocument.pdf\"
          \\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714"''
          "https://rest.zuora.com/v1/attachments"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/attachments');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('"curl\n--form \"file=@PODocument.pdf\" \\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714"');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\"");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/attachments")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\""

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/attachments", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/attachments")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\""

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/attachments");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "\"curl\\n--form \\\"file=@PODocument.pdf\\\" \\\\\\n-X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714\"", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /attachments/{object-type}/{object-key}:
    get:
      summary: View attachments list
      operationId: GET_AttachmentsList
      description: Use the View Attachment REST request to get a list of attachments
        on an account, an invoice, or a subscription.
      tags:
      - Attachments
      parameters:
      - name: object-type
        in: path
        description: |2

          Specify one of the following:
          * Account

          * Subscription

          * Invoice
        required: true
        type: string
      - name: object-key
        in: path
        description: Id of the attachment. This id is included in the response from
          the Add Attachment request.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              attachments:
              - id: 402896b95397c169015397c2ebca0003
                fileName: Search _ Splunk.pdf
                description: null
                fileId: 402896b95397c169015397c2ebc50002
                fileContentType: application/pdf
                createdOn: '2016-03-21 14:00:47'
                createdBy: 402881e522cf4f9b0122cf5d82860002
                updatedOn: '2016-03-21 14:00:47'
                updatedBy: 402881e522cf4f9b0122cf5d82860002
                success: true
              - id: 8a8083e1545b706a01547316d93f4401
                fileName: AttachTest.txt
                description: ''
                fileId: 8a8083e1545b706a01547316d9094400
                fileContentType: text/plain
                createdOn: '2016-05-02 13:09:17'
                createdBy: 4028e487327fd45a0132829ebb673ff9
                updatedOn: '2016-05-02 13:09:17'
                updatedBy: 4028e487327fd45a0132829ebb673ff9
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAttachmentsResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/attachments/{object-type}/{object-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/attachments/{object-type}/{object-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/attachments/{object-type}/{object-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/attachments/{object-type}/{object-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/attachments/{object-type}/{object-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/attachments/{object-type}/{object-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /attachments/{attachment-id}:
    get:
      summary: View attachments
      operationId: GET_Attachments
      description: Use the View Attachment REST request to retrieve information about
        an attachment document.
      tags:
      - Attachments
      parameters:
      - name: attachment-id
        in: path
        description: Id of the attachment you want to view.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              id: 8a8083e1545b706a01547316d93f4401
              fileName: AttachTest.txt
              description: ''
              fileId: 8a8083e1545b706a01547316d9094400
              fileContentType: text/plain
              createdOn: '2016-05-02 13:09:17'
              createdBy: 4028e487327fd45a0132829ebb673ff9
              updatedOn: '2016-05-02 13:09:17'
              updatedBy: 4028e487327fd45a0132829ebb673ff9
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETAttachmentResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/attachments/{attachment-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/attachments/{attachment-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/attachments/{attachment-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/attachments/{attachment-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/attachments/{attachment-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/attachments/{attachment-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Edit attachments
      operationId: PUT_Attachments
      description: Use the Edit Attachment REST request to make changes to the descriptive
        fields of an attachment, such as the description and the file name. You cannot
        change the actual content of the attached file in Zuora. If you need to change
        the actual content, you need to delete the attachment and add the updated
        file as a new attachment.
      tags:
      - Attachments
      parameters:
      - name: attachment-id
        in: path
        required: true
        type: string
        description: Id of the attachment to be updated.
      - name: Request
        in: body
        description: ''
        required: false
        schema:
          $ref: '#/definitions/PUTAttachmentType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''"curl\n-H \"filename\":\"Image123.png\"
          \\\n-H \"description\":\"Updated Image\" \\\n-H \"Accept:application:json\"
          \\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f"''
          "https://rest.zuora.com/v1/attachments/{attachment-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/attachments/{attachment-id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('"curl\n-H \"filename\":\"Image123.png\" \\\n-H \"description\":\"Updated Image\" \\\n-H \"Accept:application:json\" \\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f"');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f\"");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/attachments/{attachment-id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f\""

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/attachments/{attachment-id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/attachments/{attachment-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f\""

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/attachments/{attachment-id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "\"curl\\n-H \\\"filename\\\":\\\"Image123.png\\\" \\\\\\n-H \\\"description\\\":\\\"Updated Image\\\" \\\\\\n-H \\\"Accept:application:json\\\" \\\\\\n-X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f\"", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: Delete attachments
      operationId: DELETE_Attachments
      description: Use the Delete Attachment REST request to delete an attachment
        from a Zuora object.
      tags:
      - Attachments
      parameters:
      - name: attachment-id
        in: path
        required: true
        type: string
        description: Id of the attachment to be deleted.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/attachments/{attachment-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/attachments/{attachment-id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/attachments/{attachment-id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/attachments/{attachment-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/attachments/{attachment-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/attachments/{attachment-id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /catalog/products:
    get:
      summary: Get product catalog
      operationId: GET_Catalog
      description: "This REST API reference describes how to retrieve the entire product\
        \ catalog, including all products, features, and their corresponding rate\
        \ plans, charges. Products are returned in reverse chronological order on\
        \ the UpdatedDate field. \n\nWith rate plans and rate plan charges, the REST\
        \ API has a maximum array size. \n"
      tags:
      - Catalog
      responses:
        '200':
          examples:
            application/json:
              products:
              - id: 2c92c0f94f7243eb014f726032281e9a
                sku: SKU-00000608
                name: TeamCollab
                description: Team Collaboration
                category: Base Products
                effectiveStartDate: '2015-01-01'
                effectiveEndDate: '2021-01-01'
                productRatePlans:
                - id: 2c92c0f94f7243e6014f7260f69923aa
                  status: Active
                  name: TeamCollab Basic
                  description: ''
                  effectiveStartDate: '2015-08-28'
                  effectiveEndDate: '2017-08-30'
                  productRatePlanCharges:
                  - id: 2c92c0f94f7243e6014f7261f2ac24eb
                    name: Annual Basic
                    type: Recurring
                    model: FlatFee
                    uom: Each
                    pricingSummary:
                    - USD1200/Each
                    pricing:
                    - currency: USD
                      price: 234.0
                      tiers: null
                      includedUnits: null
                      overagePrice: null
                      discountPercentage: null
                      discountAmount: null
                    defaultQuantity: 233.0
                    applyDiscountTo: null
                    discountLevel: null
                    endDateCondition: Fixed_Period
                    upToPeriods: 1
                    upToPeriodsType: Years
                    billingDay: DefaultFromCustomer
                    listPriceBase: Per_Billing_Period
                    billingTiming: IN_ADVANCE
                    billingPeriod: Annual
                    billingPeriodAlignment: AlignToCharge
                    specificBillingPeriod: null
                    smoothingModel: null
                    numberOfPeriods: null
                    overageCalculationOption: null
                    overageUnusedUnitsCreditOption: null
                    usageRecordRatingOption: null
                    priceChangeOption: null
                    priceIncreasePercentage: null
                    useTenantDefaultForPriceChange: true
                    taxable: false
                    taxCode: ''
                    taxMode: TaxExclusive
                    triggerEvent: ContractEffective
                    description: ''
                    revenueRecognitionRuleName: Recognize upon invoicing
                    useDiscountSpecificAccountingCode: null
                    includedUnits: null
                    maxQuantity: null
                    minQuantity: null
                    prepayPeriods: null
                    financeInformation:
                      recognizedRevenueAccountingCode: Subscription Revenue
                      recognizedRevenueAccountingCodeType: SalesRevenue
                      deferredRevenueAccountingCode: Subscription Revenue
                      deferredRevenueAccountingCodeType: SalesRevenue
          description: ''
          schema:
            $ref: '#/definitions/GETCatalogType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/catalog/products"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/catalog/products');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/catalog/products")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/catalog/products", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/catalog/products")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/catalog/products");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /charge-revenue-summaries/{crs-number}:
    get:
      summary: Get charge summary details by CRS number
      operationId: GET_CRSByCRSNumber
      description: 'This REST API reference describes how to retrieve the details
        of a charge revenue summary by specifying the charge revenue summary number.
        The response includes all revenue items associated with the charge revenue
        summary.

        '
      tags:
      - Charge Revenue Summaries
      parameters:
      - name: crs-number
        in: path
        description: 'The charge revenue summary number.

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: CRS-00000001
              recognitionRuleName: Recognize upon invoicing
              amount: 660
              undistributedUnrecognizedRevenue: 565
              recognizedRevenue: 0
              unrecognizedRevenue: 660
              currency: USD
              notes: null
              accountId: 2c92c0f8439770960143b2141f5a555e
              subscriptionId: 2c92c0f943977b4f0143b23487999327
              subscriptionChargeId: 2c92c0f943977b4f0143b11187ed432e
              revenueItems:
              - accountingPeriodName: Sep'2013
                isAccountingPeriodClosed: false
                amount: 35
                currency: USD
                accountingPeriodStartDate: '2013-09-01'
                accountingPeriodEndDate: '2013-09-30'
              - accountingPeriodName: Oct'2013
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: 150
                currency: USD
                accountingPeriodStartDate: '2013-12-11'
                accountingPeriodEndDate: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETChargeRSDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/charge-revenue-summaries/{crs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/charge-revenue-summaries/{crs-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/charge-revenue-summaries/{crs-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/charge-revenue-summaries/{crs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/charge-revenue-summaries/{crs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/charge-revenue-summaries/{crs-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /charge-revenue-summaries/subscription-charges/{charge-key}:
    get:
      summary: Get charge summary details by charge ID
      operationId: GET_CRSByChargeID
      description: 'This REST API reference describes how to retrieve the details
        of a charge revenue summary by specifying the subscription charge ID. This
        response retrieves all revenue items associated with a charge revenue summary.

        '
      tags:
      - Charge Revenue Summaries
      parameters:
      - name: charge-key
        in: path
        description: 'ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: CRS-00000001
              recognitionRuleName: Recognize daily over time
              amount: 428
              undistributedUnrecognizedRevenue: 0
              recognizedRevenue: 0
              unrecognizedRevenue: 428
              currency: USD
              notes: null
              accountId: 2c92c0f9410f55ee014110a008f6791f
              subscriptionId: 2c92c0f9410f55dd014110a14aa47f09
              subscriptionChargeId: 2c92c0f9410f55dd014110b22cbc023f
              revenueItems:
              - accountingPeriodName: May 2012
                isAccountingPeriodClosed: false
                amount: 100
                currency: USD
                accountingPeriodStartDate: '2012-05-01'
                accountingPeriodEndDate: '2012-05-31'
              - accountingPeriodName: Jun 2012
                isAccountingPeriodClosed: false
                amount: 92
                currency: USD
                accountingPeriodStartDate: '2012-06-01'
                accountingPeriodEndDate: '2012-06-30'
              - accountingPeriodName: Jul 2012
                isAccountingPeriodClosed: false
                amount: 0
                currency: USD
                accountingPeriodStartDate: '2012-07-01'
                accountingPeriodEndDate: '2012-07-31'
              - accountingPeriodName: Aug 2012
                isAccountingPeriodClosed: false
                amount: 85
                currency: USD
                accountingPeriodStartDate: '2012-08-01'
                accountingPeriodEndDate: '2012-08-31'
              - accountingPeriodName: Sep 2012
                isAccountingPeriodClosed: false
                amount: 85
                currency: USD
                accountingPeriodStartDate: '2012-09-01'
                accountingPeriodEndDate: '2012-09-30'
              - accountingPeriodName: Jan'2013
                isAccountingPeriodClosed: false
                amount: 80
                currency: USD
                accountingPeriodStartDate: '2013-01-01'
                accountingPeriodEndDate: '2013-01-31'
              - accountingPeriodName: Feb'2013
                isAccountingPeriodClosed: false
                amount: 5
                currency: USD
                accountingPeriodStartDate: '2013-02-01'
                accountingPeriodEndDate: '2013-02-28'
              - accountingPeriodName: Sep'2013
                isAccountingPeriodClosed: false
                amount: -7
                currency: USD
                accountingPeriodStartDate: '2013-09-01'
                accountingPeriodEndDate: '2013-09-30'
              - accountingPeriodName: Nov'2013
                isAccountingPeriodClosed: false
                amount: -12
                currency: USD
                accountingPeriodStartDate: '2013-11-01'
                accountingPeriodEndDate: '2013-11-30'
              - accountingPeriodName: Dec 2013
                isAccountingPeriodClosed: false
                amount: 0
                currency: USD
                accountingPeriodStartDate: '2013-12-11'
                accountingPeriodEndDate: '2014-01-10'
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: 0
                currency: USD
                accountingPeriodStartDate: '2014-03-12'
                accountingPeriodEndDate: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETChargeRSDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/charge-revenue-summaries/subscription-charges/{charge-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/charge-revenue-summaries/subscription-charges/{charge-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/charge-revenue-summaries/subscription-charges/{charge-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/charge-revenue-summaries/subscription-charges/{charge-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/charge-revenue-summaries/subscription-charges/{charge-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/charge-revenue-summaries/subscription-charges/{charge-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /connections:
    post:
      summary: Establish connection to Zuora REST API service
      operationId: POST_Connections
      description: |
        Establishes a connection to the Zuora REST API service based on a valid user credentials.

        This call authenticates the user and returns an API session cookie that's used to authorize subsequent calls to the REST API. A call to `connections` is a required first step before using the Zuora REST API to access data.

        The credentials must belong to a user account that has permission to access the API service.

        As noted elsewhere, it's strongly recommended that an account used for Zuora API activity is never used to log into the Zuora UI.  Once an account is used to log into the UI, it may be subject to periodic forced password changes, which may eventually lead to authentication failures when using the API.
      tags:
      - Connections
      parameters:
      - name: apiAccessKeyId
        in: header
        description: 'Account username

          '
        required: true
        type: string
      - name: apiSecretAccessKey
        in: header
        description: 'Account password

          '
        required: true
        type: string
      - name: Content-Type
        in: header
        description: 'Must be set to "application/json"

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/connections"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/connections');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/connections")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/connections", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/connections")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/connections");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /custom-exchange-rates/{currency}:
    get:
      summary: Get custom foreign currency exchange rates
      operationId: GET_CustomExchangeRates
      description: "This feature is in **Limited Availability**. If you wish to have\
        \ access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\
        \ \n\nThis reference describes how to query custom foreign exchange rates\
        \ from Zuora. You can use this API method to query exchange rates only if\
        \ you use a custom exchange rate provider and upload rates with the Import\
        \ Foreign Exchange Rates mass action. \n"
      tags:
      - Custom Exchange Rates
      parameters:
      - name: currency
        in: path
        description: "The target currency. The exchange rates in the response are\
          \ calculated in relation to the target currency.\n\nThe value must be a\
          \ three-letter currency code, for example, USD. \n"
        required: true
        type: string
      - name: startDate
        in: query
        description: |
          Start date of the date range for which you want to get exchange rates.

          The date must be in yyyy-mm-dd format, for example, 2016-01-15. The start date cannot be later than the end date.
        required: true
        type: string
      - name: endDate
        in: query
        description: |
          End date of the date range for which you want to get exchange rates.

          The date must be in yyyy-mm-dd format, for example, 2016-01-16. The end date can be a maximum of 90 days after the start date.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              inverse: true
              rates:
                '2016-01-15':
                  providerExchangeRateDate: '2016-01-14'
                  JPY: 0.0084
                  EUR: 1.0815
                  GBP: 1.4472
                '2016-01-16':
                  providerExchangeRateDate: '2016-01-15'
                  JPY: 0.0085
                  EUR: 1.0827
                  GBP: 1.4634
          description: ''
          schema:
            $ref: '#/definitions/GETCustomExchangeRatesType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/custom-exchange-rates/{currency}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/custom-exchange-rates/{currency}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/custom-exchange-rates/{currency}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/custom-exchange-rates/{currency}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/custom-exchange-rates/{currency}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/custom-exchange-rates/{currency}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /files/{file-id}:
    get:
      summary: Get files
      operationId: GET_Files
      description: |
        Retrieve a file by specifying its file ID. You can retrieve accounting period reports, such as the Revenue Detail report, as well as other files such as invoice PDFs.

        ## Example

        ```curl
        curl -i -k -H "apiAccessKeyId:$USER_NAME" -H "apiSecretAccessKey:$PASSWORD"
        -H "Accept:application/pdf"
        -X GET https://apisandbox-api.zuora.com/rest/v1/files/2c92c08c55534cf00155581fb474314d
        -o /Users/jsmith/Downloads/invoiceFile1.pdf
        ```
        The invoice PDF is downloaded to /Users/jsmith/Downloads and named invoiceFile1.pdf.

        ## File Size Limitation
        The maximum export file size is 2047MB. If you have large data requests that go over this limit, you will get the following 403 HTTP response code from Zuora.

        `<security:max-object-size>2047MB</security:max-object-size>`

        Submit a request at [Zuora Global Support](https://zuora.zendesk.com/agent/) if you require additional assistance.

        We can work with you to determine if large file optimization is an option for you.
      tags:
      - Get Files
      parameters:
      - name: file-id
        in: path
        description: 'The Zuora ID of the file you want to retrieve.

          '
        required: true
        type: string
      responses:
        '200':
          description: ''
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/files/{file-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/files/{file-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/files/{file-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/files/{file-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/files/{file-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/files/{file-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /hmac-signatures:
    post:
      summary: Return HMAC signatures
      operationId: POST_HMACSignatures
      description: 'This REST API reference describes how to return unique signature
        and token values that used to process a CORS enabled API call.

        '
      tags:
      - HMAC Signatures
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTHMACSignatureType'
      responses:
        '200':
          examples:
            application/json:
              signature: ZmI0ZjE2ZTMxMWY1YjA0ZTc4MTg1ZDhlYWRkMTEwNDE3M2RiMzNiNQ==
              token: gCH6gYqQffQCsFKSLuxyagXsuXcIK0uf
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTHMACSignatureResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\"\
          : \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\
          \n}' \"https://rest.zuora.com/v1/hmac-signatures\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/hmac-signatures');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\"\
          : \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/hmac-signatures")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/hmac-signatures", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/hmac-signatures")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/hmac-signatures");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountKey\": \"A00000001\", \n    \"method\": \"POST\", \n    \"uri\": \"https://api.zuora.com/rest/v1/payment-methods/credit-cards\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /hostedpages:
    get:
      summary: Return hosted pages
      operationId: Get_HostedPages
      description: |
        The hostedpages call returns the Payment Pages configuration metadata,
        specifically, page ID, page version, payment method type.

        The following are the version-specific and general REST requests for Payment Pages:

        * The request for Payment Pages 1.0 configuration information: `GET <BaseURL>/hostedpages?version=1`
        * The request for Payment Pages 2.0 configuration information: `GET <BaseURL>/hostedpages?version=2`
        * The request for all versions of Payment Pages configuration information: `GET <BaseURL>/hostedpages`

        ## Notes
        If you do not have the corresponding tenant setting enabled, e.g., the request `version` parameter set to 2 with the Payment Pages 2.0 setting disabled, you will receive an error.
      tags:
      - Hosted Pages
      parameters:
      - name: versionNumber
        in: query
        description: |
          Version of the Payment Pages for which you want to retrieve the configuration information. Specify 1 for Payment Pages 1.0 or 2 for Payment Pages 2.0. If omitted, information for all versions of Payment Pages are returned.

          The response also depends on your tenant settings for Payment Pages 1.0 and Payment Pages 2.0. For example, if only the tenant setting for Payment Pages 2.0 is enabled, the response will only contain information for Payment Pages 2.0 forms even when this parameter is omitted.
        required: false
        type: string
      responses:
        '200':
          examples:
            application/json:
              hostedpages:
              - pageId: 8a85858f49a3f2230149abccaa2e004a
                pageType: ACH
                pageVersion: 2.0
              - pageId: 8a85858f49a3f2230149abcd99090057
                pageType: Bank Transfer
                pageVersion: 2.0
              - pageId: 8a85858f49a3f2230149a71083d40019
                pageType: Credit Card
                pageVersion: 2.0
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GetHostedPagesType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/hostedpages"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/hostedpages');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/hostedpages")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/hostedpages", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/hostedpages")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/hostedpages");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /journal-runs:
    post:
      summary: Create journal run
      operationId: POST_JournalRun
      description: 'This REST API reference describes how to create a journal run.
        Request and response field descriptions and sample code are provided.

        '
      tags:
      - Journal Runs
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTJournalRunType'
      responses:
        '200':
          examples:
            application/json:
              journalRunNumber: JR-00000008
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTJournalRunResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountingPeriodName\"\
          : \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\"\
          : [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n  \
          \      {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n\
          }' \"https://rest.zuora.com/v1/journal-runs\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/journal-runs');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountingPeriodName\"\
          : \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\"\
          : [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n  \
          \      {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n\
          }');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-runs")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/journal-runs", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-runs")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-runs");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"journalEntryDate\": \"2014-11-04\", \n    \"transactionTypes\": [\n        {\n            \"type\": \"Invoice Item\"\n        }, \n        {\n            \"type\": \"Revenue Event Item\"\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /journal-runs/{jr-number}:
    get:
      summary: Get journal run
      operationId: GET_JournalRun
      description: 'This REST API reference describes how to get information about
        a journal run. Request and response field descriptions and sample code are
        provided.

        '
      tags:
      - Journal Runs
      parameters:
      - name: jr-number
        in: path
        description: 'Journal run number. Must be a valid journal run number in the
          format `JR-00000001`.

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: JR-00000002
              status: Completed
              executedOn: '2014-11-15 22:05:12'
              segmentationRuleName: s1
              totalJournalEntryCount: 2
              targetStartDate: '2016-03-01'
              targetEndDate: '2016-03-31'
              journalEntryDate: '2016-02-02'
              transactionTypes:
              - type: Invoice Item
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETJournalRunType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/journal-runs/{jr-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-runs/{jr-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-runs/{jr-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/journal-runs/{jr-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-runs/{jr-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-runs/{jr-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: Delete journal run
      operationId: DELETE_JournalRun
      description: "This reference describes how to delete a journal run using the\
        \ REST API.\n                      \n You can only delete journal runs that\
        \ have already been canceled.\n                      \n You must have the\
        \ \"Delete Cancelled Journal Run\" Zuora Finance user permission enabled to\
        \ delete journal runs.\n"
      tags:
      - Journal Runs
      parameters:
      - name: jr-number
        in: path
        required: true
        type: string
        description: 'Journal run number. Must be a valid journal run number in the
          format `JR-00000001`.

          '
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/journal-runs/{jr-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-runs/{jr-number}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-runs/{jr-number}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/journal-runs/{jr-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-runs/{jr-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-runs/{jr-number}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /journal-runs/{jr-number}/cancel:
    put:
      summary: Cancel journal run
      operationId: PUT_JournalRun
      description: "This reference describes how to cancel a journal run using the\
        \ REST API.\n          \nThe summary journal entries in the journal run are\
        \ canceled asynchronously. See the \"Example\" section below for details.\n\
        \          \nYou must have the \"Cancel Journal Run\" Zuora Finance user permission\
        \ enabled to cancel journal runs.\n\n## Notes\nWhen you cancel a journal run,\
        \ the summary journal entries associated with that journal run are canceled\
        \ asynchronously. A response of `{ \"success\": true }` means only that the\
        \ specified journal run has a status of \"Pending\", \"Error\", or \"Completed\"\
        \ and therefore can be canceled, but does not mean that the whole journal\
        \ run was successfully canceled.\n\nFor example, let's say you want to cancel\
        \ journal run JR-00000075. The journal run status is \"Completed\" and it\
        \ contains ten journal entries. One of the journal entries has its Transferred\
        \ to Accounting status set to \"Yes\", meaning that the entry cannot be canceled.\
        \ The workflow might go as follows:\n1. You make an API call to cancel the\
        \ journal run.\n2. The journal run status is \"Completed\", so you receive\
        \ a response of `{ \"success\": true }`.\n3. Zuora begins asynchronously canceling\
        \ journal entries associated with the journal run. The journal entry whose\
        \ Transferred to Accounting status is \"Yes\" fails to be canceled. The cancelation\
        \ process continues, and the other journal entries are successfully canceled.\n\
        4. The journal run status remains as \"Completed\". The status does not change\
        \ to \"Canceled\" because the journal run still contains a journey entry that\
        \ is not canceled.\n"
      tags:
      - Journal Runs
      parameters:
      - name: jr-number
        in: path
        required: true
        type: string
        description: "Journal run number. Must be a valid journal run number in the\
          \ format JR-00000001. \nYou can only cancel a journal run whose status is\
          \ \"Pending\", \"Error\", or \"Completed\".\n"
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/journal-runs/{jr-number}/cancel"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-runs/{jr-number}/cancel');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-runs/{jr-number}/cancel")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/journal-runs/{jr-number}/cancel", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-runs/{jr-number}/cancel")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-runs/{jr-number}/cancel");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /bulk:
    post:
      summary: Perform mass action
      operationId: POST_MassUpdater
      description: "This reference describes how to perform a mass action through\
        \ the REST API. \n\nUsing this API method, you send a multipart/form-data\
        \ request containing a `.csv` file with data about the mass action you want\
        \ to perform. Zuora returns a key and then asynchronously processes the mass\
        \ action. You can use the key to get details about the result of the mass\
        \ action.\n"
      tags:
      - Mass Updater
      parameters:
      - name: Content-Type
        in: header
        description: 'Must be multipart/form-data.

          '
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTMassUpdateType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              bulkKey: 402892f04c97b89a014c97bb30a50003
          description: ''
          schema:
            $ref: '#/definitions/POSTMassUpdateResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''"curl\n-H \"apiAccessKeyId:Username\"\n-H
          \"apiSecretAccessKey:Password\"\n-H \"Accept:application/json\"\n--form
          \"file=@CreateRevenueSchedules.csv\"\n--form \"params={actionType:CreateRevenueSchedule}\"\n-X
          POST https://api.zuora.com/rest/v1/bulk"'' "https://rest.zuora.com/v1/bulk"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/bulk');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('"curl\n-H \"apiAccessKeyId:Username\"\n-H \"apiSecretAccessKey:Password\"\n-H \"Accept:application/json\"\n--form \"file=@CreateRevenueSchedules.csv\"\n--form \"params={actionType:CreateRevenueSchedule}\"\n-X POST https://api.zuora.com/rest/v1/bulk"');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://api.zuora.com/rest/v1/bulk\"");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/bulk")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://api.zuora.com/rest/v1/bulk\""

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/bulk", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/bulk")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://api.zuora.com/rest/v1/bulk\""

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/bulk");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "\"curl\\n-H \\\"apiAccessKeyId:Username\\\"\\n-H \\\"apiSecretAccessKey:Password\\\"\\n-H \\\"Accept:application/json\\\"\\n--form \\\"file=@CreateRevenueSchedules.csv\\\"\\n--form \\\"params={actionType:CreateRevenueSchedule}\\\"\\n-X POST https://api.zuora.com/rest/v1/bulk\"", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /bulk/{bulk-key}:
    get:
      summary: Get mass action result
      operationId: GET_MassUpdater
      description: "This reference describes how to get information about the result\
        \ of a mass action through the REST API. \n"
      tags:
      - Mass Updater
      parameters:
      - name: bulk-key
        in: path
        description: 'String of 32 characters that identifies a mass action. You get
          the bulk-key after performing a mass action through the REST API.

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              actionType: UpdateAccountingCode
              inputSize: 354
              uploadedBy: john.doe@acme.com
              uploadedOn: '2015-04-07 14:22:09'
              status: Completed
              startedOn: '2015-04-07 14:22:11'
              endedOn: '2015-04-07 14:32:01'
              outputSize: 350
              outputURL: https://api.zuora.com/apps/api/file/402892c84c9285b1014c9293f5320007
              outputType: (url:.csv.zip)
              totalCount: 3
              processedCount: 3
              errorCount: 1
              successCount: 2
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETMassUpdateType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/bulk/{bulk-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/bulk/{bulk-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/bulk/{bulk-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/bulk/{bulk-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/bulk/{bulk-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/bulk/{bulk-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /bulk/{bulk-key}/stop:
    put:
      summary: Stop mass action
      operationId: PUT_MassUpdater
      description: |
        This reference describes how to stop a mass action through the REST API. You can stop a mass action when its status is Pending or Processing. After you have stopped a mass action, you can get the mass action result to see details of the mass action.

        - If you stop a mass action when its status is Pending, no response file is generated because no records have been processed.

        - If you stop a mass action when its status is Processing, a response file is generated. You can check the response file to see which records have been processed and which have not. In the response file, the **Success** column has the value `Y` (successful) or `N` (failed) for processed records, and a blank value for unprocessed records.

        Records that have already been processed when a mass action is stopped are not rolled back.
      tags:
      - Mass Updater
      parameters:
      - name: bulk-key
        in: path
        required: true
        type: string
        description: 'String of 32 characters that identifies a mass action. You get
          the bulk-key after performing a mass action through the REST API.

          '
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/bulk/{bulk-key}/stop"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/bulk/{bulk-key}/stop');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/bulk/{bulk-key}/stop")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/bulk/{bulk-key}/stop", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/bulk/{bulk-key}/stop")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/bulk/{bulk-key}/stop");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /notification-history/callout:
    get:
      summary: Get callout notification histories
      operationId: GET_CalloutHistory
      description: 'This REST API reference describes how to get a notification history
        for callouts.

        '
      tags:
      - Notification History
      parameters:
      - name: endTime
        in: query
        type: string
        format: date-time
        description: The final date and time of records to be returned. Defaults to
          now. Use format yyyy-MM-ddTHH:mm:ss.
        required: false
      - name: startTime
        in: query
        type: string
        format: date-time
        description: The initial date and time of records to be returned. Defaults
          to (end time - 1 day). Use format yyyy-MM-ddTHH:mm:ss.
        required: false
      - name: objectId
        in: query
        type: string
        description: The ID of an object that triggered a callout notification.
        required: false
      - name: failedOnly
        in: query
        type: boolean
        description: If `true`, only return failed records. If `false`, return all
          records in the given date range. The default value is `true`.
        required: false
      - name: eventCategory
        in: query
        type: string
        description: Category of records to be returned by event category.
        required: false
      - name: includeResponseContent
        in: query
        type: boolean
        description: ''
        required: false
      responses:
        '200':
          examples:
            application/json:
              calloutHistories:
              - responseCode: 405
                requestUrl: https://www.google.com
                requestMethod: POST
                eventCategory: 1210
                notification: New Subscription Created
                attemptedNum: 3
                createTime: '2015-01-13T03:33:51'
                eventContext:
                  <Account.Currency>: USD
                  <Subscription.SubscriptionDetailTable>:
                    Charge Name: recurringcharge
                    Charge Type: Recurring
                    Effective Start Date: 01 / 01 / 2016
                    Unit Price: 50.0
                    QTY: 5.0
                    Total: 250.0
                  <Account.CurrencySymbol>: $
                  <BillToContact.FirstName>: Mary
                  <Subscription.ServiceActivation>: 01/01/2016
                  <Subscription.InitialTerm>: '50'
                  <Subscription.RenewalTerm>: '0'
                  <Subscription.CustomerAcceptance>: 01/01/2016
                  <Account.Name>: test
                  <Subscription.SubscriptionName>: A-S00000003
                  <Account.ID>: 402881e54ade80c8014ade884c48000b
                  <BillToContact.WorkEmail>: test@test.test
                  <Account.Number>: A00000001
                  <Subscription.TermStartDate>: 01/01/2016
                  <Event.Timestamp>: 2015-01-13T22:31:43.248+0800
                  <Subscription.AutoRenew>: 'No'
                  <Notification>:
                    id: 402892fa47866fe701478674a5c100eb
                    EmailTemplate: New Subscription Created Default Email Template
                    Event: New Subscription Created
                    Profile: Default Profile
                    emailAction: true
                    calloutAction: true
                    updatedOn: 01/12/2015 03:23:08
                    updatedBy: 402892fa47866fe7014786749d9b0002
                  <BillToContact.LastName>: Smith
                  <Object.ID>: 402881e54ae37f31014ae3b514e100fd
                  <Subscription.ContractEffective>: 01/01/2016
                  <Subscription.TCV>: $12,500.00
                  <Contact.ID>: 402881e54ade80c8014ade884c51000c
                  <Subscription.CMRR>: $250.00
                  <BillToContact.ID>: 402881e54ade80c8014ade884c51000c
                  <Event.Category>: SubscriptionCreated
                  <Subscription.TermSetting>: termed
                  <BillingAccount.ID>: 402881e54ade80c8014ade884c48000b
                  <Subscription.CreateDate>: 01/13/2015
                  <Subscription.TermEndDate>: 03/01/2020
                  <Subscription.ID>: 402881e54ae37f31014ae3b514e100fd
                  <Event.ID>: 402892fa47866fe701478674a4ff0093
                  <Subscription.CreatedBy>: da@da.com
              nextPage: https://localhost:8080/apps/v1/notification-history/callout?page=2&pageSize=1&startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETCalloutHistoryVOsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/notification-history/callout"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/notification-history/callout');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/notification-history/callout")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/notification-history/callout", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/notification-history/callout")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/notification-history/callout");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /notification-history/email:
    get:
      summary: Get email notification histories
      operationId: GET_EmailHistory
      description: "This REST API reference describes how to get a notification history\
        \ for notification emails.\n\n\n## Notes\nRequest parameters and their values\
        \ may be appended with a \"?\" following the HTTPS GET request.  Additional\
        \ request parameter are separated by \"&\". \n\nFor example:\n\n`GET https://api.zuora.com/rest/v1/notification-history/email?startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000&pageSize=1`\n"
      tags:
      - Notification History
      parameters:
      - name: endTime
        in: query
        type: string
        format: date-time
        description: The end date and time of records to be returned. Defaults to
          now. Use format yyyy-MM-ddTHH:mm:ss. The maximum date range (endTime - startTime)
          is three days.
        required: false
      - name: startTime
        in: query
        type: string
        format: date-time
        description: The initial date and time of records to be returned. Defaults
          to (end time - 1 day). Use format yyyy-MM-ddTHH:mm:ss. The maximum date
          range (endTime - startTime) is three days.
        required: false
      - name: objectId
        in: query
        type: string
        description: The Id of an object that triggered an email notification.
        required: false
      - name: failedOnly
        in: query
        type: boolean
        description: If `true`, only returns failed records. When `false`, returns
          all records in the given date range. Defaults to `true` when not specified.
        required: false
      - name: eventCategory
        in: query
        type: string
        description: Category of records to be returned by event category.
        required: false
      responses:
        '200':
          examples:
            application/json:
              emailHistories:
              - result: OK
                errorMessage: null
                eventCategory: 1210
                notification: New Subscription Created
                subject: New subscription A-S00000003 was created and activated
                toEmail: mary.smith@company.test
                fromEmail: no-reply@sender.test
                cc: bob@company.test,chris@company.test
                bcc: ceo@company.test,cto@company.test
                replyTo: support@sender.test
                sendTime: '2015-01-13T03:31:43'
              nextPage: https://localhost:8080/apps/v1/notification-history/email?page=2&pageSize=1&startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETEmailHistoryVOsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/notification-history/email"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/notification-history/email');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/notification-history/email")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/notification-history/email", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/notification-history/email")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/notification-history/email");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /operations/invoice-collect:
    post:
      summary: Invoice and collect
      operationId: POST_TransactionInvoicePayment
      description: "Generates invoices and collects payments for a specified account.\n\
        \nThis method can generate invoices and collect payments on the invoices\n\
        generated, or else simply collect payment on a specified existing\ninvoice.\
        \ The customer's default payment method is used, and the full\namount due\
        \ is collected. The operation depends on the parameters you\nspecify\n\n-\
        \ To generate one or more new invoices for that customer and collect\npayment\
        \ on the generated invoice(s), leave the **invoiceId** field empty. \n\n-\
        \ To collect payment on an existing invoice, specify the invoice ID. \n\n\n\
        The operation is atomic; if any part is unsuccessful, the entire\noperation\
        \ is rolled back.\n\n\n## Notes\n\nTimeouts may occur when using this method\
        \ on an account that\nhas an extremely high number of subscriptions.\n"
      tags:
      - Operations
      parameters:
      - name: Request
        in: body
        description: Customer account ID or account number.
        required: true
        schema:
          $ref: '#/definitions/POSTInvoiceCollectType'
      responses:
        '200':
          examples:
            application/json:
              invoices:
              - invoiceId: 4028925a4cb74ec9014cb7540988002e
                invoiceNumber: INV00000091
                invoiceAmount: 801.73
              paymentId: 402892053e100406013e1024ab7c00e3
              amountCollected: 801.73
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTInvoiceCollectResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\"\
          : \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\"\
          , \n    \"paymentGateway\": \"TestGateway\"\n}' \"https://rest.zuora.com/v1/operations/invoice-collect\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/operations/invoice-collect');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\"\
          : \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\"\
          , \n    \"paymentGateway\": \"TestGateway\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/operations/invoice-collect")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/operations/invoice-collect", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/operations/invoice-collect")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/operations/invoice-collect");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountKey\": \"4028925a4cb74ec9014cb7520fc00005\", \n    \"invoiceId\": \"4028925a4cb74ec9014cb7540988002e\", \n    \"paymentGateway\": \"TestGateway\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /payment-methods/credit-cards:
    post:
      summary: Create payment method
      operationId: POST_PaymentMethods
      description: "This REST API reference describes how to create a new credit card\n\
        payment method for a customer account.\n\n## Notes\n\nThis API call is CORS\
        \ Enabled. Use client-side JavaScript to invoke the call. \n"
      tags:
      - Payment Methods
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTPaymentMethodType'
      responses:
        '200':
          examples:
            application/json:
              paymentMethodId: 2c92c8f83dcbd8b1013dcce1d6a60
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTPaymentMethodResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\"\
          : \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\":\
          \ \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\"\
          : \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\"\
          : \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\"\
          : \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\"\
          : \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n\
          \    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false,\
          \ \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\"\
          , \n    \"securityCode\": \"123\"\n}' \"https://rest.zuora.com/v1/payment-methods/credit-cards\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/payment-methods/credit-cards');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\"\
          : \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\":\
          \ \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\"\
          : \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\"\
          : \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\"\
          : \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\"\
          : \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n\
          \    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false,\
          \ \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\"\
          , \n    \"securityCode\": \"123\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"securityCode\": \"123\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/payment-methods/credit-cards")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"securityCode\": \"123\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/payment-methods/credit-cards", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/payment-methods/credit-cards")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"securityCode\": \"123\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/payment-methods/credit-cards");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountKey\": \"A00001115\", \n    \"cardHolderInfo\": {\n        \"addressLine1\": \"77 Fallon Glen\", \n        \"addressLine2\": \"\", \n        \"cardHolderName\": \"Bill Thiebault\", \n        \"city\": \"Fremont\", \n        \"country\": \"USA\", \n        \"email\": \"bill@testaddress.com\", \n        \"phone\": \"4155551234\", \n        \"state\": \"California\", \n        \"zipCode\": \"94020\"\n    }, \n    \"creditCardNumber\": \"1111222233334444\", \n    \"creditCardType\": \"Discover\", \n    \"defaultPaymentMethod\": false, \n    \"expirationMonth\": \"10\", \n    \"expirationYear\": \"2015\", \n    \"securityCode\": \"123\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /payment-methods/credit-cards/accounts/{account-key}:
    get:
      summary: Get payment methods
      operationId: GET_PaymentMethods
      description: "This REST API reference describes how to retrieve all credit card\n\
        information for the specified customer account. \n\n## Notes\nThe response\
        \ includes details credit or debit cards for the specified customer account.\
        \ Card numbers are masked, e.g., \"************1234\". Cards are returned\
        \ in reverse chronological order of last update.\n\nYou can send requests\
        \ for bank transfer payment methods types. The response will not include bank\
        \ transfer details.\n\nThe response only includes payment details on payment\
        \ methods that are credit or debit cards.\n"
      tags:
      - Payment Methods
      parameters:
      - name: account-key
        in: path
        description: Account number or account ID.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              nextPage: https://api.zuora.com/rest/v1/payment-methods/credit-cards/accounts/A00001115?page=2&pageSize=2
              creditCards:
              - cardHolderInfo:
                  zipCode: null
                  addressLine2: null
                  addressLine1: null
                  phone: '4082021111'
                  state: null
                  country: null
                  city: null
                  cardHolderName: Leo
                  email: test@zuora.com
                defaultPaymentMethod: true
                id: 2c92c8f83dabf9cf013daef12dd303b0
                expirationMonth: 10
                cardNumber: '************1111'
                expirationYear: 2020
                cardType: Visa
              - cardHolderInfo:
                  zipCode: '95135'
                  addressLine2: null
                  addressLine1: 1400 Bridge Pkwy
                  phone: null
                  state: California
                  country: United States
                  city: San Jose
                  cardHolderName: foo CC name
                  email: null
                defaultPaymentMethod: false
                id: 2c92a0f9391832b10139183e279e0044
                expirationMonth: 10
                cardNumber: '*****foo CC #'
                expirationYear: 2012
                cardType: Visa
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETPaymentMethodsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/payment-methods/credit-cards/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/payment-methods/credit-cards/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /payment-methods/credit-cards/{payment-method-id}:
    put:
      summary: Update payment method
      operationId: PUT_PaymentMethods
      description: |
        Updates an existing credit card payment method for the specified
        customer account.
      tags:
      - Payment Methods
      parameters:
      - name: payment-method-id
        in: path
        required: true
        type: string
        description: Unique ID of the payment method to update.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTPaymentMethodType'
      responses:
        '200':
          examples:
            application/json:
              paymentMethodId: 2c92c8f83dcbd8b1013dcce1d6a600ce
              success: true
          description: ''
          schema:
            $ref: '#/definitions/PUTPaymentMethodResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cardHolderName\"\
          : \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015,\
          \ \n    \"securityCode\": \"111\"\n}' \"https://rest.zuora.com/v1/payment-methods/credit-cards/{payment-method-id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/payment-methods/credit-cards/{payment-method-id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cardHolderName\"\
          : \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015,\
          \ \n    \"securityCode\": \"111\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"securityCode\": \"111\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/payment-methods/credit-cards/{payment-method-id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"securityCode\": \"111\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/payment-methods/credit-cards/{payment-method-id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/payment-methods/credit-cards/{payment-method-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"securityCode\": \"111\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/payment-methods/credit-cards/{payment-method-id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cardHolderName\": \"Leo\", \n    \"expirationMonth\": 8, \n    \"expirationYear\": 2015, \n    \"securityCode\": \"111\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /payment-methods/{payment-method-id}:
    delete:
      summary: Delete payment method
      operationId: DELETE_PaymentMethods
      description: |
        Deletes a credit card payment method from the specified customer
        account.

        If the specified payment method is the account's default payment
        method, the request will fail.  In that case, you must first designate a
        different payment method for that customer to be the default.
      tags:
      - Payment Methods
      parameters:
      - name: payment-method-id
        in: path
        required: true
        type: string
        description: Unique identifier of a payment method. (Since this ID is unique,
          and linked to a customer account in the system, no customer identifier is
          needed.)
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/payment-methods/{payment-method-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/payment-methods/{payment-method-id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/payment-methods/{payment-method-id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/payment-methods/{payment-method-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/payment-methods/{payment-method-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/payment-methods/{payment-method-id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /quotes/document:
    post:
      summary: Generate quotes document
      operationId: POST_QuotesDocument
      description: "The `document` call generates a quote document and returns the\
        \ generated document URL. You can directly access the generated quote file\
        \ through the returned URL.\n\nThe `document` call should be only used from\
        \ Zuora Quotes. \n\n## File Size Limitation \nThe maximum export file size\
        \ is 2047MB. If you have large data requests that go over this limit, you\
        \ will get the following 403 HTTP response code from Zuora:\n`security:max-object-size>2047MB</security:max-object-size>`\n\
        \nSubmit a request at [Zuora Global Support](http://support.zuora.com/) if\
        \ you require additional assistance.\n\nWe can work with you to determine\
        \ if large file optimization is an option for you.\n"
      tags:
      - Quotes Document
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTQuoteDocType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              file: https://api.zuora.com/rest/v1/file/2c92c09447f1ca410147f7bfed8c5a87
          description: ''
          schema:
            $ref: '#/definitions/POSTQuoteDocResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"apiuser\"\
          : \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\"\
          : \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\"\
          : \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\"\
          , \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\"\
          : \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\",\
          \ \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"\
          0\"\n}' \"https://rest.zuora.com/v1/quotes/document\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/quotes/document');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"apiuser\"\
          : \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\"\
          : \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\"\
          : \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\"\
          , \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\"\
          : \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\",\
          \ \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"\
          0\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/quotes/document")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/quotes/document", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/quotes/document")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/quotes/document");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"apiuser\": \"superadmin@zuora.com\", \n    \"documentType\": \"pdf\", \n    \"locale\": \"en_US\", \n    \"quoteId\": \"a0Bi000000A71rp\", \n    \"serverUrl\": \"https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX\", \n    \"sessionId\": \"we764buuM03bkE0fmmc5zGMYp\", \n    \"templateId\": \"4028925648fdb7830148fdc1246c0003\", \n    \"useSFDCLocale\": \"1\", \n    \"zquotesMajorVersion\": \"7\", \n    \"zquotesMinorVersion\": \"0\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-events/{event-number}:
    get:
      summary: Get revenue event details
      operationId: GET_RevenueEventDetails
      description: |2

        This REST API reference describes how to get revenue event details by specifying the revenue event number. Request and response field descriptions and sample code are provided.
      tags:
      - Revenue Events
      parameters:
      - name: event-number
        in: path
        description: The number associated with the revenue event.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: RE-00000001
              currency: USD
              notes: null
              accountId: 2c92c0f8439770960143b2141f5a584e
              subscriptionId: 2c92c0f943977b4f0143b23487994327
              subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
              createdOn: '2014-01-20 16:36:45'
              eventType: Invoice Posted
              recognitionStart: '2013-10-10'
              recognitionEnd: '2013-10-10'
              cf_phases__c: Scoping Phase
              cf_project__c: Security
              revenueItems:
              - accountingPeriodName: Oct'2013
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueEventDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-events/{event-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-events/{event-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-events/{event-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-events/{event-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-events/{event-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-events/{event-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-events/revenue-schedules/{rs-number}:
    get:
      summary: Get revenue events for a revenue schedule
      operationId: GET_RevenueEventForRevenueSchedule
      description: |2

        This REST API reference describes how to get all revenue events in a revenue schedule by specifying the revenue schedule number. Request and response field descriptions and sample code are provided.
      tags:
      - Revenue Events
      parameters:
      - name: rs-number
        in: path
        description: Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              revenueEventDetails:
              - number: RE-00000001
                currency: USD
                notes: Phase 1 Test
                accountId: 2c92c0f8439770960143b2111f5a584e
                subscriptionId: 2c92c0f943977b4f0143b23487999327
                subscriptionChargeId: 2c92c0f943977b4f0143b22287ed432e
                createdOn: '2014-01-21 11:35:42'
                eventType: Revenue Distributed
                recognitionStart: null
                recognitionEnd: null
                cf_phases__c: Phase 1
                cf_project__c: project A
                revenueItems:
                - accountingPeriodName: Oct'2013
                  isAccountingPeriodClosed: false
                  amount: 10
                  currency: USD
                  accountingPeriodStartDate: '2013-10-01'
                  accountingPeriodEndDate: '2013-10-31'
                - accountingPeriodName: Open-Ended
                  isAccountingPeriodClosed: false
                  amount: -10
                  currency: USD
                  accountingPeriodStartDate: '2013-11-12'
                  accountingPeriodEndDate: null
              - number: RE-00000002
                currency: USD
                notes: null
                accountId: 2c92c0f8439770960143b2111f5a584e
                subscriptionId: 2c92c0f943977b4f0143b22287994327
                subscriptionChargeId: 2c92c0f943977b4f0143b99987ed432e
                createdOn: '2014-01-20 16:36:45'
                eventType: Invoice Posted
                recognitionStart: '2013-10-10'
                recognitionEnd: '2013-10-10'
                cf_phases__c: Phase 1
                cf_project__c: project A
                revenueItems:
                - accountingPeriodName: Oct'2013
                  isAccountingPeriodClosed: false
                  amount: 50
                  currency: USD
                  accountingPeriodStartDate: '2013-10-01'
                  accountingPeriodEndDate: '2013-10-31'
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueEventDetailsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-events/revenue-schedules/{rs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-events/revenue-schedules/{rs-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-events/revenue-schedules/{rs-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-events/revenue-schedules/{rs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-events/revenue-schedules/{rs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-events/revenue-schedules/{rs-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-items/charge-revenue-summaries/{crs-number}:
    get:
      summary: Get revenue items by charge revenue summary number
      operationId: GET_RevenueItemsByChargeRevenueSummaryNumber
      description: 'This REST API reference describes how to get the details for each
        revenue item in a charge revenue summary by specifying the charge revenue
        summary number. Request and response field descriptions and sample code are
        provided.

        '
      tags:
      - Revenue Items
      parameters:
      - name: crs-number
        in: path
        description: The charge revenue summary number.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              revenueItems:
              - accountingPeriodName: Sep'2013
                isAccountingPeriodClosed: false
                amount: 35
                currency: USD
                accountingPeriodStartDate: '2013-09-01'
                accountingPeriodEndDate: '2013-09-30'
              - accountingPeriodName: Oct'2013
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: 150
                currency: USD
                accountingPeriodStartDate: '2013-12-11'
                accountingPeriodEndDate: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueItemsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-items/charge-revenue-summaries/{crs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-items/charge-revenue-summaries/{crs-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-items/charge-revenue-summaries/{crs-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-items/charge-revenue-summaries/{crs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-items/charge-revenue-summaries/{crs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-items/charge-revenue-summaries/{crs-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-items/revenue-events/{event-number}:
    get:
      summary: Get revenue items by revenue event number
      operationId: GET_RevenueItemsByChargeRevenueEventNumber
      description: 'This REST API reference describes how to get the details of each
        revenue item in a revenue event by specifying the revenue event number. Request
        and response field descriptions and sample code are provided.

        '
      tags:
      - Revenue Items
      parameters:
      - name: event-number
        in: path
        required: true
        type: string
        description: The number associated with the revenue event.
      responses:
        '200':
          examples:
            application/json:
              revenueItems:
              - accountingPeriodName: Oct'2013
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueItemsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-items/revenue-events/{event-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Update custom fields on revenue items by revenue event number
      operationId: PUT_CustomFieldsonRevenueItemsByRevenueEvent
      description: 'This REST API reference describes how to update custom fields
        on revenue items by specifying the revenue event number. Request and response
        field descriptions and sample code are provided.

        '
      tags:
      - Revenue Items
      parameters:
      - name: event-number
        in: path
        required: true
        type: string
        description: The number associated with the revenue event.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTEventRIDetailType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueItems\"\
          : [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n \
          \           \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\"\
          : \"Security\"\n        }, \n        {\n            \"accountingPeriodName\"\
          : \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n   \
          \         \"cf_project__c\": \"Security\"\n        }\n    ]\n}' \"https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueItems\"\
          : [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n \
          \           \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\"\
          : \"Security\"\n        }, \n        {\n            \"accountingPeriodName\"\
          : \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n   \
          \         \"cf_project__c\": \"Security\"\n        }\n    ]\n}');\n\ntry\
          \ {\n  $response = $request->send();\n\n  echo $response->getBody();\n}\
          \ catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-items/revenue-events/{event-number}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-items/revenue-events/{event-number}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-items/revenue-schedules/{rs-number}:
    get:
      summary: Get revenue items by revenue schedule
      operationId: GET_RevenueItemsByRevenueSchedule
      description: 'This REST API reference describes how to get the details for each
        revenue items in a revenue schedule by specifying the revenue schedule number.
        Request and response field descriptions and sample code are provided.

        '
      tags:
      - Revenue Items
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".
      responses:
        '200':
          examples:
            application/json:
              revenueItems:
              - accountingPeriodName: Oct'2013
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
                recognizedRevenueAccountingCodeType: null
                recognizedRevenueAccountingCode: null
                deferredRevenueAccountingCodeType: null
                deferredRevenueAccountingCode: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRsRevenueItemsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-items/revenue-schedules/{rs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: Update custom fields on revenue items by revenue schedule number
      operationId: PUT_CustomFieldsonRevenueItemsByRevenueSchedule
      description: 'This REST API reference describes how to update custom fields
        on revenue Items by specifying the revenue schedule number. Request and response
        field descriptions and sample code are provided.

        '
      tags:
      - Revenue Items
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTScheduleRIDetailType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueItems\"\
          : [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n \
          \           \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\"\
          : \"Security\"\n        }, \n        {\n            \"accountingPeriodName\"\
          : \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n   \
          \         \"cf_project__c\": \"Security\"\n        }\n    ]\n}' \"https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueItems\"\
          : [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n \
          \           \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\"\
          : \"Security\"\n        }, \n        {\n            \"accountingPeriodName\"\
          : \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n   \
          \         \"cf_project__c\": \"Security\"\n        }\n    ]\n}');\n\ntry\
          \ {\n  $response = $request->send();\n\n  echo $response->getBody();\n}\
          \ catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-items/revenue-schedules/{rs-number}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-items/revenue-schedules/{rs-number}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"revenueItems\": [\n        {\n            \"accountingPeriodName\": \"Oct'2014\", \n            \"cf_phases__c\": \"Scoping Phase\", \n            \"cf_project__c\": \"Security\"\n        }, \n        {\n            \"accountingPeriodName\": \"Nov'2014\", \n            \"cf_phases__c\": \"Design Phase\", \n            \"cf_project__c\": \"Security\"\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-recognition-rules/subscription-charges/{charge-key}:
    get:
      summary: Get the rule associated with a charge
      operationId: GET_RevenueRecRules
      description: 'This REST API reference describes how to get the revenue recognition
        rule associated with a subscription charge by specifying the charge ID. Request
        and response field descriptions and sample code are provided.

        '
      tags:
      - Revenue Rules
      parameters:
      - name: charge-key
        in: path
        description: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              revenueRecognitionRuleName: Recognize upon invoicing
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueRecognitionRuleAssociationType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-recognition-rules/subscription-charges/{charge-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-recognition-rules/subscription-charges/{charge-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-recognition-rules/subscription-charges/{charge-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-recognition-rules/subscription-charges/{charge-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-recognition-rules/subscription-charges/{charge-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-recognition-rules/subscription-charges/{charge-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range:
    post:
      summary: Create a revenue schedule for an Invoice Item (distribute by date range)
      operationId: POST_RSforInvoiceItem_DistributeByDateRange
      description: This REST API reference describes how to create a revenue schedule
        for an Invoice Item and distribute the revenue by specifying the recognition
        start and end dates.
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-id
        in: path
        description: |
          ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75.
          If the specified Invoice Item is already associated with a revenue schedule, the call will fail.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRevenueScheduleByDateRangeType'
      responses:
        '200':
          examples:
            application/json:
              revenueScheduleNumber: RS-00000003
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRevenueScheduleByTransactionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"customField__c\"\
          : null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\"\
          : \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"\
          2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\"\
          : {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue\
          \ Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"\"\n    }\n}' \"https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"customField__c\"\
          : null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\"\
          : \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"\
          2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\"\
          : {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue\
          \ Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}/distribute-revenue-with-date-range");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/invoice-items/{invoice-item-id}:
    post:
      summary: Create a revenue schedule for an Invoice Item (manual distribution)
      operationId: POST_RSforInvoiceItem_ManualDistribution
      description: This REST API reference describes how to create a revenue schedule
        for an Invoice Item and manually distribute the revenue.
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-id
        in: path
        description: |
          ID of the Invoice Item, for example, e20b07fd416dcfcf0141c81164fd0a75.
          If the specified Invoice Item is already associated with a revenue schedule, the call will fail.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRevenueScheduleByTransactionType'
      responses:
        '200':
          examples:
            application/json:
              revenueScheduleNumber: RS-00000002
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRevenueScheduleByTransactionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\"\
          : [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n  \
          \          \"newAmount\": \"20\"\n        }, \n        {\n            \"\
          accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"\
          30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\"\
          : \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\"\
          : [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n  \
          \          \"newAmount\": \"20\"\n        }, \n        {\n            \"\
          accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"\
          30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\"\
          : \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response =\
          \ $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/revenue-schedules/invoice-items/{invoice-item-id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    get:
      summary: Get a revenue schedule by invoice item ID
      operationId: GET_RSbyInvoiceItem
      description: This REST API reference describes how to get the details of a revenue
        schedule by specifying the invoice item ID.
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-id
        in: path
        description: A valid Invoice Item ID.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: RS-00000290
              recognitionRuleName: Recognize upon invoicing
              amount: 50
              undistributedUnrecognizedRevenue: 50
              recognizedRevenue: 0
              unrecognizedRevenue: 50
              currency: USD
              notes: null
              createdOn: '2014-01-21 13:59:25'
              updatedOn: '2014-01-21 13:59:25'
              accountId: 2c92c0f8439770960143b2141f5a584e
              subscriptionId: 2c92c0f943977b4f0143b23487994327
              subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
              linkedTransactionId: 2c92c094439782460143b62c2ee60f59
              linkedTransactionType: InvoiceItem
              referenceId: null
              revenueScheduleDate: '2014-01-21'
              cf_phases__c: Phase 1
              cf_project__c: project A
              revenueItems:
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: 50
                currency: USD
                accountingPeriodStartDate: '2013-12-11'
                accountingPeriodEndDate: null
                recognizedRevenueAccountingCodeType: 'Revenue: Sales'
                recognizedRevenueAccountingCode: Recurring Monthly Revenue
                deferredRevenueAccountingCodeType: null
                deferredRevenueAccountingCode: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRSDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-schedules/invoice-items/{invoice-item-id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-items/{invoice-item-id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range:
    post:
      summary: Create a revenue schedule for an Invoice Item Adjustment (distribute
        by date range)
      operationId: POST_RSforInvoiceItemAdjustment_DistributeByDateRange
      description: This REST API reference describes how to create a revenue schedule
        for an Invoice Item Adjustment and distribute the revenue by specifying the
        recognition start and end dates.
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-adj-key
        in: path
        description: |
          ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.
          If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRevenueScheduleByDateRangeType'
      responses:
        '200':
          examples:
            application/json:
              revenueScheduleNumber: RS-00000003
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRevenueScheduleByTransactionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"customField__c\"\
          : null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\"\
          : \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"\
          2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\"\
          : {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue\
          \ Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"\"\n    }\n}' \"https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"customField__c\"\
          : null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\"\
          : \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"\
          2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\"\
          : {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue\
          \ Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"\"\n    }\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}/distribute-revenue-with-date-range");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"customField__c\": null, \n    \"distributionType\": \"Daily distribution\", \n    \"notes\": \"Manually distribute revenue by usage\", \n    \"recognitionEnd\": \"2016-12-31\", \n    \"recognitionStart\": \"2016-12-1\", \n    \"revenueEvent\": {\n        \"customField__c\": null, \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"\"\n    }\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}:
    post:
      summary: Create a revenue schedule for an Invoice Item Adjustment (manual distribution)
      operationId: POST_RSforInvoiceItemAdjustment_ManualDistribution
      description: This REST API reference describes how to create a revenue schedule
        for an Invoice Item Adjustment and manually distribute the revenue.
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-adj-key
        in: path
        description: |
          ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.
          If the specified Invoice Item Adjustment is already associated with a revenue schedule, the call will fail.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRevenueScheduleByTransactionType'
      responses:
        '200':
          examples:
            application/json:
              revenueScheduleNumber: rs-00000002
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRevenueScheduleByTransactionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"revenueDistributions\"\
          : [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n  \
          \          \"newAmount\": \"20\"\n        }, \n        {\n            \"\
          accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"\
          30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\"\
          : \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"My notes\"\n    }\n}' \"https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"revenueDistributions\"\
          : [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n  \
          \          \"newAmount\": \"20\"\n        }, \n        {\n            \"\
          accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"\
          30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\"\
          : \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n        \"notes\": \"My notes\"\n    }\n}');\n\ntry {\n  $response =\
          \ $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-key}");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan '16\", \n            \"newAmount\": \"20\"\n        }, \n        {\n            \"accountingPeriodName\": \"Open-Ended\", \n            \"newAmount\": \"30\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"RevenueDistributed__z\", \n        \"notes\": \"My notes\"\n    }\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/subscription-charges/{charge-key}:
    post:
      summary: Create a revenue schedule on a subscription charge
      operationId: POST_RSforSubsCharge
      description: This REST API reference describes how to create a revenue schedule
        by specifying the subscription charge. This method is for custom unlimited
        revenue recognition only.
      tags:
      - Revenue Schedules
      parameters:
      - name: charge-key
        in: path
        description: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRevenueScheduleByChargeType'
      responses:
        '200':
          examples:
            application/json:
              revenueScheduleNumber: rs-00000001
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRevenueScheduleByChargeResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"amount\"\
          : \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\"\
          : \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\"\
          , \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n\
          \    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\"\
          : \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\"\
          : \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n \
          \   \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\"\
          : \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n    \
          \    {\n            \"accountingPeriodName\": \"Feb'2013\", \n         \
          \   \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n\
          \        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"\
          project A\", \n        \"eventType\": \"Revenue Distributed\", \n      \
          \  \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute\
          \ revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\
          \n}' \"https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"amount\"\
          : \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\"\
          : \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\"\
          , \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n\
          \    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\"\
          : \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\"\
          : \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n \
          \   \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\"\
          : \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n    \
          \    {\n            \"accountingPeriodName\": \"Feb'2013\", \n         \
          \   \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n\
          \        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"\
          project A\", \n        \"eventType\": \"Revenue Distributed\", \n      \
          \  \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute\
          \ revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/revenue-schedules/subscription-charges/{charge-key}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"amount\": \"300\", \n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"deferredRevenueAccountingCode\": \"Deferred Revenue\", \n    \"deferredRevenueAccountingCodeType\": \"Deferred Revenue\", \n    \"overrideChargeAccountingCodes\": \"true\", \n    \"recognizedRevenueAccountingCode\": \"Subscription Revenue\", \n    \"recognizedRevenueAccountingCodeType\": \"Sales Revenue\", \n    \"referenceId\": \"rs transaction ref\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"100\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"200\"\n        }\n    ], \n    \"revenueEvent\": {\n        \"cf_phases__c\": \"Phase 1\", \n        \"cf_project__c\": \"project A\", \n        \"eventType\": \"Revenue Distributed\", \n        \"eventTypeSystemId\": \"1111111\", \n        \"notes\": \"Manually distribute revenue by usage\"\n    }, \n    \"revenueScheduleDate\": \"2013-01-01\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    get:
      summary: Get revenue schedule by subscription charge
      operationId: GET_RSforSubscCharge
      description: This REST API reference describes how to get the revenue schedule
        details by specifying subscription charge ID. Request and response field descriptions
        and sample code are provided
      tags:
      - Revenue Schedules
      parameters:
      - name: charge-key
        in: path
        description: ID of the subscription rate plan charge; for example, 402892793e173340013e173b81000012.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              revenueSchedules:
              - number: RS-00000291
                recognitionRuleName: Recognize upon invoicing
                amount: 50
                undistributedUnrecognizedRevenue: 50
                recognizedRevenue: 0
                unrecognizedRevenue: 50
                currency: USD
                notes: null
                createdOn: '2014-01-21 13:59:25'
                updatedOn: '2014-01-21 13:59:25'
                accountId: 2c92c0f8439770960143b2141f5a584e
                subscriptionId: 2c92c0f943977b4f0143b23487994327
                subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
                linkedTransactionId: 2c92c094439782460143b62c2ee90f5a
                linkedTransactionType: InvoiceItem
                referenceId: null
                revenueScheduleDate: '2014-01-21'
                cf_phases__c: Phase 1
                cf_project__c: project A
                revenueItems:
                - accountingPeriodName: Open-Ended
                  isAccountingPeriodClosed: false
                  amount: 50
                  currency: USD
                  accountingPeriodStartDate: '2013-12-11'
                  accountingPeriodEndDate: null
                  recognizedRevenueAccountingCodeType: null
                  recognizedRevenueAccountingCode: null
                  deferredRevenueAccountingCodeType: null
                  deferredRevenueAccountingCode: null
              - number: RS-00000290
                recognitionRuleName: Recognize upon invoicing
                amount: 50
                undistributedUnrecognizedRevenue: 50
                recognizedRevenue: 0
                unrecognizedRevenue: 50
                currency: USD
                notes: null
                createdOn: '2014-01-21 13:59:25'
                updatedOn: '2014-01-21 13:59:25'
                accountId: 2c92c0f8439770960143b2141f5a584e
                subscriptionId: 2c92c0f943977b4f0143b23487994327
                subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
                linkedTransactionId: 2c92c094439782460143b62c2ee60f59
                linkedTransactionNumber: INV00000838
                linkedTransactionType: InvoiceItem
                referenceId: null
                revenueScheduleDate: '2014-01-21'
                cf_phases__c: Phase 1
                cf_project__c: project A
                revenueItems:
                - accountingPeriodName: Open-Ended
                  isAccountingPeriodClosed: false
                  amount: 50
                  currency: USD
                  accountingPeriodStartDate: '2013-12-11'
                  accountingPeriodEndDate: null
                  recognizedRevenueAccountingCodeType: null
                  recognizedRevenueAccountingCode: null
                  deferredRevenueAccountingCodeType: null
                  deferredRevenueAccountingCode: null
              nextPage: https://apisandbox-api.zuora.com/rest/v1/revenue-schedules/subscription-charges/2c92c0f943977b4f0143b23487ed432e?page=2&pageSize=8
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRSDetailsByChargeType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-schedules/subscription-charges/{charge-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/subscription-charges/{charge-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods:
    put:
      summary: Distribute revenue across accounting periods
      operationId: PUT_RevenueAcrossAP
      description: This REST API reference describes how to distribute revenue by
        specifying the revenue schedule number. Request and response field descriptions
        and sample code are provided.
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTAllocateManuallyType'
      responses:
        '200':
          examples:
            application/json:
              revenueEventNumber: RE-00000326
              success: true
          description: ''
          schema:
            $ref: '#/definitions/PUTRevenueScheduleResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\"\
          : \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\"\
          : \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"\
          revenueDistributions\": [\n        {\n            \"accountingPeriodName\"\
          : \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n    \
          \    {\n            \"accountingPeriodName\": \"Feb'2013\", \n         \
          \   \"newAmount\": \"600\"\n        }\n    ]\n}' \"https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\"\
          : \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\"\
          : \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\"\
          , \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"\
          revenueDistributions\": [\n        {\n            \"accountingPeriodName\"\
          : \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n    \
          \    {\n            \"accountingPeriodName\": \"Feb'2013\", \n         \
          \   \"newAmount\": \"600\"\n        }\n    ]\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-across-accounting-periods");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"cf_project__c\": \"project A\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"Manually distribute revenue for Phase 1\", \n    \"revenueDistributions\": [\n        {\n            \"accountingPeriodName\": \"Jan'2013\", \n            \"newAmount\": \"500\"\n        }, \n        {\n            \"accountingPeriodName\": \"Feb'2013\", \n            \"newAmount\": \"600\"\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/{rs-number}/distribute-revenue-on-specific-date:
    put:
      summary: Distribute revenue on a specific date
      operationId: PUT_RevenueSpecificDate
      description: This REST API reference describes how to distribute revenue on
        a specific recognition date. Request and response field descriptions and sample
        code are provided.
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTSpecificDateAllocationType'
      responses:
        '200':
          examples:
            application/json:
              revenueEventNumber: RE-00000326
              success: true
          description: ''
          schema:
            $ref: '#/definitions/PUTRevenueScheduleResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"amount\"\
          : \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\"\
          : \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase\
          \ 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\"\
          : \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted\
          \ by customer\"\n}' \"https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"amount\"\
          : \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\"\
          : \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase\
          \ 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\"\
          : \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted\
          \ by customer\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo\
          \ $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-on-specific-date");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"amount\": \"1000.00\", \n    \"distributeOn\": \"2016-02-03\", \n    \"distributionType\": \"specific date (delta fixed amount)\", \n    \"eventNumber__c\": \"phase 2\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"service delivered and accepted by customer\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/{rs-number}/distribute-revenue-with-date-range:
    put:
      summary: Distribute revenue by recognition start and end dates
      operationId: PUT_RevenueByRecognitionStartandEndDates
      description: This REST API reference describes how to distribute revenue by
        specifying the recognition start and end dates. Request and response field
        descriptions and sample code are provided.
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: "Revenue schedule number. Specify the revenue schedule whose\
          \ revenue you want to distribute.\n  \nThe revenue schedule number is always\
          \ prefixed with \"RS\", for example, \"RS-00000001\".\n"
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTRSTermType'
      responses:
        '200':
          examples:
            application/json:
              revenueEventNumber: RE-00000326
              success: true
          description: ''
          schema:
            $ref: '#/definitions/PUTRevenueScheduleResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\"\
          : \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n  \
          \  \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\":\
          \ \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue\
          \ by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\"\
          : \"2015-12-1\"\n}' \"https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\"\
          : \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n  \
          \  \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\":\
          \ \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue\
          \ by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\"\
          : \"2015-12-1\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo\
          \ $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-schedules/{rs-number}/distribute-revenue-with-date-range", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/distribute-revenue-with-date-range");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cf_phases__c\": \"Phase 2\", \n    \"distributionType\": \"Daily distribution\", \n    \"eventType\": \"Revenue Distributed\", \n    \"eventTypeSystemId\": \"RevenueDistributed__z\", \n    \"notes\": \"manual distribute revenue by usage\", \n    \"recognitionEnd\": \"2015-12-31\", \n    \"recognitionStart\": \"2015-12-1\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /revenue-schedules/{rs-number}:
    delete:
      summary: Delete revenue schedule
      operationId: DELETE_RS
      description: |
        This REST API reference describes how to delete a revenue schedule by specifying its revenue schedule number
        ## Prerequisites
        You must have the Delete Custom Revenue Schedule permissions in Zuora Finance.
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: |2

          Revenue schedule number of the revenue schedule you want to delete, for example, RS-00000256. To be deleted, the revenue schedule:
          * Must be using a custom unlimited recognition rule.
          * Cannot have any revenue in a closed accounting period.
          * Cannot be included in a summary journal entry.
          * Cannot have a revenue schedule date in a closed accounting period.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-schedules/{rs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/revenue-schedules/{rs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    get:
      summary: Get revenue schedule details
      operationId: GET_RS
      description: This REST API reference describes how to get the details of a revenue
        schedule by specifying the revenue schedule number. Request and response field
        descriptions and sample code are provided.
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
      responses:
        '200':
          examples:
            application/json:
              number: RS-00000008
              recognitionRuleName: Recognize upon invoicing
              amount: 50
              undistributedUnrecognizedRevenue: -10
              recognizedRevenue: 0
              unrecognizedRevenue: 50
              currency: USD
              notes: change recognition term
              createdOn: '2014-01-20 16:36:45'
              updatedOn: '2014-01-28 17:05:52'
              accountId: 2c92c0f8439770960143b2141f5a584e
              subscriptionId: 2c92c0f943977b4f0143b23487994327
              subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
              linkedTransactionId: 2c92c095439782cd0143b239aa234cf5
              linkedTransactionType: InvoiceItem
              referenceId: null
              revenueScheduleDate: '2014-01-20'
              cf_phases__c: Phase 1
              revenueItems:
              - accountingPeriodName: Nov'2013
                isAccountingPeriodClosed: true
                amount: 60
                currency: USD
                accountingPeriodStartDate: '2013-10-01'
                accountingPeriodEndDate: '2013-10-31'
                recognizedRevenueAccountingCodeType: 'Revenue: Sales'
                recognizedRevenueAccountingCode: MONTHLY RECURRING CHARGE
                deferredRevenueAccountingCodeType: 'Liabilities: Deferred Revenue'
                deferredRevenueAccountingCode: MONTHLY RECURRING CHARGE
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: -10
                currency: USD
                accountingPeriodStartDate: '2013-11-01'
                accountingPeriodEndDate: null
                recognizedRevenueAccountingCodeType: 'Revenue: Sales'
                recognizedRevenueAccountingCode: MONTHLY RECURRING CHARGE
                deferredRevenueAccountingCodeType: 'Liabilities: Sales'
                deferredRevenueAccountingCode: MONTHLY RECURRING CHARGE
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRSDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-schedules/{rs-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-schedules/{rs-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/:
    get:
      summary: Get a revenue schedule by invoice item adjustment
      operationId: GET_RSbyInvoiceItemAdjustment
      description: 'This REST API reference describes how to get the details of a
        revenue schedule by specifying a valid invoice item adjustment identifier.
        Request and response field descriptions and sample code are provided.

        '
      tags:
      - Revenue Schedules
      parameters:
      - name: invoice-item-adj-id
        in: path
        required: true
        type: string
        description: ID or number of the Invoice Item Adjustment, for example, e20b07fd416dcfcf0141c81164fd0a72.
      responses:
        '200':
          examples:
            application/json:
              number: RS-00000273
              recognitionRuleName: Recognize upon invoicing
              amount: -25
              undistributedUnrecognizedRevenue: -25
              recognizedRevenue: 0
              unrecognizedRevenue: -25
              currency: USD
              notes: null
              createdOn: '2014-01-21 13:52:38'
              updatedOn: '2014-01-21 13:52:38'
              accountId: 2c92c0f8439770960143b2141f5a584e
              subscriptionId: 2c92c0f943977b4f0143b23487994327
              subscriptionChargeId: 2c92c0f943977b4f0143b23487ed432e
              linkedTransactionId: 2c92c0f8439770a40143b6ca76df205a
              linkedTransactionNumber: IIA-00000070
              linkedTransactionType: InvoiceItemAdjustment
              referenceId: null
              revenueScheduleDate: '2014-01-21'
              cf_phases__c: Phase 1
              cf_project__c: project A
              revenueItems:
              - accountingPeriodName: Open-Ended
                isAccountingPeriodClosed: false
                amount: -25
                currency: USD
                accountingPeriodStartDate: '2013-12-11'
                accountingPeriodEndDate: null
                recognizedRevenueAccountingCodeType: null
                recognizedRevenueAccountingCode: null
                deferredRevenueAccountingCodeType: null
                deferredRevenueAccountingCode: null
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRSDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/invoice-item-adjustments/{invoice-item-adj-id}/");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /revenue-schedules/{rs-number}/basic-information:
    put:
      summary: Update revenue schedule basic information
      operationId: PUT_RSBasicInfo
      description: 'This REST API reference describes how to get basic information
        of a revenue schedule by specifying the revenue schedule number. Request and
        response field descriptions and sample code are provided.

        '
      tags:
      - Revenue Schedules
      parameters:
      - name: rs-number
        in: path
        required: true
        type: string
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTRSBasicInfoType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_phases__c\"\
          : \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\"\
          : \"Reference ID\"\n}' \"https://rest.zuora.com/v1/revenue-schedules/{rs-number}/basic-information\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/revenue-schedules/{rs-number}/basic-information');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_phases__c\"\
          : \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\"\
          : \"Reference ID\"\n}');\n\ntry {\n  $response = $request->send();\n\n \
          \ echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/basic-information")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/revenue-schedules/{rs-number}/basic-information", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/basic-information")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/revenue-schedules/{rs-number}/basic-information");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cf_phases__c\": \"Phase 1\", \n    \"notes\": \"change recognition term\", \n    \"referenceId\": \"Reference ID\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /rsa-signatures:
    post:
      summary: Generate RSA signature
      operationId: POST_RSASignatures
      description: "\nThe REST API used in Payment Pages 2.0 are CORS (Cross-Origin\
        \ Resource Sharing) enabled and therefore requires a digital signature. The\
        \ POST rsa_signatures call generates and returns the required digital signature\
        \ and token for a Payment Pages 2.0 form. You need to pass the generated signature\
        \ to your client for it to access Payment Pages 2.0. \n  \nThis REST service\
        \ should be used only when you implement Payment Pages 2.0. \n"
      tags:
      - RSA Signatures
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTRSASignatureType'
      responses:
        '200':
          examples:
            application/json:
              signature: VpCAFL2hHC2irxbhWYGLJmdBigjARsCStwHZiQ78z5LyVuBCFr2lkie0db/7E8n38MXaq12Ng5As5Qj+9Nhz6RBsSEWLod7c7hvwNI28OcgBZtcV/wscbWU69EP/+/XrQnF3ZUbHbqmcmhE8C/zNnc2zvHckfArroDW2HxxmATfMJS0xKUm5TrHi4tiILZVMYY1KIUqQTyuXV6uRWYzkqMkFkZDNCxSxf0XwzuBI/VOgTCmFZb0c3+bk/q6+7d/azFCrrg8C3dquCNJRfUeaBou+SLUa4TW3hV4rGd2zpvSrD/425x4qFNGV6JQ7wvIleIdrXU4qbh9nCmYoApMODA==
              token: E2BJEle7YrAlw93SjkaKthTmzMvXF341
              tenantId: '12270'
              key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTRSASignatureResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"method\"\
          : \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n \
          \   \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\
          \n}' \"https://rest.zuora.com/v1/rsa-signatures\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/rsa-signatures');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"method\"\
          : \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n \
          \   \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/rsa-signatures")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/rsa-signatures", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/rsa-signatures")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/rsa-signatures");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"method\": \"POST\", \n    \"pageId\": \"2c92c0f855e2b4630155ec9e6a1b6eec\", \n    \"uri\": \"https://apisandbox.zuora.com/apps/PublicHostedPageLite.do\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /rsa-signatures/decrypt:
    post:
      summary: Decrypt RSA signature
      operationId: POST_DecryptRSASignatures
      description: "\nThe REST API used in Payment Pages 2.0 are CORS (Cross-Origin\
        \ Resource Sharing) enabled and therefore requires a digital signature. You\
        \ use rsa_signatures to generate the required digital signature and token\
        \ for a Payment Pages 2.0 form, and then you use the decrypt REST service\
        \ to decrypt the signature to validate the signature and key.\n\nThis REST\
        \ service should be used only when you implement Payment Pages 2.0. \n"
      tags:
      - RSA Signatures
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTDecryptionType'
      responses:
        '200':
          examples:
            application/json:
              publicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB
              signature: BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==
              decryptedSignature: /apps/publichostedpagelite.do#12270#tpyeSbjfUdpZpY4EMSCy7CrupvuhIdvM#1473658419005#2c92c0f855e2b4630155ec9e6a1b6eec
              success: true
          description: ''
          schema:
            $ref: '#/definitions/POSTDecryptResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"method\"\
          : \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\"\
          , \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\
          \n}' \"https://rest.zuora.com/v1/rsa-signatures/decrypt\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/rsa-signatures/decrypt');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"method\"\
          : \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\"\
          , \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/rsa-signatures/decrypt")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/rsa-signatures/decrypt", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/rsa-signatures/decrypt")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/rsa-signatures/decrypt");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"method\": \"POST\", \n    \"publicKey\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB\", \n    \"signature\": \"BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /settings/finance/revenue-automation-start-date:
    get:
      summary: Get the revenue automation start date
      operationId: GET_RevenueAutomationStartDate
      description: 'This REST API reference describes how to get the revenue automation
        start date. Request and response field descriptions and sample code are provided.

        '
      tags:
      - Settings
      responses:
        '200':
          examples:
            application/json:
              startDate: '2012-02-01'
              updatedOn: '2013-09-11 22:49:18'
              updatedBy: MyCorpAdmin
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETRevenueStartDateSettingType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/settings/finance/revenue-automation-start-date"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/settings/finance/revenue-automation-start-date');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/settings/finance/revenue-automation-start-date")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/settings/finance/revenue-automation-start-date", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/settings/finance/revenue-automation-start-date")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/settings/finance/revenue-automation-start-date");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /subscriptions/preview:
    post:
      summary: Preview subscription
      operationId: POST_PreviewSubscription
      description: |
        The REST API reference describes how to create a new subscription in preview mode. This call does not require a valid customer account. It can be used to show potential new customers a preview of a subscription with complete details and charges before creating an account, or to let existing customers preview a subscription with all charges before committing.

        ## Notes
        - The response of the Preview Subscription call is based on the REST API minor version you set in the request header. The response structure might be different if you use different minor version numbers.


        - Default values for **customerAcceptanceDate** and **serviceActivationDate** are set as follows.

        |        | serviceActivationDate (SA) specified          | serviceActivationDate (SA) NOT specified  |
        | ------------- |:-------------:| -----:|
        | customerAcceptanceDate (CA) specified      | SA uses value in the request call; CA uses value in the request call| CA uses value in the request call;SA uses CE as default |
        | customerAcceptanceDate (CA) NOT specified      | SA uses value in the request call; CA uses SA as default |   SA and CA use CE as default |
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: "\nThe minor version of the Zuora REST API. \n\nYou only need\
          \ to set this parameter if you use the following fields:\n* targetDate\n\
          * includeExistingDraftDocItems\n* previewType\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions)\
          \ for more information. \n"
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTSubscriptionPreviewType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              contractedMrr: 100
              totalContractedValue: 277.4193548
              amount: 278.28
              amountWithoutTax: 278.28
              taxAmount: 0
              invoiceTargetDate: '2016-12-31'
              invoiceItems:
              - serviceStartDate: '2016-01-15'
                serviceEndDate: '2016-01-30'
                chargeAmount: 51.61
                chargeDescription: ''
                chargeName: recurring
                productName: restAPITest
                productRatePlanChargeId: 40289070576ad42f0157b24a62420918
                quantity: 1
                unitOfMeasure: ''
              - serviceStartDate: '2016-01-31'
                serviceEndDate: '2016-02-28'
                chargeAmount: 100
                chargeDescription: ''
                chargeName: recurring
                productName: restAPITest
                productRatePlanChargeId: 40289070576ad42f0157b24a62420918
                quantity: 1
                unitOfMeasure: ''
              - serviceStartDate: '2016-02-29'
                serviceEndDate: '2016-03-30'
                chargeAmount: 100
                chargeDescription: ''
                chargeName: recurring
                productName: restAPITest
                productRatePlanChargeId: 40289070576ad42f0157b24a62420918
                quantity: 1
                unitOfMeasure: ''
              - serviceStartDate: '2016-03-31'
                serviceEndDate: '2016-04-07'
                chargeAmount: 26.67
                chargeDescription: ''
                chargeName: recurring
                productName: restAPITest
                productRatePlanChargeId: 40289070576ad42f0157b24a62420918
                quantity: 1
                unitOfMeasure: ''
          description: ''
          schema:
            $ref: '#/definitions/POSTSubscriptionPreviewResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"contractEffectiveDate\"\
          : \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\"\
          : \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\"\
          : {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n    \
          \        \"city\": \"Walnut Creek\", \n            \"country\": \"United\
          \ States\", \n            \"county\": \"Contra Consta\", \n            \"\
          state\": \"California\", \n            \"zipCode\": \"94549\"\n        },\
          \ \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\"\
          : [\n        {\n            \"chargeOverrides\": [\n                {\n\
          \                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\"\
          , \n                    \"quantity\": 100\n                }\n         \
          \   ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\
          \n        }\n    ], \n    \"termType\": \"TERMED\"\n}' \"https://rest.zuora.com/v1/subscriptions/preview\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/preview');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"contractEffectiveDate\"\
          : \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\"\
          : \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\"\
          : {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n    \
          \        \"city\": \"Walnut Creek\", \n            \"country\": \"United\
          \ States\", \n            \"county\": \"Contra Consta\", \n            \"\
          state\": \"California\", \n            \"zipCode\": \"94549\"\n        },\
          \ \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\"\
          : [\n        {\n            \"chargeOverrides\": [\n                {\n\
          \                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\"\
          , \n                    \"quantity\": 100\n                }\n         \
          \   ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\
          \n        }\n    ], \n    \"termType\": \"TERMED\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/preview")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/subscriptions/preview", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/preview")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/preview");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"contractEffectiveDate\": \"2013-1-15\", \n    \"initialTerm\": 12, \n    \"initialTermPeriodType\": \"Week\", \n    \"invoiceTargetDate\": \"2013-12-31\", \n    \"previewAccountInfo\": {\n        \"billCycleDay\": 31, \n        \"billToContact\": {\n            \"city\": \"Walnut Creek\", \n            \"country\": \"United States\", \n            \"county\": \"Contra Consta\", \n            \"state\": \"California\", \n            \"zipCode\": \"94549\"\n        }, \n        \"currency\": \"USD\"\n    }, \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"quantity\": 100\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subscriptions:
    post:
      summary: Create subscription
      operationId: POST_Subscription
      description: |
        This REST API reference describes how to create a new subscription for an existing customer account.

        ## Notes
        If invoiceCollect is `true`, the call will not return success = `true` unless the subscription, invoice, and payment are all successful.

        Default values for **customerAcceptanceDate** and **serviceActivationDate** are set as follows.

        |        | serviceActivationDate(SA) specified          | serviceActivationDate (SA) NOT specified  |
        | ------------- |:-------------:| -----:|
        | customerAcceptanceDate (CA) specified| SA uses value in the request call; CA uses value in the request call| CA uses value in the request call;SA uses CE as default |
        | customerAcceptanceDate (CA) NOT specified      | SA uses value in the request call; CA uses SA as default |   SA and CA use CE as default |
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ field.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTSubscriptionType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              subscriptionId: 402890fc4fa094d5014fa0a4aa78001d
              subscriptionNumber: A-S00000041
              contractedMrr: 1950
              totalContractedValue: 6227.41935465
          description: ''
          schema:
            $ref: '#/definitions/POSTSubscriptionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountKey\"\
          : \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n\
          \    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"\
          12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true,\
          \ \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\"\
          : \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\"\
          , \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\"\
          , \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\"\
          : [\n                {\n                    \"billCycleDay\": \"5\", \n\
          \                    \"billCycleType\": \"SpecificDayofMonth\", \n     \
          \               \"billingPeriodAlignment\": \"AlignToCharge\", \n      \
          \              \"billingTiming\": \"IN_ARREARS\", \n                   \
          \ \"description\": \"This is rate plan charge description\", \n        \
          \            \"myCustomField__c\": \"test\", \n                    \"number\"\
          : \"TestCharge\", \n                    \"price\": 12.01, \n           \
          \         \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\"\
          , \n                    \"triggerDate\": \"2015-09-01\", \n            \
          \        \"triggerEvent\": \"SpecificDate\"\n                }\n       \
          \     ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\
          \n        }\n    ], \n    \"termType\": \"TERMED\"\n}' \"https://rest.zuora.com/v1/subscriptions\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountKey\"\
          : \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n\
          \    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"\
          12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true,\
          \ \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\"\
          : \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\"\
          , \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\"\
          , \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\"\
          : [\n                {\n                    \"billCycleDay\": \"5\", \n\
          \                    \"billCycleType\": \"SpecificDayofMonth\", \n     \
          \               \"billingPeriodAlignment\": \"AlignToCharge\", \n      \
          \              \"billingTiming\": \"IN_ARREARS\", \n                   \
          \ \"description\": \"This is rate plan charge description\", \n        \
          \            \"myCustomField__c\": \"test\", \n                    \"number\"\
          : \"TestCharge\", \n                    \"price\": 12.01, \n           \
          \         \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\"\
          , \n                    \"triggerDate\": \"2015-09-01\", \n            \
          \        \"triggerEvent\": \"SpecificDate\"\n                }\n       \
          \     ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\
          \n        }\n    ], \n    \"termType\": \"TERMED\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true, \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true, \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/subscriptions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true, \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountKey\": \"A00001115\", \n    \"autoRenew\": true, \n    \"collect\": false, \n    \"contractEffectiveDate\": \"2015-02-1\", \n    \"initialTerm\": \"12\", \n    \"initialTermPeriodType\": \"Week\", \n    \"invoice\": true, \n    \"invoiceTargetDate\": \"2015-12-31\", \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test POST subscription from z-ruby-sdk\", \n    \"renewalTerm\": \"3\", \n    \"renewalTermPeriodType\": \"Week\", \n    \"subscribeToRatePlans\": [\n        {\n            \"chargeOverrides\": [\n                {\n                    \"billCycleDay\": \"5\", \n                    \"billCycleType\": \"SpecificDayofMonth\", \n                    \"billingPeriodAlignment\": \"AlignToCharge\", \n                    \"billingTiming\": \"IN_ARREARS\", \n                    \"description\": \"This is rate plan charge description\", \n                    \"myCustomField__c\": \"test\", \n                    \"number\": \"TestCharge\", \n                    \"price\": 12.01, \n                    \"productRatePlanChargeId\": \"ff8080811ca15d19011cddad8c953b53\", \n                    \"triggerDate\": \"2015-09-01\", \n                    \"triggerEvent\": \"SpecificDate\"\n                }\n            ], \n            \"productRatePlanId\": \"ff8080811ca15d19011cdda9b0ad3b51\"\n        }\n    ], \n    \"termType\": \"TERMED\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subscriptions/accounts/{account-key}:
    get:
      summary: Get subscriptions by account
      operationId: GET_SubscriptionsByAccount
      description: |
        Retrieves all subscriptions associated with the specified account. Zuora only returns the latest version of the subscriptions.

        Subscription data is returned in reverse chronological order based on `updatedDate`.
      tags:
      - Subscriptions
      parameters:
      - name: account-key
        in: path
        description: |2

          Possible values are:
          * an account number
          * an account ID
        required: true
        type: string
      - name: charge-detail
        in: query
        description: "The segmented rate plan charges.\n\nWhen an amendment results\
          \ in a change to a charge, Zuora creates a segmented rate plan charge. Use\
          \ this field to track segment charges.\n\nPossible values are:\n\n* `last-segment`:\
          \ (Default) The last rate plan charge on the subscription. The last rate\
          \ plan charge is the last one in the order of time on the subscription rather\
          \ than the most recent updated charge on the subscription.\n* `current-segment`:\
          \ The segmented charge that is active on today\u2019s date (**effectiveStartDate**\
          \ <= today\u2019s date < **effectiveEndDate**).\n* `all-segments`: All the\
          \ segmented charges. The `chargeSegments` field is returned in the response.\
          \ The `chargeSegments` field contains an array of the charge information\
          \ for all the charge segments.\n* `specific-segment&as-of-date=date`: The\
          \ segmented charge that is active on a date you specified (**effectiveStartDate**\
          \ <= specific date < **effectiveEndDate**). The format of the date is yyyy-mm-dd.\n"
        required: false
        type: string
      responses:
        '200':
          examples:
            application/json:
              subscriptions:
              - id: 402890314fcfc93e014fd051d3c50022
                accountId: 402890314fcf05a0014fcf087e690003
                accountNumber: A00000001
                accountName: MyAcctName
                subscriptionNumber: A-S00000003
                termType: TERMED
                invoiceSeparately: 'false'
                contractEffectiveDate: '2015-09-15'
                serviceActivationDate: '2015-09-15'
                customerAcceptanceDate: '2015-09-15'
                subscriptionStartDate: '2015-09-15'
                termStartDate: '2015-09-15'
                termEndDate: '2019-11-15'
                initialTerm: 12
                initialTermPeriodType: Week
                currentTerm: 12
                currentTermPeriodType: Week
                autoRenew: false
                renewalSetting: RENEW_WITH_SPECIFIC_TERM
                renewalTerm: 0
                renewalTermPeriodType: Week
                contractedMrr: 100
                totalContractedValue: 1200
                notes: ''
                status: Active
                QuoteNumber__QT: null
                QuoteBusinessType__QT: null
                OpportunityCloseDate__QT: null
                OpportunityName__QT: null
                CpqBundleJsonId__QT: null
                QuoteType__QT: null
                ratePlans:
                - id: 402890314fcfc93e014fd051d3f7002d
                  productId: 402890314fcb13c9014fcb22a2230002
                  productName: Volume Product
                  productSku: SKU-00000022
                  productRatePlanId: 402890314fcb13c9014fcb22d38b0004
                  ratePlanName: New Rate Plan
                  ratePlanCharges:
                  - id: 8a8082e65991b707015a16675dc66ac6
                    originalChargeId: 402890314fcfc93e014fd051d40d002e
                    productRatePlanChargeId: 402890314fcb13c9014fcb2382b50011
                    number: C-00000002
                    name: New Component
                    type: Recurring
                    model: Volume
                    uom: Each
                    version: 1
                    pricingSummary: USD100
                    priceChangeOption: null
                    priceIncreasePercentage: null
                    currency: USD
                    price: 100
                    tiers: null
                    includedUnits: null
                    overagePrice: null
                    discountPercentage: null
                    discountAmount: null
                    applyDiscountTo: null
                    discountLevel: null
                    billingDay: DefaultFromCustomer
                    listPriceBase: Per_Billing_Period
                    billingPeriod: Month
                    specificBillingPeriod: null
                    billingTiming: IN_ADVANCE
                    billingPeriodAlignment: AlignToCharge
                    quantity: 1
                    smoothingModel: null
                    numberOfPeriods: null
                    overageCalculationOption: null
                    overageUnusedUnitsCreditOption: null
                    unusedUnitsCreditRates: null
                    usageRecordRatingOption: null
                    segment: 1
                    effectiveStartDate: '2015-09-15'
                    effectiveEndDate: '2019-11-15'
                    processedThroughDate: null
                    chargedThroughDate: null
                    done: false
                    triggerDate: null
                    triggerEvent: ContractEffective
                    endDateCondition: One_Time
                    upToPeriodsType: null
                    upToPeriods: null
                    specificEndDate: null
                    mrr: 100
                    dmrc: 100
                    tcv: 1200
                    dtcv: 1200
                    description: ''
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETSubscriptionWrapper'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/subscriptions/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/subscriptions/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/subscriptions/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /subscriptions/{subscription-key}:
    put:
      summary: Update subscription
      operationId: PUT_Subscription
      description: |
        Use this call to make the following kinds of changes to a subscription:
          * Add a note
          * Change the renewal term or auto-renewal flag
          * Change the term length or change between evergreen and termed
          * Add a new product rate plan
          * Remove an existing subscription rate plan
          * Change the quantity or price of an existing subscription rate plan

        ## Notes
        * The Update Subscription call creates a new subscription, which has the old subscription number but a new subscription ID.  The old subscription is canceled but remains in the system.
        * In one request, this call can make:
          * Up to 9 combined add, update, and remove changes
          * No more than 1 change to terms & conditions
        * Updates are performed in the following sequence:
          1. First change the notes on the existing subscription, if requested.
          2. Then change the terms and conditions, if requested.
          3. Then perform the remaining amendments based upon the effective dates specified. If multiple amendments have the same contract-effective dates, then execute adds before updates, and updates before removes.
        * The update operation is atomic. If any of the updates fails, the entire operation is rolled back.
        * The response of the Update Subscription call is based on the REST API minor version you set in the request header. The response structure might be different if you use different minor version numbers.

        ## Override a Tiered Price
        There are two ways you override a tiered price:

        * Override a specific tier number
        For example: `tiers[{tier:1,price:8},{tier:2,price:6}]`

        * Override the entire tier structure
        For example:  `tiers[{tier:1,price:8,startingUnit:1,endingUnit:100,priceFormat:"FlatFee"},
        {tier:2,price:6,startingUnit:101,priceFormat:"FlatFee"}]`

        If you just override a specific tier, do not include the `startingUnit` field in the request.
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: "\nThe minor version of the Zuora REST API. \n\nYou only need\
          \ to set this parameter if you use the following fields:\n* collect\n* invoice\n\
          * includeExistingDraftDocItems\n* previewType\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions)\
          \ for more information.\n"
      - name: subscription-key
        in: path
        required: true
        type: string
        description: Subscription number or ID.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTSubscriptionType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              subscriptionId: 4028bb83510f8ed7015114a503cf0373
              totalDeltaMrr: 100.0
              totalDeltaTcv: 4867.7419355
          description: ''
          schema:
            $ref: '#/definitions/PUTSubscriptionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"autoRenew\"\
          : false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n   \
          \ \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"\
          myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription\
          \ from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\"\
          , \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\"\
          , \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n     \
          \       \"chargeUpdateDetails\": [\n                {\n                \
          \    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\
          \n                }\n            ], \n            \"contractEffectiveDate\"\
          : \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\
          \n        }\n    ]\n}' \"https://rest.zuora.com/v1/subscriptions/{subscription-key}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"autoRenew\"\
          : false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n   \
          \ \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"\
          myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription\
          \ from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\"\
          , \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\"\
          , \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n     \
          \       \"chargeUpdateDetails\": [\n                {\n                \
          \    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\
          \n                }\n            ], \n            \"contractEffectiveDate\"\
          : \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\
          \n        }\n    ]\n}');\n\ntry {\n  $response = $request->send();\n\n \
          \ echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/subscriptions/{subscription-key}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"autoRenew\": false, \n    \"collect\": false, \n    \"currentTerm\": \"10\", \n    \"currentTermPeriodType\": \"Month\", \n    \"invoice\": true, \n    \"myCustomField__c\": \"test\", \n    \"notes\": \"Test UPDATE subscription from z-ruby-sdk\", \n    \"renewalSetting\": \"RENEW_WITH_SPECIFIC_TERM\", \n    \"renewalTerm\": \"4\", \n    \"renewalTermPeriodType\": \"Month\", \n    \"termType\": \"TERMED\", \n    \"update\": [\n        {\n            \"chargeUpdateDetails\": [\n                {\n                    \"quantity\": 12, \n                    \"ratePlanChargeId\": \"2c92c8f83dcbd8b1013dcce0eb510075\"\n                }\n            ], \n            \"contractEffectiveDate\": \"2013-04-28\", \n            \"ratePlanId\": \"2c92c8f83dcbd8b1013dcce0ea7e006f\"\n        }\n    ]\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    get:
      summary: Get subscriptions by key
      operationId: GET_SubscriptionsByKey
      description: 'This REST API reference describes how to retrieve detailed information
        about a specified subscription in the latest version.

        '
      tags:
      - Subscriptions
      parameters:
      - name: subscription-key
        in: path
        description: |
          Possible values are:
            * a subscription number
            * a subscription ID
        required: true
        type: string
      - name: charge-detail
        in: query
        description: "\nThe segmented rate plan charges. When an amendment results\
          \ in a change to a charge, Zuora creates a segmented rate plan charge. Use\
          \ this field to track segment charges.\n\nPossible values are:\n\n * __last-segment__:\
          \ (Default) The last rate plan charge on the subscription. The last rate\
          \ plan charge is the last one in the order of time on the subscription rather\
          \ than the most recent changed charge on the subscription.\n * __current-segment__:\
          \ The segmented charge that is active on today\u2019s date (effectiveStartDate\
          \ <= today\u2019s date < effectiveEndDate).\n \n * __all-segments__: All\
          \ the segmented charges.\n\n * __specific-segment&as-of-date=date__: The\
          \ segmented charge that is active on a date you specified (effectiveStartDate\
          \ <= specific date < effectiveEndDate). The format of the date is yyyy-mm-dd.\n"
        required: false
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c9081a03c63c94c013c687b864e0195
              accountId: 2c9081a03c63c94c013c66688a2c00bf
              accountNumber: RestAPI
              accountName: RestAPI
              subscriptionNumber: A-S00000004
              termType: TERMED
              contractEffectiveDate: '2012-02-01'
              serviceActivationDate: '2012-02-01'
              customerAcceptanceDate: '2012-02-01'
              subscriptionStartDate: '2012-02-01'
              termStartDate: '2012-02-01'
              termEndDate: '2013-02-01'
              initialTermPeriodType: Week
              currentTerm: 12
              currentTermPeriodType: Week
              autoRenew: false
              renewalSetting: RENEW_WITH_SPECIFIC_TERM
              renewalTerm: 0
              renewalTermPeriodType: Week
              contractedMrr: 26.67
              totalContractedValue: 404.0
              notes: ''
              status: Active
              ratePlans:
              - id: 2c9081a03c63c94c013c687b868901a4
                productId: 2c9081a03c63c94c013c66499ef0001b
                productName: OneTime
                productSku: SKU-00000022
                productRatePlanId: 2c9081a03c63c94c013c665102e5003a
                ratePlanName: OT_Tiered
                ratePlanCharges:
                - id: 2c9081a03c63c94c013c687b868901a5
                  originalChargeId: 2c9081a03c63c94c013c687a92d70175
                  productRatePlanChargeId: 2c9081a03c63c94c013c6651d677003c
                  number: C-00000010
                  name: OT_Tiered
                  type: OneTime
                  model: Tiered
                  uom: Each
                  version: 1
                  pricingSummary: '0 to 10 Each: USD20 flat fee;  11 Each or more:
                    USD4/Each'
                  priceChangeOption: null
                  priceIncreasePercentage: null
                  currency: USD
                  price: null
                  tiers:
                  - tier: 1
                    startingUnit: 0E-9
                    endingUnit: 10.0
                    price: 20.0
                    priceFormat: FlatFee
                  - tier: 2
                    startingUnit: 11.0
                    endingUnit: null
                    price: 4.0
                    priceFormat: PerUnit
                  includedUnits: null
                  overagePrice: null
                  discountPercentage: null
                  discountAmount: null
                  applyDiscountTo: null
                  discountLevel: null
                  billingDay: null
                  listPriceBase: null
                  billingPeriod: null
                  specificBillingPeriod: null
                  billingTiming: null
                  billingPeriodAlignment: null
                  quantity: 11.0
                  smoothingModel: null
                  numberOfPeriods: null
                  overageCalculationOption: null
                  overageUnusedUnitsCreditOption: null
                  unusedUnitsCreditRates: null
                  usageRecordRatingOption: null
                  segment: 1
                  effectiveStartDate: '2012-02-01'
                  effectiveEndDate: '2012-02-02'
                  processedThroughDate: '2012-02-02'
                  chargedThroughDate: '2012-02-02'
                  done: true
                  triggerDate: null
                  triggerEvent: ContractEffective
                  endDateCondition: One_Time
                  upToPeriodsType: null
                  upToPeriods: null
                  specificEndDate: null
                  mrr: null
                  dmrc: null
                  tcv: 24.0
                  dtcv: 24.0
                  description: ''
                  pecker__c: good
                  point__c: '6'
          description: ''
          schema:
            $ref: '#/definitions/GETSubscriptionTypeWithSuccess'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/subscriptions/{subscription-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/subscriptions/{subscription-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /subscriptions/{subscription-key}/renew:
    put:
      summary: Renew subscription
      operationId: PUT_RenewSubscription
      description: 'Renews a termed subscription using existing renewal terms.

        '
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ field.
      - name: subscription-key
        in: path
        required: true
        type: string
        description: Subscription number or ID
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTRenewSubscriptionType'
      responses:
        '200':
          examples:
            application/json:
              termStartDate: '2014-02-01'
              success: true
              termEndDate: '2014-05-01'
              subscriptionId: 2c92c8f83dcbd8b1013dcce0f09100a5
          description: ''
          schema:
            $ref: '#/definitions/PUTRenewSubscriptionResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\"\
          : false, \n    \"invoice\": true\n}' \"https://rest.zuora.com/v1/subscriptions/{subscription-key}/renew\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}/renew');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\"\
          : false, \n    \"invoice\": true\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"collect\": false, \n    \"invoice\": true\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}/renew")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"collect\": false, \n    \"invoice\": true\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/subscriptions/{subscription-key}/renew", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}/renew")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"collect\": false, \n    \"invoice\": true\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}/renew");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"collect\": false, \n    \"invoice\": true\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subscriptions/{subscription-key}/cancel:
    put:
      summary: Cancel subscription
      operationId: PUT_CancelSubscription
      description: 'This REST API reference describes how to cancel an active subscription.

        '
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ field.
      - name: subscription-key
        in: path
        required: true
        type: string
        description: Subscription number or ID. Subscription status must be `Active`.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTSubscriptionCancellationType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              subscriptionId: 8a8082c453cd2a620154efc7bba0350e
              cancelledDate: '2019-05-31'
              totalDeltaMrr: 0
              totalDeltaTcv: -703.2258065
              invoiceId: 8a8082c453cd2a620153e426c7eb78b3
          description: ''
          schema:
            $ref: '#/definitions/POSTSubscriptionCancellationResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cancellationEffectiveDate\"\
          : \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n   \
          \ \"collect\": false, \n    \"invoice\": true\n}' \"https://rest.zuora.com/v1/subscriptions/{subscription-key}/cancel\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}/cancel');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cancellationEffectiveDate\"\
          : \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n   \
          \ \"collect\": false, \n    \"invoice\": true\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"invoice\": true\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}/cancel")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"invoice\": true\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/subscriptions/{subscription-key}/cancel", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}/cancel")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"invoice\": true\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}/cancel");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cancellationEffectiveDate\": \"2019-05-31\", \n    \"cancellationPolicy\": \"SpecificDate\", \n    \"collect\": false, \n    \"invoice\": true\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subscriptions/{subscription-key}/resume:
    put:
      summary: Resume subscription
      operationId: PUT_ResumeSubscription
      description: "This REST API reference describes how to resume a suspended subscription.\
        \ \n\nThis feature is in **Limited Availability**. If you wish to have access\
        \ to the feature, submit a request at [Zuora Global Support](http://suport.zuora.com).\
        \ \n"
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ field.
      - name: subscription-key
        in: path
        required: true
        type: string
        description: Subscription number or ID. Subscription status must be Active.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTSubscriptionResumeType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              subscriptionId: 8a8082c4539c5bcc0153a752f9c87094
              resumeDate: '2019-10-01'
              termEndDate: '2020-01-31'
              totalDeltaTcv: 396.7741935
          description: ''
          schema:
            $ref: '#/definitions/PUTSubscriptionResumeResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\"\
          : false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\"\
          : true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\"\
          , \n    \"resumeSpecificDate\": \"2019-10-01\"\n}' \"https://rest.zuora.com/v1/subscriptions/{subscription-key}/resume\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}/resume');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\"\
          : false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\"\
          : true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\"\
          , \n    \"resumeSpecificDate\": \"2019-10-01\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}/resume")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/subscriptions/{subscription-key}/resume", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}/resume")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}/resume");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-10-01\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /subscriptions/{subscription-key}/suspend:
    put:
      summary: Suspend subscription
      operationId: PUT_SuspendSubscription
      description: "This REST API reference describes how to suspend an active subscription.\
        \ \n\nThis feature is in **Limited Availability**. If you wish to have access\
        \ to the feature, submit a request at [Zuora Global Support](http://suport.zuora.com).\n"
      tags:
      - Subscriptions
      parameters:
      - name: zuora-version
        in: header
        required: false
        type: string
        description: |-
          The minor version of the Zuora REST API.
          You only need to set this parameter if you use the __collect__ or __invoice__ field.
      - name: subscription-key
        in: path
        required: true
        type: string
        description: Subscription number or ID. Subscription status must be Active.
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUTSubscriptionSuspendType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              subscriptionId: 8a8082c4539c5bcc0153a658a9636fcc
              suspendDate: '2019-05-01'
              resumeDate: '2016-06-01'
              termEndDate: '2020-02-01'
              totalDeltaTcv: -896.6666667
              invoiceId: 8a8082c453bb061f0153c529bc921b4b
          description: ''
          schema:
            $ref: '#/definitions/PUTSubscriptionSuspendResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"collect\"\
          : false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\"\
          : true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\"\
          : \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n   \
          \ \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"\
          suspendPolicy\": \"FixedPeriodsFromToday\"\n}' \"https://rest.zuora.com/v1/subscriptions/{subscription-key}/suspend\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/subscriptions/{subscription-key}/suspend');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"collect\"\
          : false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\"\
          : true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\"\
          : \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n   \
          \ \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"\
          suspendPolicy\": \"FixedPeriodsFromToday\"\n}');\n\ntry {\n  $response =\
          \ $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/subscriptions/{subscription-key}/suspend")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/subscriptions/{subscription-key}/suspend", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/subscriptions/{subscription-key}/suspend")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/subscriptions/{subscription-key}/suspend");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"collect\": false, \n    \"contractEffectiveDate\": \"2019-02-01\", \n    \"extendsTerm\": true, \n    \"invoice\": true, \n    \"resume\": true, \n    \"resumePolicy\": \"SpecificDate\", \n    \"resumeSpecificDate\": \"2019-06-01\", \n    \"suspendPeriods\": 10, \n    \"suspendPeriodsType\": \"Day\", \n    \"suspendPolicy\": \"FixedPeriodsFromToday\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /journal-entries:
    post:
      summary: Create summary journal entry
      operationId: POST_SummaryJournalEntry
      description: |
        This REST API reference describes how to manually create a summary journal entry. Request and response field descriptions and sample code are provided.
        ## Requirements
        1.The sum of debits must equal the sum of credits in the summary journal entry.

        2.The following applies only if you use foreign currency conversion:
          * If you have configured Aggregate transactions with different currencies during a Journal Run to "Yes", the value of the **currency** field must be the same as your tenant's home currency. That is, you must create journal entries using your home currency.
          * All journal entries in an accounting period must either all be aggregated or all be unaggregated. You cannot have a mix of aggregated and unaggregated journal entries in the same accounting period.
      tags:
      - Summary Journal Entries
      parameters:
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/POSTJournalEntryType'
      responses:
        '200':
          examples:
            application/json:
              success: true
              journalEntryNumber: JE-00000001
          description: ''
          schema:
            $ref: '#/definitions/POSTJournalEntryResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"accountingPeriodName\"\
          : \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\"\
          : \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\"\
          : \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\"\
          : \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n          \
          \  \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\"\
          : \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n        \
          \    \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\
          \n        }, \n        {\n            \"accountingCodeName\": \"Subscription\
          \ Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n\
          \            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\"\
          : \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n   \
          \ \"notes\": \"my account\", \n    \"segments\": [\n        {\n        \
          \    \"segmentName\": \"billToCountry\", \n            \"segmentValue\"\
          : \"United States\"\n        }, \n        {\n            \"segmentName\"\
          : \"billToState\", \n            \"segmentValue\": \"California\"\n    \
          \    }\n    ], \n    \"transferredToAccounting\": \"No\"\n}' \"https://rest.zuora.com/v1/journal-entries\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/journal-entries');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"accountingPeriodName\"\
          : \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\"\
          : \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\"\
          : \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\"\
          : \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n          \
          \  \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\"\
          : \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n        \
          \    \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\
          \n        }, \n        {\n            \"accountingCodeName\": \"Subscription\
          \ Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n\
          \            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\"\
          : \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n   \
          \ \"notes\": \"my account\", \n    \"segments\": [\n        {\n        \
          \    \"segmentName\": \"billToCountry\", \n            \"segmentValue\"\
          : \"United States\"\n        }, \n        {\n            \"segmentName\"\
          : \"billToState\", \n            \"segmentValue\": \"California\"\n    \
          \    }\n    ], \n    \"transferredToAccounting\": \"No\"\n}');\n\ntry {\n\
          \  $response = $request->send();\n\n  echo $response->getBody();\n} catch\
          \ (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/journal-entries", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"accountingPeriodName\": \"Nov-2014\", \n    \"cf_pk1__c\": \"CreditCard\", \n    \"cf_pk2__c\": \"John Smith\", \n    \"cf_txt1__c\": \"1000001\", \n    \"cf_txt2__c\": \"2014-11-01\", \n    \"currency\": \"USD\", \n    \"journalEntryDate\": \"2014-09-09\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"accountingCodeType\": \"Deferred Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"Subscription Revenue\", \n            \"accountingCodeType\": \"Sales Revenue\", \n            \"amount\": \"400.9\", \n            \"homeCurrencyAmount\": \"801.8\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"my account\", \n    \"segments\": [\n        {\n            \"segmentName\": \"billToCountry\", \n            \"segmentValue\": \"United States\"\n        }, \n        {\n            \"segmentName\": \"billToState\", \n            \"segmentValue\": \"California\"\n        }\n    ], \n    \"transferredToAccounting\": \"No\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /journal-entries/journal-runs/{jr-number}:
    get:
      summary: Get all summary journal entries in a journal run
      operationId: GET_AllSummaryJournalEntries
      description: |2

        This REST API reference describes how to retrieve information about all summary journal entries in a journal run.
      tags:
      - Summary Journal Entries
      parameters:
      - name: jr-number
        in: path
        description: Journal run number.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              journalEntries:
              - number: JE-00000006
                status: Created
                journalEntryDate: '2016-12-31'
                currency: USD
                homeCurrency: USD
                aggregateCurrency: true
                transactionType: Invoice Item
                accountingPeriodName: Dec'16
                timePeriodStart: '2016-12-01'
                timePeriodEnd: '2016-12-31'
                transferredToAccounting: 'No'
                notes: note
                cf_txt1__c: custom text
                segments:
                - segmentName: Seg1
                  segmentValue: seg value
                journalEntryItems:
                - accountingCodeType: AccountsReceivable
                  accountingCodeName: Accounts Receivable
                  glAccountName: Accounts Receivable
                  glAccountNumber: 10-001-000-1234
                  type: Debit
                  amount: 100.0
                  homeCurrencyAmount: 100.0
                - accountingCodeType: SalesRevenue
                  accountingCodeName: Sales Revenue
                  glAccountName: Sales Revenue
                  glAccountNumber: 10-001-000-1000
                  type: Credit
                  amount: 100.0
                  homeCurrencyAmount: 100.0
          description: ''
          schema:
            $ref: '#/definitions/GETJournalEntriesInJournalRunType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/journal-entries/journal-runs/{jr-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-entries/journal-runs/{jr-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries/journal-runs/{jr-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/journal-entries/journal-runs/{jr-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries/journal-runs/{jr-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries/journal-runs/{jr-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /journal-entries/{je-number}:
    get:
      summary: Get summary journal entry
      operationId: GET_SummaryJournalEntry
      description: 'This REST API reference describes how to get information about
        a summary journal entry by its journal entry number.

        '
      tags:
      - Summary Journal Entries
      parameters:
      - name: je-number
        in: path
        description: ''
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              number: JE-00000001
              status: Created
              journalEntryDate: '2016-01-31'
              currency: USD
              homeCurrency: USD
              aggregateCurrency: true
              transactionType: Revenue Event Item
              accountingPeriodName: Jan'16
              timePeriodStart: '2016-01-01'
              timePeriodEnd: '2016-01-31'
              transferredToAccounting: null
              transferredBy: null
              transferDateTime: null
              notes: null
              segments:
              - segmentName: Customer Code
                segmentValue: A00000001
              - segmentName: Charge Type
                segmentValue: OneTime
              journalEntryItems:
              - accountingCodeType: DeferredRevenue
                accountingCodeName: Deferred Revenue
                glAccountName: null
                glAccountNumber: null
                type: Debit
                homeCurrencyAmount: 424.08
                amount: 424.08
              - accountingCodeType: SalesRevenue
                accountingCodeName: Professional Services Revenue
                glAccountName: null
                glAccountNumber: null
                type: Credit
                homeCurrencyAmount: 424.08
                amount: 424.08
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETJournalEntryDetailType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/journal-entries/{je-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-entries/{je-number}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries/{je-number}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/journal-entries/{je-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries/{je-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries/{je-number}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: Delete summary journal entry
      operationId: DELETE_SummaryJournalEntry
      description: |
        This reference describes how to delete a summary journal entry using the REST API.

        You must have the "Delete Cancelled Journal Entry" user permission enabled to delete summary journal entries.

        A summary journal entry must be canceled before it can be deleted.
      tags:
      - Summary Journal Entries
      parameters:
      - name: je-number
        in: path
        required: true
        type: string
        description: Journal entry number in the format JE-00000001.
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/journal-entries/{je-number}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-entries/{je-number}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries/{je-number}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/journal-entries/{je-number}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries/{je-number}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries/{je-number}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /journal-entries/{je-number}/cancel:
    put:
      summary: Cancel summary journal entry
      operationId: PUT_SummaryJournalEntry
      description: |2

        This reference describes how to cancel a summary journal entry using the REST API.

        You must have the "Cancel Journal Entry" user permission enabled to cancel summary journal entries.

        A summary journal entry cannot be canceled if its Transferred to Accounting status is "Yes" or "Processing".
      tags:
      - Summary Journal Entries
      parameters:
      - name: je-number
        in: path
        description: Journal entry number in the format JE-00000001.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/journal-entries/{je-number}/cancel"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/journal-entries/{je-number}/cancel');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries/{je-number}/cancel")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/journal-entries/{je-number}/cancel", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries/{je-number}/cancel")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries/{je-number}/cancel");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /journal-entries/{je-number}/basic-information:
    put:
      summary: Update basic information of a summary journal entry
      operationId: PUT_BasicSummaryJournalEntry
      description: |2

        This REST API reference describes how to update the basic information of a summary journal entry. Request and response field descriptions and sample code are provided.
      tags:
      - Summary Journal Entries
      parameters:
      - name: je-number
        in: path
        description: Journal entry number in the format JE-00000001.
        required: true
        type: string
      - name: Request
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/PUT_BasicSummaryJournalEntryType'
      responses:
        '200':
          examples:
            application/json:
              success: true
          description: ''
          schema:
            $ref: '#/definitions/CommonResponseType'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"cf_issueNumberc\"\
          : \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"\
          accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\"\
          : \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n       \
          \ {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\"\
          : \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n \
          \   \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\"\
          : \"Yes\"\n}' \"https://rest.zuora.com/v1/journal-entries/{je-number}/basic-information\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/journal-entries/{je-number}/basic-information');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"cf_issueNumberc\"\
          : \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"\
          accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\"\
          : \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n       \
          \ {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\"\
          : \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n \
          \   \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\"\
          : \"Yes\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/journal-entries/{je-number}/basic-information")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/journal-entries/{je-number}/basic-information", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/journal-entries/{je-number}/basic-information")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/journal-entries/{je-number}/basic-information");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"cf_issueNumberc\": \"1000001\", \n    \"journalEntryItems\": [\n        {\n            \"accountingCodeName\": \"Accounts Receivable\", \n            \"cf_phasesc\": \"Phase 1\", \n            \"type\": \"Credit\"\n        }, \n        {\n            \"accountingCodeName\": \"\", \n            \"cf_phases__c\": \"Phase 1\", \n            \"type\": \"Debit\"\n        }\n    ], \n    \"notes\": \"Transfer to accounting system\", \n    \"transferredToAccounting\": \"Yes\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /transactions/invoices/accounts/{account-key}:
    get:
      summary: Get invoices
      operationId: GET_TransactionInvoice
      description: "Retrieves invoices for a specified account. \nInvoices are returned\
        \ in reverse chronological order by **updatedDate**.\n"
      tags:
      - Transactions
      parameters:
      - name: account-key
        in: path
        description: 'Account number or account ID.

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              invoices:
              - id: 2c92c095511f5b4401512682dcfd7987
                accountId: 2c92c0f8511f4b9d01512680ab282370
                accountNumber: A00000002
                accountName: XYZ, Inc
                invoiceDate: '2015-11-20'
                invoiceNumber: INV00000002
                dueDate: '2015-12-20'
                invoiceTargetDate: '2015-11-20'
                amount: 21.1
                balance: 21.1
                createdBy: 2c92c0f84fbac224014fc55639fe11d4
                status: Draft
                body: null
                invoiceItems:
                - id: 2c92c095511f5b4401512682dd017989
                  subscriptionName: A-S00000004
                  subscriptionId: 2c92c0f9511f56b2015126814ad532cc
                  serviceStartDate: '2015-11-20'
                  serviceEndDate: '2015-11-30'
                  chargeAmount: 21.1
                  chargeDescription: ''
                  chargeName: Annual Fee
                  chargeId: 2c92c0f9511f56b2015126814af832d2
                  productName: TeamCollab Enterprise
                  quantity: 1
                  taxAmount: 0
                  unitOfMeasure: ''
                invoiceFiles: []
              success: true
          description: ''
          schema:
            $ref: '#/definitions/GETInvoiceFileWrapper'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/transactions/invoices/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/transactions/invoices/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/transactions/invoices/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/transactions/invoices/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/transactions/invoices/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/transactions/invoices/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /transactions/payments/accounts/{account-key}:
    get:
      summary: Get payments
      operationId: GET_TransactionPayment
      description: |
        Retrieves payments for a specified account. Payments are returned in
        reverse chronological order by **updatedDate**.
      tags:
      - Transactions
      parameters:
      - name: account-key
        in: path
        description: Account number or account ID.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              payments:
              - paymentMethodId: 2c92c8f83dabf9cf013daef12dd303b0
                paidInvoices:
                - invoiceId: 2c92a09539190dbe0139190f42780012
                  invoiceNumber: INV00000159
                  appliedPaymentAmount: 5.0
                - invoiceId: 2c92a0953a3fa95d013a407c10a60100
                  invoiceNumber: INV00000323
                  appliedPaymentAmount: 139722.1
                - invoiceId: 2c92a09739190dc60139194bcf1b0098
                  invoiceNumber: INV00000160
                  appliedPaymentAmount: 10521.0
                effectiveDate: '2013-03-27'
                accountId: 2c92a0f9391832b10139183e277a0042
                accountName: subscribeCallYan_1
                id: 2c92c8f83dabf9cf013daf3bfa0305a6
                status: Processed
                paymentNumber: P-00000075
                gatewayTransactionNumber: null
                type: Electronic
                accountNumber: A00001115
                amount: 150248.1
              - paymentMethodId: 2c92a0f9391832b10139183e279e0044
                paidInvoices:
                - invoiceId: 2c92a09539190dbe0139190f42780012
                  invoiceNumber: INV00000159
                  appliedPaymentAmount: 5.0
                effectiveDate: '2012-08-11'
                accountId: 2c92a0f9391832b10139183e277a0042
                accountName: subscribeCallYan_1
                id: 2c92a0f9391832b101391922ad5f049d
                status: Processed
                paymentNumber: P-00000056
                gatewayTransactionNumber: null
                type: Electronic
                accountNumber: A00001115
                amount: 5.0
          description: ''
          schema:
            $ref: '#/definitions/GETPaymentsType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/transactions/payments/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/transactions/payments/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/transactions/payments/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/transactions/payments/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/transactions/payments/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/transactions/payments/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /usage:
    post:
      summary: Post usage
      operationId: POST_Usage
      description: "\nThis REST API reference describes how to post or import usage\
        \ data for one or more accounts in the CSV  format. There are no path or query\
        \ parameters. The data is uploade using the HTTP multipart/form-data POST\
        \ method and applied to the user's tenant. \n\n## How this REST API Call Works\n\
        The content of the upload file must follow the format used by the UI import\
        \ tool. It must be a comma-separated (CSV) file with a corresponding .csv\
        \ extension. The file size must not exceed 4MB. Click [here](https://knowledgecenter.zuora.com/@api/deki/files/4105/UsageFileFormat.csv)\
        \ to download the usage file template.\n\nAt the completion of the upload,\
        \ before actually processing the file contents, theAPI returns a response\
        \ containing the byte count of the received file and a URL for checking the\
        \ status of the import process.  Of the five possible results displayed at\
        \ that URL Pending, Processing, Completed, Canceled, and Failed) only a Completed\
        \ status indicates that the import was successful.  The operation is atomic;\
        \ if any record fails, the file is rejected.  In that case, the entire import\
        \ is rolled back and all stored data is returned to its original state.\n\n\
        To view the actual import status, enter the resulting status URL from the\
        \ checkImportStatus response using a tool such as POSTMAN.This additional\
        \ step provides more information about why the import may have failed.\n\n\
        To manage the information after a successful upload, use the web-based UI.\n\
        \n## Upload File Format\nThe upload file uses the following headings:\n\n\
        | Heading         | Description   | Required |\n|-----------------|--------|----------|\n\
        | ACCOUNT_ID      | Enter the account number, e.g., the default account number,\
        \ such as A00000001, or your custom account number.,Although this field is\
        \ labeled as Account_Id, it is not the actual Account ID nor Account Name.\
        \  | Yes      |\n| UOM             | Enter the unit of measure. This must\
        \ match the UOM for the usage. | Yes      |\n| QTY             | Enter the\
        \ quantity.  | Yes      |\n| STARTDATE       | Enter the start date of the\
        \ usage.,This date determines the invoice item service period the associated\
        \ usage is billed to. Date format is based on locale of the current user.\
        \ Default date format: `MM/DD/YYYY` | Yes      |\n| ENDDATE         | Enter\
        \ the end date of the usage.,This is not used in calculations for usage billing\
        \ and is optional. Date format is based on locale of the current user. Default\
        \ date format: `MM/DD/YYYY`    | Yes      |\n| SUBSCRIPTION_ID | Enter the\
        \ subscription number or subscription name. If you created the subscription\
        \ in the Zuora application, Zuora created a number automatically in a format\
        \ similar to A-S00000001. If you do not provide a value for this field, the\
        \ associated usage will be added to all subscriptions for the specified Account\
        \ that use this Unit Of Measure. If your Accounts can have multiple subscriptions\
        \ and you do not want double or triple counting of usage, you must specify\
        \ the Subscription or Charge ID in each usage record.  | Yes      |\n| CHARGE_ID\
        \       | Enter the charge number (not the charge name). You can see the charge\
        \ ID, e.g., C-00000001, when you add your rate plan to your subscription and\
        \ view your individual charges. If your Accounts can have multiple subscriptions\
        \ and you do not want double or triple counting of usage, you must specify\
        \ the specific Subscription or Charge ID in each usage record. This field\
        \ is related to the Charge Number on the subscription rate plan.         \
        \              | Yes      |\n| DESCRIPTION     | Enter a description for the\
        \ charge. | No       |\n"
      tags:
      - Usage
      parameters:
      - name: Content-Type
        in: header
        description: 'Must be set to "multipart/form-data".

          '
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              checkImportStatus: https://api.zuora.com/rest/v1/usage/2c92c8f83dcbd8b1013dcce1159900cc/status
              size: 316
          description: ''
          schema:
            $ref: '#/definitions/POSTUsageResponseType'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/usage"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/usage');
          $request->setMethod(HTTP_METH_POST);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/usage")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/usage", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/usage")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/usage");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /usage/accounts/{account-key}:
    get:
      summary: Get usage
      operationId: GET_Usage
      description: 'This REST API reference describes how to retrieve usage details
        for an account. Usage data is returned in reverse chronological order.

        '
      tags:
      - Usage
      parameters:
      - name: account-key
        in: path
        description: Account number or account ID.
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              usage:
              - chargeNumber: null
                sourceName: Import
                quantity: 4.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8953dac2b1c013dae0a263f35dd
                subscriptionNumber: null
                startDateTime: '2012-02-05 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-03-27 15:48:53'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 4.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8943db2ae51013dcce116b00f4b
                subscriptionNumber: null
                startDateTime: '2012-02-05 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-04-02 15:32:16'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 3.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8953dac2b1c013dae0a263f35dc
                subscriptionNumber: null
                startDateTime: '2012-02-04 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-03-27 15:48:53'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 3.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8943db2ae51013dcce116b00f4a
                subscriptionNumber: null
                startDateTime: '2012-02-04 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-04-02 15:32:16'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 2.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8953dac2b1c013dae0a263e35db
                subscriptionNumber: null
                startDateTime: '2012-02-03 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-03-27 15:48:53'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 2.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8943db2ae51013dcce116af0f49
                subscriptionNumber: null
                startDateTime: '2012-02-03 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-04-02 15:32:16'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 1.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8953dac2b1c013dae0a263e35da
                subscriptionNumber: null
                startDateTime: '2012-02-02 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-03-27 15:48:53'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 1.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8943db2ae51013dcce116af0f48
                subscriptionNumber: null
                startDateTime: '2012-02-02 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-04-02 15:32:16'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 4.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8953dac2b1c013dae0a263e35d9
                subscriptionNumber: null
                startDateTime: '2012-01-05 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-03-27 15:48:53'
                accountId: 2c92a0f9391832b10139183e277a0042
              - chargeNumber: null
                sourceName: Import
                quantity: 4.0
                unitOfMeasure: UOM
                accountName: subscribeCallYan_1
                id: 2c92c8943db2ae51013dcce116af0f47
                subscriptionNumber: null
                startDateTime: '2012-01-05 00:00:00'
                accountNumber: A00001115
                status: Pending
                submissionDateTime: '2013-04-02 15:32:16'
                accountId: 2c92a0f9391832b10139183e277a0042
              success: true
              nextPage: https://api.zuora.com/rest/v1/usage/accounts/A00001115?page=2&pageSize=10
          description: ''
          schema:
            $ref: '#/definitions/GETUsageWrapper'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/usage/accounts/{account-key}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/usage/accounts/{account-key}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/usage/accounts/{account-key}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/usage/accounts/{account-key}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/usage/accounts/{account-key}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/usage/accounts/{account-key}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/account:
    post:
      summary: 'CRUD: Create Account'
      operationId: Object_POSTAccount
      description: ''
      tags:
      - Accounts
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateAccount'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e0321fdf4fab
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountNumber\"\
          : \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\"\
          , \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\"\
          : \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\"\
          , \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\"\
          , \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\
          \n}' \"https://rest.zuora.com/v1/object/account\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/account');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountNumber\"\
          : \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\"\
          , \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\"\
          : \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\"\
          , \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\"\
          , \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/account")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/account", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/account")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/account");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": false, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"Status\": \"Draft\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/account/{id}:
    get:
      summary: 'CRUD: Retrieve Account'
      operationId: Object_GETAccount
      description: ''
      tags:
      - Accounts
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              AccountNumber: AN_1476935136687
              AllowInvoiceEdit: false
              Id: 2c93808457d787030157e031b5b74a9d
              AutoPay: true
              InvoiceDeliveryPrefsPrint: false
              UpdatedDate: '2016-10-20T05:45:37.000+02:00'
              CreditBalance: 0
              BillCycleDay: 1
              BcdSettingOption: ManualSet
              PaymentTerm: Due Upon Receipt
              Status: Draft
              TotalInvoiceBalance: 0
              UpdatedById: 2c93808457d787030157e0319d644922
              Batch: Batch1
              CreatedById: 2c93808457d787030157e0319d644922
              InvoiceDeliveryPrefsEmail: false
              Name: AC_1476935136687
              SoldToId: 2c93808457d787030157e031b6444a9e
              Notes: this is notes
              Balance: 0
              InvoiceTemplateId: 2c93808457d787030157e031a33c4a94
              CrmId: crmid
              BillToId: 2c93808457d787030157e031b6444a9e
              CreatedDate: '2016-10-20T05:45:36.000+02:00'
              DefaultPaymentMethodId: 2c93808457d787030157e031b6d24a9f
              Currency: USD
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetAccount'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/account/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/account/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/account/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/account/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/account/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/account/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Account'
      operationId: Object_PUTAccount
      description: ''
      tags:
      - Accounts
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyAccount'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e0321fdf4fab
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountNumber\"\
          : \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\"\
          , \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\"\
          , \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\"\
          : \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\"\
          , \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n\
          \    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\"\
          , \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\"\
          , \n    \"Status\": \"Active\"\n}' \"https://rest.zuora.com/v1/object/account/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/account/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountNumber\"\
          : \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\"\
          , \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\"\
          , \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\"\
          : \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\"\
          , \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n\
          \    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\"\
          , \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\"\
          , \n    \"Status\": \"Active\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/account/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/account/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/account/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/account/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountNumber\": \"AN_1476935163869\", \n    \"AutoPay\": true, \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": 1, \n    \"BillToId\": \"2c93808457d787030157e03220684fac\", \n    \"CrmId\": \"crmid\", \n    \"Currency\": \"USD\", \n    \"DefaultPaymentMethodId\": \"2c93808457d787030157e03220ec4fad\", \n    \"Id\": \"2c93808457d787030157e0321fdf4fab\", \n    \"InvoiceTemplateId\": \"2c93808457d787030157e03208864f97\", \n    \"Name\": \"AC_1476935163869\", \n    \"Notes\": \"this is notes\", \n    \"PaymentTerm\": \"Due Upon Receipt\", \n    \"SoldToId\": \"2c93808457d787030157e03220684fac\", \n    \"Status\": \"Active\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Account'
      operationId: Object_DELETEAccount
      description: ''
      tags:
      - Accounts
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e031b1ea4a98
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/account/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/account/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/account/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/account/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/account/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/account/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/amendment:
    post:
      summary: 'CRUD: Create Amendment'
      operationId: Object_POSTAmendment
      description: ''
      tags:
      - Amendments
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateAmendment'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02ec4b42599
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"ContractEffectiveDate\"\
          : \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n \
          \   \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\"\
          , \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"\
          RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\
          \n        }, \n        \"RatePlanChargeData\": [\n            {\n      \
          \          \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\"\
          : \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n\
          \        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n \
          \   \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\"\
          : \"NewProduct\"\n}' \"https://rest.zuora.com/v1/object/amendment\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/amendment');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"ContractEffectiveDate\"\
          : \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n \
          \   \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\"\
          , \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"\
          RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\
          \n        }, \n        \"RatePlanChargeData\": [\n            {\n      \
          \          \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\"\
          : \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n\
          \        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n \
          \   \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\"\
          : \"NewProduct\"\n}');\n\ntry {\n  $response = $request->send();\n\n  echo\
          \ $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/amendment")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/amendment", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/amendment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/amendment");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"ContractEffectiveDate\": \"2016-10-20\", \n    \"CustomerAcceptanceDate\": \"2016-10-20\", \n    \"Description\": \"AMpqvyqhhzpg\", \n    \"EffectiveDate\": \"2016-10-20\", \n    \"Name\": \"AMpqvyqhhzpg\", \n    \"RatePlanData\": {\n        \"RatePlan\": {\n            \"ProductRatePlanId\": \"2c93808457d787030157e02ec2202584\"\n        }, \n        \"RatePlanChargeData\": [\n            {\n                \"RatePlanCharge\": {\n                    \"ProductRatePlanChargeId\": \"2c93808457d787030157e02ec34d2587\"\n                }\n            }\n        ]\n    }, \n    \"ServiceActivationDate\": \"2016-10-20\", \n    \"SubscriptionId\": \"2c93808457d787030157e02ec3f9258e\", \n    \"Type\": \"NewProduct\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/amendment/{id}:
    get:
      summary: 'CRUD: Retrieve Amendment'
      operationId: Object_GETAmendment
      description: ''
      tags:
      - Amendments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              RenewalSetting: RENEW_WITH_SPECIFIC_TERM
              Id: 2c93808457d787030157e02e430c1f15
              UpdatedDate: '2016-10-20T05:41:50.000+02:00'
              SubscriptionId: 2c93808457d787030157e02e3ef61f02
              ServiceActivationDate: '2016-10-20'
              CurrentTermPeriodType: Month
              Description: AMtssl1bnuq1
              ContractEffectiveDate: '2016-10-20'
              CreatedById: 2c93808457d787030157e02e0bcf1d0c
              CreatedDate: '2016-10-20T05:41:50.000+02:00'
              Name: AMtssl1bnuq1_new
              CustomerAcceptanceDate: '2016-10-20'
              Code: A-AM00000004
              RenewalTermPeriodType: Month
              Type: NewProduct
              Status: Draft
              UpdatedById: 2c93808457d787030157e02e0bcf1d0c
              EffectiveDate: '2016-10-20'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetAmendment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/amendment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/amendment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/amendment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/amendment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/amendment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/amendment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Amendment'
      operationId: Object_PUTAmendment
      description: ''
      tags:
      - Amendments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyAmendment'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02e430c1f15
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\"\
          : \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\
          \n}' \"https://rest.zuora.com/v1/object/amendment/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/amendment/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\"\
          : \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/amendment/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/amendment/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/amendment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/amendment/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Id\": \"2c93808457d787030157e02e430c1f15\", \n    \"Name\": \"AMtssl1bnuq1_new\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Amendment'
      operationId: Object_DELETEAmendment
      description: ''
      tags:
      - Amendments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02e3a541ef4
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/amendment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/amendment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/amendment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/amendment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/amendment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/amendment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/bill-run:
    post:
      summary: 'CRUD: Create Bill Run'
      operationId: Object_POSTBillRun
      description: "Creates an ad hoc bill run or a single account or multiple customer\
        \ accounts.\n\nWhen creating a single account ad hoc bill run, your request\
        \ must include `AccountId` and must not include `Batch` or `BillCycleDay`.\
        \ \n"
      tags:
      - Bill Run
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateBillRun'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c92c0f959d961e1015a0872b69a7347
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AutoEmail\"\
          : \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\"\
          , \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\"\
          : \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\"\
          : \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}' \"https://rest.zuora.com/v1/object/bill-run\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/bill-run');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AutoEmail\"\
          : \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\"\
          , \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\"\
          : \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\"\
          : \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/bill-run")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/bill-run", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/bill-run")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/bill-run");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AutoEmail\": \"false\", \n    \"AutoPost\": \"false\", \n    \"AutoRenewal\": \"false\", \n    \"Batch\": \"Batch1\", \n    \"BillCycleDay\": \"2\", \n    \"ChargeTypeToExclued\": \"OneTime, Usage\", \n    \"InvoiceDate\": \"2017-02-04\", \n    \"NoEmailForZeroAmountInvoice\": \"false\", \n    \"TargetDate\": \"2017-02-04\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/bill-run/{id}:
    get:
      summary: 'CRUD: Retrieve Bill Run'
      operationId: Object_GETBillRun
      description: 'Business operations depending on the completion of the bill run
        will not be available while the bill run query returns `PostInProgress`. Upon
        completion of the bill run, a query will return `Posted`.

        '
      tags:
      - Bill Run
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              AutoRenewal: false
              InvoiceDate: '2017-02-01'
              Id: 2c92c09459d949220159f79d592f7e1a
              NumberOfInvoices: 1
              UpdatedDate: '2017-02-01T19:00:00.000-08:00'
              BillCycleDay: AllBillCycleDays
              AutoEmail: false
              AutoPost: false
              NoEmailForZeroAmountInvoice: false
              NumberOfAccounts: 1
              BillRunNumber: BR-00002572
              Status: Completed
              CreatedDate: '2017-01-31T19:00:01.000-08:00'
              CreatedById: 2c92c0f956bc8fcb0156f8eee04b4d54
              UpdatedById: 2c92c0f956bc8fcb0156f8eee04b4d54
              ExecutedDate: '2017-02-01T19:00:00.000-08:00'
              Batch: Batch1
              InvoicesEmailed: false
              TargetDate: '2017-02-20'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetBillRun'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/bill-run/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/bill-run/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/bill-run/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/bill-run/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/bill-run/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/bill-run/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Post or Cancel Bill Run'
      operationId: Object_PUTBillRun
      description: "\n## Post a Bill Run\n\nPosting a bill run is an asynchronous\
        \ operation. To post a bill run, the current bill run must have a status of\
        \ `Completed`.\n\nWhen a bill run is posted, its status is changed to `PostInProgress`.\
        \ Once all invoices for this bill run are posted then its status is changed\
        \ to `Posted`.   \n\nWhen you post a bill run and query the status of a bill\
        \ run, you will get one of the following results `PostInProgress`, `Completed`,\
        \ or `Posted`. If all invoices in the bill run are posted, then the status\
        \ of the bill run is `Posted`. If one or more invoices fail to post, the status\
        \ will change back to `Completed` and you will need to post the bill run again.\n\
        \n## Cancel a Bill Run\n\nCanceling a bill run is an asynchronous operation.\
        \ When canceling a bill run, the logic is the same as when using the UI to\
        \ cancel a bill run. You need to provide the `BillRunId`, and set the Status\
        \ to `Canceled`. \n\nWhen canceling a bill run, consider the following:\n\n\
        * Canceling a bill run with a `Completed` status.\n  * Only the current bill\
        \ run will be canceled.\n* Canceling a bill run with a `Pending` status.\n\
        \  * When canceling an Ad-hoc bill run, only the current bill run will be\
        \ canceled.\n  * When canceling a scheduled bill, all scheduled bill runs\
        \ will be canceled.\n\nThe Cancel operation may not be successful. Its success\
        \ depends on its current business validation. Only a bill run that has no\
        \ posted invoices can be canceled. If any posted invoices belong to the bill\
        \ run then an invalid value exception will be thrown with the message, \"\
        The Bill Run cannot be Cancelled, There are Posted invoices.\"\n"
      tags:
      - Bill Run
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyBillRun'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c92c0f959d961e1015a0872b69a7347
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: |-
          curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey: dummyPassword" -H "Content-Type: application/json" -d '{
              "Status": "Posted"
          }' "https://rest.zuora.com/v1/object/bill-run/{id}"
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/bill-run/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{
              "Status": "Posted"
          }');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Status\": \"Posted\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/bill-run/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Status\": \"Posted\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/bill-run/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/bill-run/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Status\": \"Posted\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/bill-run/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Status\": \"Posted\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Bill Run'
      operationId: Object_DELETEBillRun
      description: 'When deleting a bill run, the logic is the same as when using
        the UI to delete a bill run. The only required parameter is `BillRunId`. The
        Status for the bill run must be `Canceled` in order to delete a bill run.

        '
      tags:
      - Bill Run
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c92c0f959d961e1015a0872b69a7347
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/bill-run/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/bill-run/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/bill-run/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/bill-run/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/bill-run/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/bill-run/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/communication-profile/{id}:
    get:
      summary: 'CRUD: Retrieve CommunicationProfile'
      operationId: Object_GETCommunicationProfile
      description: ''
      tags:
      - Communication Profiles
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetCommunicationProfile'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/communication-profile/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/communication-profile/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/communication-profile/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/communication-profile/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/communication-profile/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/communication-profile/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete CommunicationProfile'
      operationId: Object_DELETECommunicationProfile
      description: ''
      tags:
      - Communication Profiles
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/communication-profile/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/communication-profile/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/communication-profile/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/communication-profile/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/communication-profile/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/communication-profile/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/contact:
    post:
      summary: 'CRUD: Create Contact'
      operationId: Object_POSTContact
      description: ''
      tags:
      - Contacts
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateContact'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03220684fac
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave\
          \ W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\"\
          , \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\"\
          : \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\"\
          : \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"\
          NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\"\
          , \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\"\
          , \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n \
          \   \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}' \"\
          https://rest.zuora.com/v1/object/contact\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/contact');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave\
          \ W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\"\
          , \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\"\
          : \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\"\
          : \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"\
          NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\"\
          , \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\"\
          , \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n \
          \   \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}');\n\
          \ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/contact")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/contact", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/contact")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/contact");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"Address1\": \"312 2nd Ave W\", \n    \"City\": \"Seattle\", \n    \"Country\": \"United States\", \n    \"Description\": \"desc\", \n    \"Fax\": \"123456\", \n    \"FirstName\": \"FN1476935164020\", \n    \"HomePhone\": \"86123456789\", \n    \"LastName\": \"LN1476935164020\", \n    \"MobilePhone\": \"8613312345678\", \n    \"NickName\": \"this is nick name\", \n    \"OtherPhone\": \"11111111111111111\", \n    \"OtherPhoneType\": \"Work\", \n    \"PersonalEmail\": \"person@test.com\", \n    \"PostalCode\": \"98119\", \n    \"State\": \"Washington\", \n    \"TaxRegion\": \"CA\", \n    \"WorkEmail\": \"work@test.com\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/contact/{id}:
    get:
      summary: 'CRUD: Retrieve Contact'
      operationId: Object_GETContact
      description: ''
      tags:
      - Contacts
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              OtherPhoneType: Work
              MobilePhone: '8613312345678'
              Id: 2c93808457d787030157e02e606e2095
              FirstName: FN1476934918260_new
              NickName: this is nick name
              UpdatedDate: '2016-10-20T05:41:58.000+02:00'
              Country: United States
              WorkEmail: work@test.com
              HomePhone: '86123456789'
              AccountId: 2c93808457d787030157e02e5fde2094
              Description: desc
              OtherPhone: '11111111111111111'
              Fax: '123456'
              CreatedById: 2c93808457d787030157e02e45291f18
              CreatedDate: '2016-10-20T05:41:58.000+02:00'
              PostalCode: '98119'
              UpdatedById: 2c93808457d787030157e02e45291f18
              City: Seattle
              TaxRegion: CA
              State: Washington
              PersonalEmail: person@test.com
              Address1: 312 2nd Ave W
              LastName: LN1476934918260
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetContact'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/contact/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/contact/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/contact/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/contact/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/contact/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/contact/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Contact'
      operationId: Object_PUTContact
      description: ''
      tags:
      - Contacts
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyContact'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02e606e2095
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"FirstName\"\
          : \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\
          \n}' \"https://rest.zuora.com/v1/object/contact/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/contact/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"FirstName\"\
          : \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/contact/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/contact/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/contact/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/contact/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"FirstName\": \"FN1476934918260_new\", \n    \"Id\": \"2c93808457d787030157e02e606e2095\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Contact'
      operationId: Object_DELETEContact
      description: ''
      tags:
      - Contacts
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02e5b26208f
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/contact/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/contact/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/contact/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/contact/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/contact/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/contact/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/credit-balance-adjustment/{id}:
    get:
      summary: 'CRUD: Retrieve CreditBalanceAdjustment'
      operationId: Object_GETCreditBalanceAdjustment
      description: ''
      tags:
      - Credit Balance Adjustments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Id: 2c93808457d787030157e02f640b2c9f
              CancelledOn: '2016-10-20T05:43:05.000+02:00'
              Amount: 30.8
              UpdatedById: 2c93808457d787030157e02f409a2af9
              CreatedById: 2c93808457d787030157e02f409a2af9
              CreatedDate: '2016-10-20T05:43:04.000+02:00'
              ReasonCode: Standard Adjustment
              SourceTransactionNumber: INV00000001
              Number: CBA-00000001
              AdjustmentDate: '2016-10-20'
              Type: Increase
              Status: Canceled
              AccountId: 2c93808457d787030157e02f5fb82c76
              SourceTransactionId: 2c93808457d787030157e02f60a42c87
              SourceTransactionType: Invoice
              UpdatedDate: '2016-10-20T05:43:05.000+02:00'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetCreditBalanceAdjustment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/credit-balance-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete CreditBalanceAdjustment'
      operationId: Object_DELETECreditBalanceAdjustment
      description: ''
      tags:
      - Credit Balance Adjustments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/credit-balance-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/credit-balance-adjustment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/export:
    post:
      summary: 'CRUD: Create Export'
      operationId: Object_POSTExport
      description: ''
      tags:
      - Exports
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateExport'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03222184fae
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Format\"\
          : \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\"\
          : \"select * from account\", \n    \"Status\": \"Processing\", \n    \"\
          Zip\": true\n}' \"https://rest.zuora.com/v1/object/export\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/export');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Format\"\
          : \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\"\
          : \"select * from account\", \n    \"Status\": \"Processing\", \n    \"\
          Zip\": true\n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/export")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/export", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/export")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/export");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Format\": \"csv\", \n    \"Name\": \"test_Export_1476935164445\", \n    \"Query\": \"select * from account\", \n    \"Status\": \"Processing\", \n    \"Zip\": true\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/export/{id}:
    get:
      summary: 'CRUD: Retrieve Export'
      operationId: Object_GETExport
      description: ''
      tags:
      - Exports
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Format: csv
              Query: select * from account
              Encrypted: false
              CreatedById: 2c93808457d787030157e03202294e25
              CreatedDate: '2016-10-20T05:46:04.000+02:00'
              Name: test_Export_1476935164445
              Zip: true
              Size: 5
              UpdatedDate: '2016-10-20T05:46:04.000+02:00'
              UpdatedById: 2c93808457d787030157e03202294e25
              Status: Completed
              Id: 2c93808457d787030157e03222184fae
              FileId: 2c93808457d787030157e032228d4fb0
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetExport'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/export/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/export/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/export/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/export/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/export/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/export/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Export'
      operationId: Object_DELETEExport
      description: ''
      tags:
      - Exports
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/export/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/export/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/export/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/export/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/export/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/export/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/feature/{id}:
    get:
      summary: 'CRUD: Retrieve Feature'
      operationId: Object_GETFeature
      description: ''
      tags:
      - Features
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Id: 2c93808457d787030157e02f82872e25
              Status: Active
              CreatedDate: '2016-10-20T05:43:12.000+02:00'
              UpdatedDate: '2016-10-20T05:43:12.000+02:00'
              FeatureCode: feature_code_1476934992537
              CreatedById: 2c93808457d787030157e02f68272cae
              UpdatedById: 2c93808457d787030157e02f68272cae
              Name: name_1476934992537_new
              Description: this is desc
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetFeature'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/feature/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/feature/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/feature/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Feature'
      operationId: Object_DELETEFeature
      description: ''
      tags:
      - Features
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02f80e92e24
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/feature/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/feature/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/feature/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/import/{id}:
    get:
      summary: 'CRUD: Retrieve Import'
      operationId: Object_GETImport
      description: ''
      tags:
      - Imports
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetImport'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/import/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/import/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/import/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/import/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/import/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/import/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Import'
      operationId: Object_DELETEImport
      description: ''
      tags:
      - Imports
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/import/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/import/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/import/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/import/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/import/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/import/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice:
    post:
      summary: 'CRUD: Create Invoice'
      operationId: Object_POSTInvoice
      description: ''
      tags:
      - Invoices
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateInvoice'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e031d3914c40
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\"\
          , \n    \"TargetDate\": \"2016-10-20\"\n}' \"https://rest.zuora.com/v1/object/invoice\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/invoice');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\"\
          , \n    \"TargetDate\": \"2016-10-20\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\", \n    \"TargetDate\": \"2016-10-20\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\", \n    \"TargetDate\": \"2016-10-20\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/invoice", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\", \n    \"TargetDate\": \"2016-10-20\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e031d2704c28\", \n    \"InvoiceDate\": \"2016-10-20\", \n    \"TargetDate\": \"2016-10-20\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/invoice/{id}:
    get:
      summary: 'CRUD: Retrieve Invoice'
      operationId: Object_GETInvoice
      description: ''
      tags:
      - Invoices
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              InvoiceDate: '2011-01-10'
              TaxExemptAmount: 0
              UpdatedDate: '2016-10-20T05:45:45.000+02:00'
              CreditBalanceAdjustmentAmount: 0
              Status: Posted
              TargetDate: '2016-10-20'
              AccountId: 2c93808457d787030157e031d2704c28
              IncludesOneTime: true
              InvoiceNumber: INV00000002
              UpdatedById: 2c93808457d787030157e031bb3f4aa5
              PaymentAmount: 0
              Id: 2c93808457d787030157e031d86c4c57
              TaxAmount: 0
              IncludesUsage: true
              CreatedById: 2c93808457d787030157e031bb3f4aa5
              CreatedDate: '2016-10-20T05:45:45.000+02:00'
              Body: 
              PostedDate: '2016-10-20T05:45:45.000+02:00'
              Amount: 23.92
              Balance: 23.92
              RefundAmount: 0
              AmountWithoutTax: 23.92
              AdjustmentAmount: 0
              PostedBy: 2c93808457d787030157e031bb3f4aa5
              DueDate: '2011-01-10'
              IncludesRecurring: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoice'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Invoice'
      operationId: Object_PUTInvoice
      description: ''
      tags:
      - Invoices
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyInvoice'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e031d86c4c57
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\"\
          : \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}'\
          \ \"https://rest.zuora.com/v1/object/invoice/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/invoice/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\"\
          : \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}');\n\
          \ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/invoice/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Id\": \"2c93808457d787030157e031d86c4c57\", \n    \"Status\": \"Posted\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Invoice'
      operationId: Object_DELETEInvoice
      description: ''
      tags:
      - Invoices
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02f149f2922
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-adjustment:
    post:
      summary: 'CRUD: Create InvoiceAdjustment'
      operationId: Object_POSTInvoiceAdjustment
      description: ''
      tags:
      - Invoice Adjustments
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateInvoiceAdjustment'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e030d3043f79
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountingCode\"\
          : \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n\
          \    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"\
          InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\"\
          : \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n  \
          \  \"Type\": \"Credit\"\n}' \"https://rest.zuora.com/v1/object/invoice-adjustment\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/invoice-adjustment');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountingCode\"\
          : \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n\
          \    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"\
          InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\"\
          : \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n  \
          \  \"Type\": \"Credit\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-adjustment")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/invoice-adjustment", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-adjustment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-adjustment");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountingCode\": \"Accounts Receivable\", \n    \"AdjustmentDate\": \"2016-10-20\", \n    \"Amount\": 1.2, \n    \"Comments\": \"this is comments\", \n    \"InvoiceId\": \"2c93808457d787030157e030d10f3f64\", \n    \"InvoiceNumber\": \"INV00000001\", \n    \"ReferenceId\": \"refid-1476935078657\", \n    \"Type\": \"Credit\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/invoice-adjustment/{id}:
    get:
      summary: 'CRUD: Retrieve InvoiceAdjustment'
      operationId: Object_GETInvoiceAdjustment
      description: ''
      tags:
      - Invoice Adjustments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              AdjustmentNumber: IA-00000001
              CustomerName: AC_1476935078064
              Id: 2c93808457d787030157e030d3043f79
              AccountingCode: Accounts Receivable
              ReasonCode: Standard Adjustment
              AccountId: 2c93808457d787030157e030d0a43f53
              CustomerNumber: AN_1476935078064
              InvoiceId: 2c93808457d787030157e030d10f3f64
              ImpactAmount: -1.2
              CreatedById: 2c93808457d787030157e030b4fa3dd6
              CreatedDate: '2016-10-20T05:44:38.000+02:00'
              Type: Credit
              Amount: 1.2
              AdjustmentDate: '2016-10-20'
              Comments: this is comments
              UpdatedDate: '2016-10-20T05:44:38.000+02:00'
              Status: Processed
              InvoiceNumber: INV00000001
              ReferenceId: refid-1476935078657
              UpdatedById: 2c93808457d787030157e030b4fa3dd6
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoiceAdjustment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-adjustment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-adjustment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update InvoiceAdjustment'
      operationId: Object_PUTInvoiceAdjustment
      description: ''
      tags:
      - Invoice Adjustments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyInvoiceAdjustment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/invoice-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-adjustment/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/invoice-adjustment/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-adjustment/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoiceAdjustment'
      operationId: Object_DELETEInvoiceAdjustment
      description: ''
      tags:
      - Invoice Adjustments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-adjustment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-adjustment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-item/{id}:
    get:
      summary: 'CRUD: Retrieve InvoiceItem'
      operationId: Object_GETInvoiceItem
      description: ''
      tags:
      - Invoice Items
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              ServiceEndDate: '2016-10-20'
              Id: 2c93808457d787030157e03089c03c3b
              ChargeDate: '2016-10-20T05:44:19.000+02:00'
              AccountingCode: Accounts Receivable
              UnitPrice: 10
              SubscriptionId: 2c93808457d787030157e03088bf3c24
              ProcessingType: 0
              Quantity: 1
              PicklistCustom__c: '2'
              ChargeAmount: 10
              ServiceStartDate: '2016-10-20'
              CreatedById: 2c93808457d787030157e03071873a9a
              CreatedDate: '2016-10-20T05:44:19.000+02:00'
              TaxAmount: 0
              ChargeName: OneTime_Flat Fee Pricing1476935059154
              SKU: API-SKU1476935058740
              UpdatedDate: '2016-10-20T05:44:21.000+02:00'
              UpdatedById: 2c93808457d787030157e03071873a9a
              TaxExemptAmount: 0
              InvoiceId: 2c93808457d787030157e03089bb3c39
              ProductDescription: Create product via API
              RatePlanChargeId: 2c93808457d787030157e03088ec3c2d
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoiceItem'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-item/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-item/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-item/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoiceItem'
      operationId: Object_DELETEInvoiceItem
      description: ''
      tags:
      - Invoice Items
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-item/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-item/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-item/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-item-adjustment/{id}:
    get:
      summary: 'CRUD: Retrieve InvoiceItemAdjustment'
      operationId: Object_GETInvoiceItemAdjustment
      description: ''
      tags:
      - Invoice Item Adjustments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              AdjustmentNumber: IIA-00000001
              ServiceEndDate: '2016-10-20'
              Id: 2c93808457d787030157e0324aea5158
              AccountingCode: Accounts Receivable
              UpdatedDate: '2016-10-20T05:46:14.000+02:00'
              AccountId: 2c93808457d787030157e032485b5131
              Comment: this is comments
              InvoiceNumber: INV00000001
              InvoiceId: 2c93808457d787030157e03248c75142
              ServiceStartDate: '2016-10-20'
              InvoiceItemName: OneTime_Flat Fee Pricing1476935174089
              CreatedDate: '2016-10-20T05:46:14.000+02:00'
              ReasonCode: Standard Adjustment
              UpdatedById: 2c93808457d787030157e032283c4fb2
              Amount: 1.2
              AdjustmentDate: '2016-10-20'
              Type: Credit
              Status: Processed
              SourceType: InvoiceDetail
              SourceId: 2c93808457d787030157e03248c95144
              ReferenceId: refid-1476935174845
              CreatedById: 2c93808457d787030157e032283c4fb2
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoiceItemAdjustment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-item-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoiceItemAdjustment'
      operationId: Object_DELETEInvoiceItemAdjustment
      description: ''
      tags:
      - Invoice Item Adjustments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-item-adjustment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-item-adjustment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-payment:
    post:
      summary: 'CRUD: Create InvoicePayment'
      operationId: Object_POSTInvoicePayment
      description: ''
      tags:
      - Invoice Payments
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateInvoicePayment'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02dee6e1b7a
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Amount\"\
          : 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"\
          PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}' \"https://rest.zuora.com/v1/object/invoice-payment\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/invoice-payment');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Amount\"\
          : 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"\
          PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-payment")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/invoice-payment", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-payment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-payment");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Amount\": 10, \n    \"InvoiceId\": \"2c93808457d787030157e02deadb1b6d\", \n    \"PaymentId\": \"2c93808457d787030157e02de5fc1b57\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/invoice-payment/{id}:
    get:
      summary: 'CRUD: Retrieve InvoicePayment'
      operationId: Object_GETInvoicePayment
      description: ''
      tags:
      - Invoice Payments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Id: 2c93808457d787030157e02dee6e1b7a
              PaymentId: 2c93808457d787030157e02de5fc1b57
              CreatedDate: '2016-10-20T05:41:29.000+02:00'
              UpdatedDate: '2016-10-20T05:41:29.000+02:00'
              Amount: 10
              CreatedById: 2c93808457d787030157e02dc3d919dc
              UpdatedById: 2c93808457d787030157e02dc3d919dc
              RefundAmount: 0
              InvoiceId: 2c93808457d787030157e02deadb1b6d
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoicePayment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-payment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-payment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-payment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update InvoicePayment'
      operationId: Object_PUTInvoicePayment
      description: ''
      tags:
      - Invoice Payments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyInvoicePayment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/invoice-payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-payment/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-payment/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/invoice-payment/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-payment/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoicePayment'
      operationId: Object_DELETEInvoicePayment
      description: ''
      tags:
      - Invoice Payments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-payment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-payment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-payment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-split/{id}:
    get:
      summary: 'CRUD: Retrieve InvoiceSplit'
      operationId: Object_GETInvoiceSplit
      description: ''
      tags:
      - Invoice Splits
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              UpdatedById: 2c93808457d787030157e03111d542ae
              Id: 2c93808457d787030157e0312cb2445c
              CreatedById: 2c93808457d787030157e03111d542ae
              CreatedDate: '2016-10-20T05:45:01.000+02:00'
              UpdatedDate: '2016-10-20T05:45:01.000+02:00'
              InvoiceId: 2c93808457d787030157e0312aa34449
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoiceSplit'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-split/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-split/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-split/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-split/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-split/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-split/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoiceSplit'
      operationId: Object_DELETEInvoiceSplit
      description: ''
      tags:
      - Invoice Splits
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-split/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-split/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-split/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-split/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-split/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-split/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/invoice-split-item/{id}:
    get:
      summary: 'CRUD: Retrieve InvoiceSplitItem'
      operationId: Object_GETInvoiceSplitItem
      description: ''
      tags:
      - Invoice Split Items
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              InvoiceDate: '2011-01-20'
              UpdatedById: 2c93808457d787030157e031bb3f4aa5
              CreatedById: 2c93808457d787030157e031bb3f4aa5
              CreatedDate: '2016-10-20T05:45:45.000+02:00'
              UpdatedDate: '2016-10-20T05:45:45.000+02:00'
              SplitPercentage: 50.9
              PaymentTerm: Due Upon Receipt
              Id: 2c93808457d787030157e031d7214c55
              InvoiceSplitId: 2c93808457d787030157e031d5844c53
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetInvoiceSplitItem'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-split-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-split-item/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-split-item/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/invoice-split-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-split-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-split-item/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete InvoiceSplitItem'
      operationId: Object_DELETEInvoiceSplitItem
      description: ''
      tags:
      - Invoice Split Items
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/invoice-split-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/invoice-split-item/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/invoice-split-item/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/invoice-split-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/invoice-split-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/invoice-split-item/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/payment:
    post:
      summary: 'CRUD: Create Payment'
      operationId: Object_POSTPayment
      description: ''
      tags:
      - Payments
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreatePayment'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03197714910
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\"\
          : 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\"\
          , \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\"\
          : \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\"\
          , \n    \"Type\": \"Electronic\"\n}' \"https://rest.zuora.com/v1/object/payment\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/payment');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\"\
          : 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\"\
          , \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\"\
          : \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\"\
          , \n    \"Type\": \"Electronic\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/payment", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 2, \n    \"AppliedCreditBalanceAmount\": 0, \n    \"AppliedInvoiceAmount\": 2, \n    \"EffectiveDate\": \"2016-10-20\", \n    \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n    \"PaymentMethodId\": \"2c93808457d787030157e03196d1490e\", \n    \"Status\": \"Processed\", \n    \"Type\": \"Electronic\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/payment/{id}:
    get:
      summary: 'CRUD: Retrieve Payment'
      operationId: Object_GETPayment
      description: ''
      tags:
      - Payments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              PaymentNumber: P-00000001
              SubmittedOn: '2016-10-20T05:45:28.000+02:00'
              Id: 2c93808457d787030157e03197714910
              UpdatedDate: '2016-10-20T05:45:28.000+02:00'
              GatewayState: Submitted
              Source: API
              AccountId: 2c93808457d787030157e03190e748ea
              BankIdentificationNumber: '411111'
              PaymentMethodSnapshotId: 2c93808457d787030157e0319770490f
              GatewayResponseCode: approve
              UpdatedById: 2c93808457d787030157e0316e624772
              Type: Electronic
              CreatedDate: '2016-10-20T05:45:28.000+02:00'
              RefundAmount: 0
              AppliedCreditBalanceAmount: 0
              Amount: 2
              PaymentMethodId: 2c93808457d787030157e03196d1490e
              Status: Processed
              CreatedById: 2c93808457d787030157e0316e624772
              GatewayResponse: This transaction has been approved by Test gateway.
              Gateway: TEST gateway name1476935120035
              ReferenceId: '1478427.2733506497'
              EffectiveDate: '2016-10-20'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetPayment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Payment'
      operationId: Object_PUTPayment
      description: ''
      tags:
      - Payments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyPayment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/payment/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Payment'
      operationId: Object_DELETEPayment
      description: ''
      tags:
      - Payments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/payment-method:
    post:
      summary: 'CRUD: Create PaymentMethod'
      operationId: Object_POSTPaymentMethod
      description: ''
      tags:
      - Payment Methods
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreatePaymentMethod'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03220ec4fad
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"\
          312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\"\
          : \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\"\
          : 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\"\
          : \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n  \
          \  \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\"\
          , \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\"\
          : 3, \n    \"Type\": \"CreditCard\"\n}' \"https://rest.zuora.com/v1/object/payment-method\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/payment-method');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"\
          312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\"\
          : \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\"\
          : 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\"\
          : \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n  \
          \  \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\"\
          , \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\"\
          : 3, \n    \"Type\": \"CreditCard\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/payment-method", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e0321fdf4fab\", \n    \"CreditCardAddress1\": \"312 2nd Ave W\", \n    \"CreditCardCity\": \"Seattle\", \n    \"CreditCardCountry\": \"United States\", \n    \"CreditCardExpirationMonth\": 12, \n    \"CreditCardExpirationYear\": 2020, \n    \"CreditCardHolderName\": \"Somebody\", \n    \"CreditCardNumber\": \"4111111111111111\", \n    \"CreditCardPostalCode\": \"98119\", \n    \"CreditCardState\": \"Washington\", \n    \"CreditCardType\": \"Visa\", \n    \"MaxConsecutivePaymentFailures\": 10, \n    \"PaymentRetryWindow\": 3, \n    \"Type\": \"CreditCard\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/payment-method/{id}:
    get:
      summary: 'CRUD: Retrieve PaymentMethod'
      operationId: Object_GETPaymentMethod
      description: ''
      tags:
      - Payment Methods
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              CreditCardExpirationMonth: 12
              CreditCardAddress1: 312 2nd Ave W
              Id: 2c93808457d787030157e0314e8145d7
              CreditCardExpirationYear: 2020
              UpdatedDate: '2016-10-20T05:45:10.000+02:00'
              CreditCardCity: Seattle
              CreditCardState: Washington
              AccountId: 2c93808457d787030157e0314c0945d4
              Type: CreditCard
              UpdatedById: 2c93808457d787030157e0312ef1445e
              CreditCardCountry: United States
              AchAddress1: 312 2nd Ave W
              CreditCardType: Visa
              CreatedById: 2c93808457d787030157e0312ef1445e
              CreditCardPostalCode: '98119'
              CreditCardHolderName: Somebody
              CreatedDate: '2016-10-20T05:45:10.000+02:00'
              TotalNumberOfProcessedPayments: 1
              PaymentMethodStatus: Active
              NumConsecutiveFailures: 0
              TotalNumberOfErrorPayments: 0
              CreditCardMaskNumber: '************1111'
              LastTransactionStatus: Approved
              LastTransactionDateTime: '2016-10-20T05:45:10.000+02:00'
              UseDefaultRetryRule: true
              BankIdentificationNumber: '411111'
              Active: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetPaymentMethod'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/payment-method/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update PaymentMethod'
      operationId: Object_PUTPaymentMethod
      description: ''
      tags:
      - Payment Methods
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyPaymentMethod'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02fced332a2
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"CreditCardAddress1\"\
          : \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\
          \n}' \"https://rest.zuora.com/v1/object/payment-method/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/payment-method/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"CreditCardAddress1\"\
          : \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/payment-method/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"CreditCardAddress1\": \"312 2nd Ave W_new\", \n    \"Id\": \"2c93808457d787030157e02fced332a2\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete PaymentMethod'
      operationId: Object_DELETEPaymentMethod
      description: ''
      tags:
      - Payment Methods
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02fcc8e329f
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/payment-method/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/payment-method-snapshot/{id}:
    get:
      summary: 'CRUD: Retrieve PaymentMethodSnapshot'
      operationId: Object_GETPaymentMethodSnapshot
      description: ''
      tags:
      - Payment Method Snapshots
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              CreditCardExpirationMonth: 12
              CreditCardAddress1: 312 2nd Ave W
              Id: 2c93808457d787030157e0314f2245d8
              CreditCardExpirationYear: 2020
              CreditCardCity: Seattle
              CreditCardState: Washington
              AccountId: 2c93808457d787030157e0314c0945d4
              NumConsecutiveFailures: 0
              CreditCardType: Visa
              BankIdentificationNumber: '411111'
              TotalNumberOfProcessedPayments: 0
              CreditCardPostalCode: '98119'
              CreditCardCountry: United States
              PaymentMethodId: 2c93808457d787030157e0314e8145d7
              CreditCardMaskNumber: '************1111'
              CreditCardHolderName: Somebody
              TotalNumberOfErrorPayments: 0
              UseDefaultRetryRule: true
              Type: CreditCard
              PaymentMethodStatus: Active
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetPaymentMethodSnapshot'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method-snapshot/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method-snapshot/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/payment-method-snapshot/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete PaymentMethodSnapshot'
      operationId: Object_DELETEPaymentMethodSnapshot
      description: ''
      tags:
      - Payment Method Snapshots
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method-snapshot/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method-snapshot/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/payment-method-snapshot/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method-snapshot/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/payment-method-transaction-log/{id}:
    get:
      summary: 'CRUD: Retrieve PaymentMethodTransactionLog'
      operationId: Object_GETPaymentMethodTransactionLog
      description: ''
      tags:
      - Payment Method Transaction Logs
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetPaymentMethodTransactionLog'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/payment-method-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete PaymentMethodTransactionLog'
      operationId: Object_DELETEPaymentMethodTransactionLog
      description: ''
      tags:
      - Payment Method Transaction Logs
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/payment-method-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-method-transaction-log/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/payment-transaction-log/{id}:
    get:
      summary: 'CRUD: Retrieve PaymentTransactionLog'
      operationId: Object_GETPaymentTransactionLog
      description: ''
      tags:
      - Payment Transaction Logs
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              GatewayReasonCodeDescription: This transaction has been approved by
                Test gateway.
              Id: 2c93808457d787030157e030b2703dcd
              PaymentId: 2c93808457d787030157e030b2673dcc
              TransactionId: '874200.071357285'
              GatewayState: Submitted
              TransactionDate: '2016-10-20T05:44:30.000+02:00'
              Gateway: TEST gateway name1476935063101
              GatewayReasonCode: approve
              GatewayTransactionType: Sale
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetPaymentTransactionLog'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-transaction-log/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-transaction-log/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/payment-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-transaction-log/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete PaymentTransactionLog'
      operationId: Object_DELETEPaymentTransactionLog
      description: ''
      tags:
      - Payment Transaction Logs
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/payment-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/payment-transaction-log/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/payment-transaction-log/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/payment-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/payment-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/payment-transaction-log/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/product:
    post:
      summary: 'CRUD: Create Product'
      operationId: Object_POSTProduct
      description: ''
      tags:
      - Products
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateProduct'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03246ae5129
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\"\
          : \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\"\
          , \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\"\
          , \n    \"SKU\": \"API-SKU1476935173677\"\n}' \"https://rest.zuora.com/v1/object/product\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/product');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\"\
          : \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\"\
          , \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\"\
          , \n    \"SKU\": \"API-SKU1476935173677\"\n}');\n\ntry {\n  $response =\
          \ $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/product", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Description\": \"Create product via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"P_1476935173677\", \n    \"SKU\": \"API-SKU1476935173677\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/product/{id}:
    get:
      summary: 'CRUD: Retrieve Product'
      operationId: Object_GETProduct
      description: ''
      tags:
      - Products
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Id: 2c93808457d787030157e02e7be22210
              CreatedById: 2c93808457d787030157e02e62af2097
              CreatedDate: '2016-10-20T05:42:05.000+02:00'
              UpdatedDate: '2016-10-20T05:42:05.000+02:00'
              SKU: API-SKU1476934925293
              EffectiveStartDate: '1966-10-20'
              UpdatedById: 2c93808457d787030157e02e62af2097
              Name: P_1476934925293_new
              EffectiveEndDate: '2066-10-20'
              Description: Create product via API_new
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetProduct'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/product/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Product'
      operationId: Object_PUTProduct
      description: ''
      tags:
      - Products
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyProduct'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02e7be22210
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\"\
          : \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\"\
          , \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\"\
          , \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\
          \n}' \"https://rest.zuora.com/v1/object/product/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/product/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\"\
          : \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\"\
          , \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\"\
          , \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/product/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Description\": \"Create product via API_new\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Id\": \"2c93808457d787030157e02e7be22210\", \n    \"Name\": \"P_1476934925293_new\", \n    \"SKU\": \"API-SKU1476934925293\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Product'
      operationId: Object_DELETEProduct
      description: ''
      tags:
      - Products
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02e7a22220e
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/product/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/product-feature/{id}:
    get:
      summary: 'CRUD: Retrieve ProductFeature'
      operationId: Object_GETProductFeature
      description: ''
      tags:
      - Product Features
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json: null
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetProductFeature'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-feature/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-feature/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/product-feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-feature/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete ProductFeature'
      operationId: Object_DELETEProductFeature
      description: ''
      tags:
      - Product Features
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02d820f16d3
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-feature/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-feature/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/product-feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-feature/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/product-rate-plan:
    post:
      summary: 'CRUD: Create ProductRatePlan'
      operationId: Object_POSTProductRatePlan
      description: ''
      tags:
      - Product Rate Plans
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateProductRatePlan'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e0324735512b
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Description\"\
          : \"Test create product rateplan via API\", \n    \"EffectiveEndDate\":\
          \ \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"\
          Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\
          \n}' \"https://rest.zuora.com/v1/object/product-rate-plan\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Description\"\
          : \"Test create product rateplan via API\", \n    \"EffectiveEndDate\":\
          \ \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"\
          Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/product-rate-plan", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Description\": \"Test create product rateplan via API\", \n    \"EffectiveEndDate\": \"2066-10-20\", \n    \"EffectiveStartDate\": \"1966-10-20\", \n    \"Name\": \"ProductRatePlan1476935173957\", \n    \"ProductId\": \"2c93808457d787030157e03246ae5129\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/product-rate-plan/{id}:
    get:
      summary: 'CRUD: Retrieve ProductRatePlan'
      operationId: Object_GETProductRatePlan
      description: ''
      tags:
      - Product Rate Plans
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              ProductId: 2c93808457d787030157e02da0231850
              Id: 2c93808457d787030157e02da0d91852
              CreatedById: 2c93808457d787030157e02d84c116d5
              CreatedDate: '2016-10-20T05:41:09.000+02:00'
              UpdatedDate: '2016-10-20T05:41:09.000+02:00'
              EffectiveStartDate: '1966-10-20'
              UpdatedById: 2c93808457d787030157e02d84c116d5
              Name: ProductRatePlan1476934869186_new
              EffectiveEndDate: '2066-10-20'
              Description: Test create product rateplan via API
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetProductRatePlan'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/product-rate-plan/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update ProductRatePlan'
      operationId: Object_PUTProductRatePlan
      description: ''
      tags:
      - Product Rate Plans
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyProductRatePlan'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02da0d91852
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\"\
          : \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\
          \n}' \"https://rest.zuora.com/v1/object/product-rate-plan/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\"\
          : \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/product-rate-plan/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Id\": \"2c93808457d787030157e02da0d91852\", \n    \"Name\": \"ProductRatePlan1476934869186_new\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete ProductRatePlan'
      operationId: Object_DELETEProductRatePlan
      description: ''
      tags:
      - Product Rate Plans
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02d9dde184f
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/product-rate-plan/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/product-rate-plan-charge/{id}:
    get:
      summary: 'CRUD: Retrieve ProductRatePlanCharge'
      operationId: Object_GETProductRatePlanCharge
      description: ''
      tags:
      - Product Rate Plan Charges
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              PriceChangeOption: NoChange
              IncludedUnits: 0
              OverageCalculationOption: EndOfSmoothingPeriod
              Id: 2c93808457d787030157e032002b4e21
              AccountingCode: name_1476935155610
              BillCycleDay: 1
              BillingPeriod: Month
              OverageUnusedUnitsCreditOption: NoCredit
              CreatedById: 2c93808457d787030157e031dd264c85
              RecognizedRevenueAccount: name_1476935155610
              ChargeType: Recurring
              BillCycleType: DefaultFromCustomer
              DefaultQuantity: 1
              UpToPeriodsType: Billing Periods
              ProductRatePlanId: 2c93808457d787030157e031ff054e1e
              Taxable: false
              Description: Recurring Flat Fee Pricing
              LegacyRevenueReporting: false
              ChargeModel: Flat Fee Pricing
              NumberOfPeriod: 1
              BillingTiming: In Advance
              PriceIncreasePercentage: 0
              CreatedDate: '2016-10-20T05:45:55.000+02:00'
              DeferredRevenueAccount: name_1476935155610
              UpdatedById: 2c93808457d787030157e031dd264c85
              Name: Recurring_Flat Fee Pricing1476935155610
              ListPriceBase: Per Billing Period
              EndDateCondition: SubscriptionEnd
              TriggerEvent: ContractEffective
              BillingPeriodAlignment: AlignToCharge
              RevenueRecognitionRuleName: Recognize upon invoicing
              UseTenantDefaultForPriceChange: true
              UpdatedDate: '2016-10-20T05:45:55.000+02:00'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetProductRatePlanCharge'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/product-rate-plan-charge/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete ProductRatePlanCharge'
      operationId: Object_DELETEProductRatePlanCharge
      description: ''
      tags:
      - Product Rate Plan Charges
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e031fcd34e19
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/product-rate-plan-charge/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan-charge/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/product-rate-plan-charge-tier/{id}:
    get:
      summary: 'CRUD: Retrieve ProductRatePlanChargeTier'
      operationId: Object_GETProductRatePlanChargeTier
      description: ''
      tags:
      - Product Rate Plan Charge Tiers
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              UpdatedById: 2c93808457d787030157e02fd0f132a4
              CreatedById: 2c93808457d787030157e02fd0f132a4
              CreatedDate: '2016-10-20T05:43:38.000+02:00'
              UpdatedDate: '2016-10-20T05:43:38.000+02:00'
              StartingUnit: 0
              Currency: USD
              EndingUnit: 0
              Id: 2c93808457d787030157e02fe725341f
              PriceFormat: Flat Fee
              Tier: 1
              Price: 30
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetProductRatePlanChargeTier'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/product-rate-plan-charge-tier/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete ProductRatePlanChargeTier'
      operationId: Object_DELETEProductRatePlanChargeTier
      description: ''
      tags:
      - Product Rate Plan Charge Tiers
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/product-rate-plan-charge-tier/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/product-rate-plan-charge-tier/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/rate-plan/{id}:
    get:
      summary: 'CRUD: Retrieve RatePlan'
      operationId: Object_GETRatePlan
      description: ''
      tags:
      - Rate Plans
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              UpdatedById: 2c93808457d787030157e02ea77723ef
              UpdatedDate: '2016-10-20T05:42:24.000+02:00'
              Id: 2c93808457d787030157e02ec54f259e
              CreatedById: 2c93808457d787030157e02ea77723ef
              CreatedDate: '2016-10-20T05:42:24.000+02:00'
              Name: ProductRatePlan1476934943281
              AmendmentId: 2c93808457d787030157e02ec4b42599
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRatePlan'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/rate-plan/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete RatePlan'
      operationId: Object_DELETERatePlan
      description: ''
      tags:
      - Rate Plans
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/rate-plan/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/rate-plan-charge/{id}:
    get:
      summary: 'CRUD: Retrieve RatePlanCharge'
      operationId: Object_GETRatePlanCharge
      description: ''
      tags:
      - Rate Plan Charges
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              PriceChangeOption: NoChange
              OverageCalculationOption: EndOfSmoothingPeriod
              Id: 2c93808457d787030157e02f9b802fad
              ChargeNumber: C-00000001
              BillingPeriodAlignment: AlignToCharge
              UpdatedDate: '2016-10-20T05:43:19.000+02:00'
              Version: 1
              BillCycleDay: 1
              BillingPeriod: Month
              IsLastSegment: true
              UpToPeriodsType: Billing Periods
              UpdatedById: 2c93808457d787030157e02f84852e27
              Quantity: 1
              EndDateCondition: SubscriptionEnd
              Segment: 1
              RatePlanId: 2c93808457d787030157e02f9b762fac
              ChargeModel: Flat Fee Pricing
              TriggerEvent: ContractEffective
              BillingTiming: In Arrears
              CreatedById: 2c93808457d787030157e02f84852e27
              CreatedDate: '2016-10-20T05:43:18.000+02:00'
              Name: Recurring_Flat Fee Pricing1476934998566
              ChargeType: Recurring
              OverageUnusedUnitsCreditOption: NoCredit
              OriginalId: 2c93808457d787030157e02f9b802fad
              ListPriceBase: Per Billing Period
              PriceIncreasePercentage: 0
              NumberOfPeriods: 1
              BillCycleType: DefaultFromCustomer
              Description: Recurring Flat Fee Pricing
              AccountingCode: name_1476934998566
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRatePlanCharge'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan-charge/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan-charge/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan-charge/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/rate-plan-charge/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan-charge/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan-charge/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete RatePlanCharge'
      operationId: Object_DELETERatePlanCharge
      description: ''
      tags:
      - Rate Plan Charges
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan-charge/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan-charge/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan-charge/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/rate-plan-charge/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan-charge/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan-charge/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/rate-plan-charge-tier/{id}:
    get:
      summary: 'CRUD: Retrieve RatePlanChargeTier'
      operationId: Object_GETRatePlanChargeTier
      description: ''
      tags:
      - Rate Plan Charge Tiers
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              UpdatedById: 2c93808457d787030157e02da3161854
              CreatedById: 2c93808457d787030157e02da3161854
              Price: 30
              UpdatedDate: '2016-10-20T05:41:16.000+02:00'
              StartingUnit: 0
              EndingUnit: 0
              Id: 2c93808457d787030157e02dbecc19d8
              CreatedDate: '2016-10-20T05:41:16.000+02:00'
              PriceFormat: Flat Fee
              Tier: 1
              RatePlanChargeId: 2c93808457d787030157e02dbee919da
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRatePlanChargeTier'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/rate-plan-charge-tier/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete RatePlanChargeTier'
      operationId: Object_DELETERatePlanChargeTier
      description: ''
      tags:
      - Rate Plan Charge Tiers
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/rate-plan-charge-tier/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/rate-plan-charge-tier/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/refund:
    post:
      summary: 'CRUD: Create Refund'
      operationId: Object_POSTRefund
      description: ''
      tags:
      - Refunds
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateRefund'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03198c84918
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"\
          Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\"\
          , \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\"\
          : {\n        \"RefundInvoicePayment\": [\n            {\n              \
          \  \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n             \
          \   \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\"\
          : \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\"\
          : \"Payment\", \n    \"Type\": \"Electronic\"\n}' \"https://rest.zuora.com/v1/object/refund\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/refund');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"\
          Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\"\
          , \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\"\
          : {\n        \"RefundInvoicePayment\": [\n            {\n              \
          \  \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n             \
          \   \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\"\
          : \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\"\
          : \"Payment\", \n    \"Type\": \"Electronic\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/refund", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e03190e748ea\", \n    \"Amount\": 1.1, \n    \"Comment\": \"this is comments\", \n    \"PaymentId\": \"2c93808457d787030157e03197714910\", \n    \"ReasonCode\": \"Standard Refund\", \n    \"RefundInvoicePaymentData\": {\n        \"RefundInvoicePayment\": [\n            {\n                \"InvoiceId\": \"2c93808457d787030157e03195604902\", \n                \"RefundAmount\": 1.1\n            }\n        ]\n    }, \n    \"SoftDescriptor\": \"thisSD\", \n    \"SoftDescriptorPhone\": \"a@a.com\", \n    \"SourceType\": \"Payment\", \n    \"Type\": \"Electronic\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/refund/{id}:
    get:
      summary: 'CRUD: Retrieve Refund'
      operationId: Object_GETRefund
      description: ''
      tags:
      - Refunds
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json: null
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRefund'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/refund/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Refund'
      operationId: Object_PUTRefund
      description: ''
      tags:
      - Refunds
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyRefund'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e03198c84918
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\"\
          : \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n\
          }' \"https://rest.zuora.com/v1/object/refund/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/refund/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\"\
          : \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n\
          }');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/refund/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Id\": \"2c93808457d787030157e03198c84918\", \n    \"Status\": \"Canceled\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Refund'
      operationId: Object_DELETERefund
      description: ''
      tags:
      - Refunds
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e03198c84918
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/refund/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/refund-invoice-payment/{id}:
    get:
      summary: 'CRUD: Retrieve RefundInvoicePayment'
      operationId: Object_GETRefundInvoicePayment
      description: ''
      tags:
      - Refund Invoice Payments
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRefundInvoicePayment'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund-invoice-payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund-invoice-payment/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/refund-invoice-payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete RefundInvoicePayment'
      operationId: Object_DELETERefundInvoicePayment
      description: ''
      tags:
      - Refund Invoice Payments
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund-invoice-payment/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund-invoice-payment/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/refund-invoice-payment/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund-invoice-payment/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/refund-transaction-log/{id}:
    get:
      summary: 'CRUD: Retrieve RefundTransactionLog'
      operationId: Object_GETRefundTransactionLog
      description: ''
      tags:
      - Refund Transaction Logs
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              GatewayReasonCodeDescription: This transaction has been approved by
                Test gateway.
              Id: 2c93808457d787030157e0304c0538f2
              TransactionId: '9036150.175338026'
              GatewayState: Submitted
              GatewayReasonCode: approve
              TransactionDate: '2016-10-20T05:44:04.000+02:00'
              Gateway: TEST gateway name1476935035677
              RefundId: 2c93808457d787030157e0304bf638f0
              GatewayTransactionType: Refund
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetRefundTransactionLog'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund-transaction-log/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund-transaction-log/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/refund-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund-transaction-log/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete RefundTransactionLog'
      operationId: Object_DELETERefundTransactionLog
      description: ''
      tags:
      - Refund Transaction Logs
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/refund-transaction-log/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/refund-transaction-log/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/refund-transaction-log/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/refund-transaction-log/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/refund-transaction-log/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/refund-transaction-log/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/subscription/{id}:
    get:
      summary: 'CRUD: Retrieve Subscription'
      operationId: Object_GETSubscription
      description: ''
      tags:
      - Subscriptions
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json: null
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetSubscription'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/subscription/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/subscription/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/subscription/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/subscription/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/subscription/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/subscription/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Subscription'
      operationId: Object_PUTSubscription
      description: ''
      tags:
      - Subscriptions
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifySubscription'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02ea04123cf
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X PUT -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Id\"\
          : \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\"\
          , \n    \"Notes\": \"this is notes_new\"\n}' \"https://rest.zuora.com/v1/object/subscription/{id}\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/subscription/{id}');\n\
          $request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Id\"\
          : \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\"\
          , \n    \"Notes\": \"this is notes_new\"\n}');\n\ntry {\n  $response = $request->send();\n\
          \n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n\
          }"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/subscription/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/subscription/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/subscription/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/subscription/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Id\": \"2c93808457d787030157e02ea04123cf\", \n    \"Name\": \"S_1476934934547_name\", \n    \"Notes\": \"this is notes_new\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Subscription'
      operationId: Object_DELETESubscription
      description: ''
      tags:
      - Subscriptions
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              success: true
              id: 2c93808457d787030157e02ea04123cf
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/subscription/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/subscription/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/subscription/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/subscription/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/subscription/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/subscription/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/subscription-product-feature/{id}:
    get:
      summary: 'CRUD: Retrieve SubscriptionProductFeature'
      operationId: Object_GETSubscriptionProductFeature
      description: ''
      tags:
      - Subscription Product Features
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              RatePlanId: 2c93808457d787030157e0316ae64769
              Id: 2c93808457d787030157e0316ae7476a
              CreatedById: 2c93808457d787030157e03151e845e3
              CreatedDate: '2016-10-20T05:45:17.000+02:00'
              Name: name_1476935116658
              FeatureCode: feature_code_1476935116658
              FeatureId: 2c93808457d787030157e03167fe4758
              UpdatedDate: '2016-10-20T05:45:18.000+02:00'
              UpdatedById: 2c93808457d787030157e03151e845e3
              Description: update description
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetSubscriptionProductFeature'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/subscription-product-feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/subscription-product-feature/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/subscription-product-feature/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/subscription-product-feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/subscription-product-feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/subscription-product-feature/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete SubscriptionProductFeature'
      operationId: Object_DELETESubscriptionProductFeature
      description: ''
      tags:
      - Subscription Product Features
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/subscription-product-feature/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/subscription-product-feature/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/subscription-product-feature/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/subscription-product-feature/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/subscription-product-feature/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/subscription-product-feature/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/taxation-item:
    post:
      summary: 'CRUD: Create TaxationItem'
      operationId: Object_POSTTaxationItem
      description: ''
      tags:
      - Taxation Items
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateTaxationItem'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e0306f413a96
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountingCode\"\
          : \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\"\
          : \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\"\
          , \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n \
          \   \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\"\
          : \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\"\
          : \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\":\
          \ \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}' \"https://rest.zuora.com/v1/object/taxation-item\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/taxation-item');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountingCode\"\
          : \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\"\
          : \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\"\
          , \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n \
          \   \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\"\
          : \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\"\
          : \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\":\
          \ \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}');\n\ntry {\n  $response\
          \ = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException\
          \ $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/taxation-item")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/taxation-item", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/taxation-item")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/taxation-item");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountingCode\": \"Usage Revenue\", \n    \"ExemptAmount\": 50, \n    \"InvoiceItemId\": \"2c93808457d787030157e0306cd43a88\", \n    \"Jurisdiction\": \"test\", \n    \"LocationCode\": \"code - 001\", \n    \"Name\": \"test\", \n    \"TaxAmount\": 3, \n    \"TaxCode\": \"taxcode\", \n    \"TaxCodeDescription\": \"description\", \n    \"TaxDate\": \"2016-10-20\", \n    \"TaxMode\": \"TaxExclusive\", \n    \"TaxRate\": 3, \n    \"TaxRateDescription\": \"test\", \n    \"TaxRateType\": \"FlatFee\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/taxation-item/{id}:
    get:
      summary: 'CRUD: Retrieve TaxationItem'
      operationId: Object_GETTaxationItem
      description: ''
      tags:
      - Taxation Items
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Jurisdiction: test
              InvoiceItemId: 2c93808457d787030157e0306cd43a88
              Id: 2c93808457d787030157e0306f413a96
              AccountingCode: Usage Revenue
              UpdatedDate: '2016-10-20T05:44:13.000+02:00'
              TaxCode: taxcode
              LocationCode: code - 001
              CreatedById: 2c93808457d787030157e0304e2f38f8
              CreatedDate: '2016-10-20T05:44:13.000+02:00'
              Name: test
              TaxCodeDescription: description
              TaxRateDescription: test
              TaxAmount: 3
              UpdatedById: 2c93808457d787030157e0304e2f38f8
              ExemptAmount: 50
              TaxRate: 3
              TaxRateType: FlatFee
              TaxDate: '2016-10-20'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetTaxationItem'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/taxation-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/taxation-item/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/taxation-item/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/taxation-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/taxation-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/taxation-item/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update TaxationItem'
      operationId: Object_PUTTaxationItem
      description: ''
      tags:
      - Taxation Items
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyTaxationItem'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/taxation-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/taxation-item/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/taxation-item/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/taxation-item/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/taxation-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/taxation-item/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete TaxationItem'
      operationId: Object_DELETETaxationItem
      description: ''
      tags:
      - Taxation Items
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/taxation-item/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/taxation-item/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/taxation-item/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/taxation-item/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/taxation-item/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/taxation-item/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/unit-of-measure:
    post:
      summary: 'CRUD: Create UnitOfMeasure'
      operationId: Object_POSTUnitOfMeasure
      description: ''
      tags:
      - Unit Of Measure
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateUnitOfMeasure'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e030232f3748
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"Active\"\
          : true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\"\
          , \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\
          \n}' \"https://rest.zuora.com/v1/object/unit-of-measure\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/unit-of-measure');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"Active\"\
          : true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\"\
          , \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/unit-of-measure")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/unit-of-measure", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/unit-of-measure")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/unit-of-measure");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"Active\": true, \n    \"DecimalPlaces\": 9, \n    \"DisplayedAs\": \"name_display_name_1476935033519\", \n    \"RoundingMode\": \"UP\", \n    \"UomName\": \"name_1476935033519\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/unit-of-measure/{id}:
    get:
      summary: 'CRUD: Retrieve UnitOfMeasure'
      operationId: Object_GETUnitOfMeasure
      description: ''
      tags:
      - Unit Of Measure
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              Active: true
              Id: 2c93808457d787030157e030232f3748
              CreatedById: 2c93808457d787030157e0300f6735d3
              CreatedDate: '2016-10-20T05:43:53.000+02:00'
              UpdatedDate: '2016-10-20T05:43:53.000+02:00'
              DisplayedAs: name_display_name_1476935033519
              UomName: name_1476935033519
              RoundingMode: UP
              UpdatedById: 2c93808457d787030157e0300f6735d3
              DecimalPlaces: 9
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetUnitOfMeasure'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/unit-of-measure/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/unit-of-measure/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/unit-of-measure/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/unit-of-measure/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/unit-of-measure/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/unit-of-measure/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update UnitOfMeasure'
      operationId: Object_PUTUnitOfMeasure
      description: ''
      tags:
      - Unit Of Measure
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyUnitOfMeasure'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/unit-of-measure/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/unit-of-measure/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/unit-of-measure/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/unit-of-measure/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/unit-of-measure/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/unit-of-measure/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete UnitOfMeasure'
      operationId: Object_DELETEUnitOfMeasure
      description: ''
      tags:
      - Unit Of Measure
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/unit-of-measure/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/unit-of-measure/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/unit-of-measure/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/unit-of-measure/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/unit-of-measure/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/unit-of-measure/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
  /object/usage:
    post:
      summary: 'CRUD: Create Usage'
      operationId: Object_POSTUsage
      description: ''
      tags:
      - Usage
      parameters:
      - name: CreateRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyCreateUsage'
      responses:
        '200':
          examples:
            application/json:
              Success: true
              Id: 2c93808457d787030157e02e0a301d0a
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
        '400':
          examples:
            application/json:
              Errors:
              - Code: INVALID_VALUE
                Message: The account number 123xProxy is invalid.
              Success: false
          description: ''
          schema:
            $ref: '#/definitions/ProxyBadRequestResponse'
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"apiAccessKeyId: dummyUser\" -H \"apiSecretAccessKey:\
          \ dummyPassword\" -H \"Content-Type: application/json\" -d '{\n    \"AccountId\"\
          : \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\"\
          , \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\"\
          : \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\"\
          : \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\"\
          : \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\"\
          , \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\
          \n}' \"https://rest.zuora.com/v1/object/usage\""
      - lang: PHP
        source: "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://rest.zuora.com/v1/object/usage');\n\
          $request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type'\
          \ => 'application/json',\n  'apisecretaccesskey' => 'dummyPassword',\n \
          \ 'apiaccesskeyid' => 'dummyUser'\n));\n\n$request->setBody('{\n    \"AccountId\"\
          : \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\"\
          , \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\"\
          : \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\"\
          : \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\"\
          : \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\"\
          , \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\
          \n}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n\
          } catch (HttpException $ex) {\n  echo $ex;\n}"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/usage")
            .post(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("POST", "/object/usage", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/usage")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Post.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/usage");
          var request = new RestRequest(Method.POST);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{\n    \"AccountId\": \"2c93808457d787030157e02e07991cfc\", \n    \"AccountNumber\": \"AN_1476934895501\", \n    \"ChargeId\": \"2c93808457d787030157e02e07cc1d04\", \n    \"ChargeNumber\": \"C-00000001\", \n    \"Description\": \"this is desc\", \n    \"EndDateTime\": \"2016-11-20T04:41:36.000+01:00\", \n    \"Quantity\": 9.9, \n    \"StartDateTime\": \"2016-10-20T05:41:36.000+02:00\", \n    \"SubscriptionId\": \"2c93808457d787030157e02e07b11cff\", \n    \"SubscriptionNumber\": \"S_1476934895501\", \n    \"UOM\": \"Each\"\n}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
  /object/usage/{id}:
    get:
      summary: 'CRUD: Retrieve Usage'
      operationId: Object_GETUsage
      description: ''
      tags:
      - Usage
      parameters:
      - name: fields
        in: query
        required: false
        type: string
        description: Object fields to return
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          examples:
            application/json:
              AccountNumber: AN_1476934895501
              UpdatedDate: '2016-10-20T05:41:36.000+02:00'
              UpdatedById: 2c93808457d787030157e02df0221b7c
              Id: 2c93808457d787030157e02e0a301d0a
              CreatedById: 2c93808457d787030157e02df0221b7c
              SourceType: API
              SubmissionDateTime: '2016-10-20T05:41:36.000+02:00'
              CreatedDate: '2016-10-20T05:41:36.000+02:00'
              SubscriptionId: 2c93808457d787030157e02e07b11cff
              UOM: Each
              RbeStatus: Pending
              ChargeId: 2c93808457d787030157e02e07cc1d04
              AccountId: 2c93808457d787030157e02e07991cfc
              Quantity: 9.9
              StartDateTime: '2016-10-20T05:41:36.000+02:00'
              EndDateTime: '2016-11-20T04:41:36.000+01:00'
          description: ''
          schema:
            $ref: '#/definitions/ProxyGetUsage'
        '404':
          examples:
            application/json:
              records: {}
              size: 0
              done: true
          description: ''
          schema:
            $ref: '#/definitions/ProxyNoDataResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/usage/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/usage/{id}');
          $request->setMethod(HTTP_METH_GET);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/usage/{id}")
            .get()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("GET", "/object/usage/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/usage/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/usage/{id}");
          var request = new RestRequest(Method.GET);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
    put:
      summary: 'CRUD: Update Usage'
      operationId: Object_PUTUsage
      description: ''
      tags:
      - Usage
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      - name: ModifyRequest
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ProxyModifyUsage'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyCreateOrModifyResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" -d ''{}'' "https://rest.zuora.com/v1/object/usage/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/usage/{id}');
          $request->setMethod(HTTP_METH_PUT);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          $request->setBody('{}');

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{}");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/usage/{id}")
            .put(body)
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          payload = "{}"

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              'content-type': "application/json",
              }

          conn.request("PUT", "/object/usage/{id}", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/usage/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Put.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'
          request["content-type"] = 'application/json'
          request.body = "{}"

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/usage/{id}");
          var request = new RestRequest(Method.PUT);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          request.AddParameter("application/json", "{}", ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
    delete:
      summary: 'CRUD: Delete Usage'
      operationId: Object_DELETEUsage
      description: ''
      tags:
      - Usage
      parameters:
      - name: id
        in: path
        description: Object id
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ProxyDeleteResponse'
      x-code-samples:
      - lang: Curl
        source: 'curl -X DELETE -H "apiAccessKeyId: dummyUser" -H "apiSecretAccessKey:
          dummyPassword" -H "Content-Type: application/json" "https://rest.zuora.com/v1/object/usage/{id}"'
      - lang: PHP
        source: |-
          <?php

          $request = new HttpRequest();
          $request->setUrl('https://rest.zuora.com/v1/object/usage/{id}');
          $request->setMethod(HTTP_METH_DELETE);

          $request->setHeaders(array(
            'content-type' => 'application/json',
            'apisecretaccesskey' => 'dummyPassword',
            'apiaccesskeyid' => 'dummyUser'
          ));

          try {
            $response = $request->send();

            echo $response->getBody();
          } catch (HttpException $ex) {
            echo $ex;
          }
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();

          MediaType mediaType = MediaType.parse("application/json");
          Request request = new Request.Builder()
            .url("https://rest.zuora.com/v1/object/usage/{id}")
            .delete()
            .addHeader("apiaccesskeyid", "dummyUser")
            .addHeader("apisecretaccesskey", "dummyPassword")
            .addHeader("content-type", "application/json")
            .addHeader("cache-control", "no-cache")
            .build();

          Response response = client.newCall(request).execute();
      - lang: Python
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("https://rest.zuora.com/v1")

          headers = {
              'apiaccesskeyid': "dummyUser",
              'apisecretaccesskey': "dummyPassword",
              }

          conn.request("DELETE", "/object/usage/{id}", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Ruby
        source: |-
          require 'uri'
          require 'net/http'

          url = URI("https://rest.zuora.com/v1/object/usage/{id}")

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Delete.new(url)
          request["apiaccesskeyid"] = 'dummyUser'
          request["apisecretaccesskey"] = 'dummyPassword'

          response = http.request(request)
          puts response.read_body
      - lang: C#
        source: |-
          var client = new RestClient("https://rest.zuora.com/v1/object/usage/{id}");
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("content-type", "application/json");
          request.AddHeader("apisecretaccesskey", "dummyPassword");
          request.AddHeader("apiaccesskeyid", "dummyUser");
          IRestResponse response = client.Execute(request);
definitions:
  AmendRequest:
    properties:
      AmendOptions:
        description: 'Use the `AmendOptions` container to specify billing options,
          such as invoice generation and when to process payments.

          '
        properties:
          ApplyCreditBalance:
            description: ''
            type: boolean
          ElectronicPaymentOptions:
            $ref: '#/definitions/ElectronicPaymentOptions'
          ExternalPaymentOptions:
            $ref: '#/definitions/ExternalPaymentOptions'
          GenerateInvoice:
            description: ''
            type: boolean
          InvoiceProcessingOptions:
            $ref: '#/definitions/InvoiceProcessingOptions'
          ProcessPayments:
            description: ''
            type: boolean
        type: object
      Amendments:
        description: "The `Amendment` object holds the changes that you want to make\
          \ to the Subscription specified by the `SubscriptionId`, \nincluding its\
          \ `RatePlan`, `RatePlanCharge`, and `RatePlanChargeTier`.\n"
        items:
          $ref: '#/definitions/Amendment'
        type: array
      PreviewOptions:
        description: "Use the `PreviewOptions` container to preview an amendment before\
          \ committing its changes to a subscription. \nYou can use a preview to provide\
          \ a quote of the new charges to a customer before the customer commits to\
          \ the amended subscription. \nFor example, make an Amend call with an Amendment\
          \ object that removes an existing rate plan, \nanother Amendment object\
          \ that adds a new rate plan, and turn on the preview options.\n"
        properties:
          EnablePreviewMode:
            description: ' Determines whether to create an amendment or display a
              preview of the change.'
            type: boolean
          IncludeExistingDraftInvoiceItems:
            description: ' Specifies whether to include draft invoice items in amendment
              previews.'
            type: boolean
          NumberOfPeriods:
            description: ' Indicates the number of invoice periods to show in a preview.'
            format: int32
            type: integer
          PreviewThroughTermEnd:
            description: ' Request to preview the charge through the end of the subscription
              term.'
            type: boolean
          PreviewType:
            description: ' The type of preview you will receive from a preview request.'
            type: string
        type: object
    type: object
  AmendResult:
    properties:
      AmendmentIds:
        description: ' The IDs of the associated Amendment object. There can be as
          many as three AmendmentId values.'
        type: string
      ChargeMetricsData:
        $ref: '#/definitions/ChargeMetricsData'
      Errors:
        description: ''
        items:
          $ref: '#/definitions/Error'
        type: array
      GatewayResponse:
        description: ''
        type: string
      GatewayResponseCode:
        description: ''
        type: string
      InvoiceDatas:
        description: ''
        items:
          $ref: '#/definitions/InvoiceData'
        type: array
      InvoiceId:
        description: ''
        type: string
      PaymentId:
        description: ''
        type: string
      PaymentTransactionNumber:
        description: ''
        type: string
      SubscriptionId:
        description: ''
        type: string
      Success:
        description: ''
        type: boolean
      TotalDeltaMrr:
        description: ''
        format: double
        type: number
      TotalDeltaTcv:
        description: ''
        format: double
        type: number
    type: object
  Amendment:
    properties:
      AutoRenew:
        description: " Determines whether the subscription is automatically renewed,\
          \ or whether it expires at the end of the term and needs to be manually\
          \ renewed. **Required:** For amendment of type TermsAndConditions when changing\
          \ the automatic renewal status of a subscription.\n\n\n**Values**: true,\
          \ false "
        type: boolean
      Code:
        description: |2
           A unique alphanumeric string that identifies the amendment.


          **Character limit**: 50

          **Values**: one of the following:

          - `null` generates a value automatically
          - A string
        type: string
      ContractEffectiveDate:
        description: ' The date when the amendment''s changes become effective for
          billing purposes.

          '
        format: date
        type: string
      CreatedById:
        description: " The user ID of the person who created the amendment.\n\n\n\
          **Character limit**: 32\n\n**Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the amendment was created.\n\n\n**Values**: automatically\
          \ generated "
        format: date-time
        type: string
      CurrentTerm:
        description: " The length of the period for the current subscription term.\
          \ This field can be updated when Status is `Draft`.\n\n**Required**: Only\
          \ if the value of the Type field is set to `TermsAndConditions` and TermType\
          \ is set to `TERMED`. This field is not required if `TermType` is set to\
          \ `EVERGREEN`.\n\n\n**Values**: a valid number "
        format: int64
        type: integer
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term.

          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`


          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the CurrentTerm field to specify the current subscription term.
        type: string
      CustomerAcceptanceDate:
        description: |2+
           The date when the customer accepts the amendment's changes to the subscription. Use this field if [Zuora is configured to require customer acceptance in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings). **Required**: Only if the value of the Status field is set to PendingAcceptance.

        format: date
        type: string
      Description:
        description: " A description of the amendment.\n\n\n**Character limit**: 500\n\
          \n**Values**: maximum 500 characters "
        type: string
      DestinationAccountId:
        description: " The ID of the account that the subscription is being transferred\
          \ to.\n\n\n**Character limit**: 32\n\n**Values**: a valid account ID "
        type: string
      DestinationInvoiceOwnerId:
        description: " The ID of the invoice that the subscription is being transferred\
          \ to.\n\n\n**Character limit**: 32\n\n**Values**: a valid invoice ID "
        type: string
      EffectiveDate:
        description: |2+
           The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.
          **Required**: For the cancellation amendments. Optional for other types of amendments.

        format: date
        type: string
      Name:
        description: " The name of the amendment.\n\n\n**Character limit**: 100\n\n\
          **Values**: a string of 100 characters or fewer "
        type: string
      RatePlanData:
        description: 'A container for one `RatePlanData`.

          '
        properties:
          RatePlan:
            $ref: '#/definitions/RatePlan'
          RatePlanChargeData:
            description: ''
            items:
              $ref: '#/definitions/RatePlanChargeData'
            type: array
          SubscriptionProductFeatureList:
            $ref: '#/definitions/SubscriptionProductFeatureList'
        type: object
      RenewalSetting:
        description: " Specifies whether a termed subscription will remain termed\
          \ or change to evergreen when it is renewed.\n**Required**: If TermType\
          \ is Termed\n\n**Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN "
        type: string
      RenewalTerm:
        description: " The term of renewal for the amended subscription. This field\
          \ can be updated when Status is `Draft`.\n**Required**: Only if the value\
          \ of the `Type` field is set to `TermsAndConditions`.\n\n\n\n**Values:**\
          \ a valid number "
        format: int64
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term. This field can be updated when Status is `Draft`.
          **Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.


          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      ServiceActivationDate:
        description: |2
           The date when service is activated. Use this field if [Zuora is configured to require service activation in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings).

          **Required**: Only if the value of the `Status` field is set to `PendingActivation`.
        format: date
        type: string
      SpecificUpdateDate:
        description: |
          The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.


          **Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.
        format: date
        type: string
      Status:
        description: |2
           The status of the amendment. Type: string (enum)



          **Values**: one of the following:

          - Draft (default, if left null)
          - Pending Activation
          - Pending Acceptance
          - Completed
        type: string
      SubscriptionId:
        description: " The ID of the subscription that the amendment changes.\n\n\n\
          **Character limit**: 32\n\n**Values**: a valid subscription ID "
        type: string
      TermStartDate:
        description: |2
           The date when the new terms and conditions take effect.
          **Required**: Only if the value of the Type field is set to TermsAndConditions.
        format: date
        type: string
      TermType:
        description: " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A\
          \ TERMED subscription has an expiration date, and must be manually renewed.\n\
          - An EVERGREEN subscription doesn't have an expiration date, and must be\
          \ manually ended.\n\n**Required**: Only when as part of an amendment of\
          \ type TermsAndConditions &#65279;to change the term type of a subscription.\
          \ Type: string\n\n**Character limit**: 9\n\n**Values**: TERMED, EVERGREEN "
        type: string
      Type:
        description: |2
           The type of amendment.


          **Character limit**: 18



          **Values**: one of the following:

          - Cancellation
          - NewProduct
          - OwnerTransfer
          - RemoveProduct
          - Renewal
          - UpdateProduct
          - TermsAndConditions
          - SuspendSubscription (This value is in **Limited Availability**.)
          - ResumeSubscription (This value is in **Limited Availability**.)
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the amendment.\n\n\n**Character\
          \ limit**: 32\n\n**Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the amendment was last updated.\n\n\n**Values**:\
          \ automatically generated "
        format: date-time
        type: string
    type: object
  ChargeMetricsData:
    properties:
      ChargeMetrics:
        description: ''
        items:
          $ref: '#/definitions/NewChargeMetrics'
        type: array
    type: object
  CommonResponseType:
    properties:
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  DeleteResult:
    properties:
      errors:
        description: 'If the delete failed, this contains an array of Error objects.

          '
        items:
          $ref: '#/definitions/Error'
        type: array
      id:
        description: 'ID of the deleted object.

          '
        type: string
      success:
        description: 'A boolean field indicating the success of the delete operation.
          If the delete was successful, it is `true`. Otherwise, `false`.

          '
        type: boolean
    type: object
  ElectronicPaymentOptions:
    properties:
      PaymentMethodId:
        description: ''
        type: string
    type: object
  Error:
    properties:
      Code:
        description: ''
        type: string
      Field:
        description: ''
        type: string
      Message:
        description: ''
        type: string
    type: object
  EventRevenueItemType:
    properties:
      accountingPeriodName:
        description: 'Name of the accounting period. The open-ended accounting period
          is named `Open-Ended`.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
    required:
    - accountingPeriodName
    title: revenueItems
    type: object
  ExecuteResult:
    properties:
      Errors:
        description: ''
        items:
          $ref: '#/definitions/Error'
        type: array
      Id:
        description: 'The ID of the object in the call. The value is the same as the
          value you provide in the `ids` field for the request.

          '
        type: string
      Success:
        description: 'Returns `true` if the call was processed successfully, otherwise
          `false`.

          '
        type: boolean
    type: object
  ExternalPaymentOptions:
    properties:
      Amount:
        description: ''
        format: double
        type: number
      EffectiveDate:
        description: ''
        format: date
        type: string
      GatewayOrderId:
        description: ''
        type: string
      PaymentMethodId:
        description: ''
        type: string
      ReferenceId:
        description: ''
        type: string
    type: object
  GETAccountSummaryInvoiceType:
    properties:
      amount:
        description: 'Invoice amount before adjustments, discounts, and similar items.

          '
        format: decimal
        type: string
      balance:
        description: 'Balance due on the invoice.

          '
        format: decimal
        type: string
      dueDate:
        description: 'Due date as `yyyy-mm-dd`.

          '
        format: date
        type: string
      id:
        description: 'Invoice ID.

          '
        type: string
      invoiceDate:
        description: 'Invoice date as `yyyy-mm-dd`.

          '
        format: date
        type: string
      invoiceNumber:
        description: 'Invoice number.

          '
        type: string
      status:
        description: 'Invoice status - not the payment status of the invoice, just
          the status of the invoice itself. Possible values are: `Posted`, `Draft`,
          `Canceled`, `Error`.

          '
        type: string
    title: invoices
    type: object
  GETAccountSummaryPaymentInvoiceType:
    properties:
      appliedPaymentAmount:
        description: 'Amount of payment applied to the invoice.

          '
        format: decimal
        type: string
      invoiceId:
        description: 'Invoice ID.

          '
        type: string
      invoiceNumber:
        description: 'Invoice number.

          '
        type: string
    title: paidInvoices
    type: object
  GETAccountSummaryPaymentType:
    properties:
      effectiveDate:
        description: 'Effective date as `yyyy-mm-dd`.

          '
        format: date
        type: string
      id:
        description: 'Payment ID.

          '
        type: string
      paidInvoices:
        description: 'Container for paid invoices for this subscription.

          '
        items:
          $ref: '#/definitions/GETAccountSummaryPaymentInvoiceType'
        type: array
      paymentNumber:
        description: 'Payment number.

          '
        type: string
      paymentType:
        description: 'Payment type; possible values are: `External`, `Electronic`.

          '
        type: string
      status:
        description: 'Payment status. Possible values are: `Draft`, `Processing`,
          `Processed`, `Error`, `Voided`, `Canceled`, `Posted`.

          '
        type: string
    title: payments
    type: object
  GETAccountSummarySubscriptionRatePlanType:
    properties:
      productId:
        description: 'Product ID.

          '
        type: string
      productName:
        description: 'Product name.

          '
        type: string
      productRatePlanId:
        description: 'Product Rate Plan ID.

          '
        type: string
      productSku:
        description: ''
        type: string
      ratePlanName:
        description: 'Rate plan name.

          '
        type: string
    title: ratePlans
    type: object
  GETAccountSummarySubscriptionType:
    properties:
      CpqBundleJsonId__QT:
        description: ''
        type: string
      OpportunityCloseDate__QT:
        description: ''
        type: string
      OpportunityName__QT:
        description: ''
        type: string
      QuoteBusinessType__QT:
        description: ''
        type: string
      QuoteNumber__QT:
        description: ''
        type: string
      QuoteType__QT:
        description: ''
        type: string
      autoRenew:
        description: 'If `true`, auto-renew is enabled. If `false`, auto-renew is
          disabled.

          '
        type: boolean
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      id:
        description: 'Subscription ID.

          '
        type: string
      initialTerm:
        description: "Duration of the initial subscription term in whole months. \n"
        type: string
      ratePlans:
        description: 'Container for rate plans for this subscription.

          '
        items:
          $ref: '#/definitions/GETAccountSummarySubscriptionRatePlanType'
        type: array
      renewalTerm:
        description: 'Duration of the renewal term in whole months.

          '
        type: string
      status:
        description: 'Subscription status; possible values are: `Draft`, `PendingActivation`,
          `PendingAcceptance`, `Active`, `Cancelled`, `Expired`.

          '
        type: string
      subscriptionNumber:
        description: 'Subscription Number.

          '
        type: string
      subscriptionStartDate:
        description: 'Subscription start date.

          '
        format: date
        type: string
      termEndDate:
        description: 'End date of the subscription term. If the subscription is evergreen,
          this is either null or equal to the cancellation date, as appropriate.

          '
        format: date
        type: string
      termStartDate:
        description: 'Start date of the subscription term. If this is a renewal subscription,
          this date is different than the subscription start date.

          '
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
    title: subscriptions
    type: object
  GETAccountSummaryType:
    properties:
      basicInfo:
        description: 'Container for basic information about the account.

          '
        properties:
          accountNumber:
            description: 'Account number.

              '
            type: string
          additionalEmailAddresses:
            description: 'A list of additional email addresses to receive emailed
              invoices.

              '
            items:
              type: string
            type: array
          balance:
            description: 'Current outstanding balance.

              '
            format: decimal
            type: string
          batch:
            description: 'The alias name given to a batch. A string of 50 characters
              or less.

              '
            type: string
          billCycleDay:
            description: 'Billing cycle day (BCD), the day of the month when a bill
              run generates invoices for the account.

              '
            type: string
          currency:
            description: 'A currency value.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          defaultPaymentMethod:
            description: ''
            properties:
              creditCardExpirationMonth:
                description: 'Two-digit numeric card expiration month as `mm`.

                  '
                type: string
              creditCardExpirationYear:
                description: 'Four-digit card expiration year as `yyyy`.

                  '
                type: string
              creditCardNumber:
                description: 'Credit card number, 16 characters or less, displayed
                  in masked format (e.g., ************1234).

                  '
                type: string
              creditCardType:
                description: 'Possible values are: `Visa`, `MasterCard`, `AmericanExpress`,
                  `Discover`.

                  '
                type: string
              id:
                description: 'The ID of the credit card payment method associated
                  with this account.

                  '
                type: string
              paymentMethodType:
                description: ''
                type: string
            type: object
          id:
            description: 'Account ID.

              '
            type: string
          invoiceDeliveryPrefsEmail:
            description: "Whether the customer wants to receive invoices through email.\
              \ \n"
            type: boolean
          invoiceDeliveryPrefsPrint:
            description: 'Whether the customer wants to receive printed invoices,
              such as through postal mail.

              '
            type: boolean
          lastInvoiceDate:
            description: 'Date of the most recent invoice for the account; null if
              no invoice has ever been generated.

              '
            format: date
            type: string
          lastPaymentAmount:
            description: 'Amount of the most recent payment collected for the account;
              null if no payment has ever been collected.

              '
            format: decimal
            type: string
          lastPaymentDate:
            description: 'Date of the most recent payment collected for the account.
              Null if no payment has ever been collected.

              '
            format: date
            type: string
          name:
            description: 'Account name.

              '
            type: string
          status:
            description: 'Account status; possible values are: `Active`, `Draft`,
              `Canceled`.

              '
            type: string
          tags:
            description: ''
            type: string
        type: object
      billToContact:
        description: Container for bill-to contact information.
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'A valid country name or abbreviation.

              '
            type: string
          county:
            description: 'County; 32 characters or less. Zuora Tax uses this information
              to calculate county taxation.          '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          id:
            description: 'Contact ID.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          state:
            description: 'State name or 2-character abbreviation.

              '
            type: string
          taxRegion:
            description: 'A region string, defined in your Zuora tax rules.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        type: object
      invoices:
        description: 'Container for invoices. Only returns the last 6 invoices.

          '
        items:
          $ref: '#/definitions/GETAccountSummaryInvoiceType'
        type: array
      payments:
        description: 'Container for payments. Only returns the last 6 payments.

          '
        items:
          $ref: '#/definitions/GETAccountSummaryPaymentType'
        type: array
      soldToContact:
        description: 'Container for sold-to contact information; uses the same structure
          as `billToContact`.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'A valid country name or abbreviation

              '
            type: string
          county:
            description: 'County; 32 characters or less. Zuora Tax uses this information
              to calculate county taxation.          '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          id:
            description: 'Contact ID.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          state:
            description: 'State name or 2-character abbreviation.

              '
            type: string
          taxRegion:
            description: 'A region string, defined in your Zuora tax rules.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        type: object
      subscriptions:
        description: 'Container for subscriptions.

          '
        items:
          $ref: '#/definitions/GETAccountSummarySubscriptionType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      taxInfo:
        description: 'Container for tax exempt information, used to establish the
          tax exempt status of a customer account.

          '
        properties:
          VATId:
            description: 'EU Value Added Tax ID.

              '
            type: string
          companyCode:
            description: 'Unique code that identifies a company account in Avalara.

              '
            type: string
          exemptCertificateId:
            description: 'ID of the customer tax exemption certificate.

              '
            type: string
          exemptCertificateType:
            description: 'Type of tax exemption certificate that the customer holds.

              '
            type: string
          exemptDescription:
            description: 'Description of the tax exemption certificate that the customer
              holds.

              '
            type: string
          exemptEffectiveDate:
            description: 'Date when the customer tax exemption starts.

              '
            format: date
            type: string
          exemptExpirationDate:
            description: 'Date when the customer tax exemption expires.

              '
            format: date
            type: string
          exemptIssuingJurisdiction:
            description: 'Jurisdiction in which the customer tax exemption certificate
              was issued.

              '
            type: string
          exemptStatus:
            description: 'Status of the account tax exemption.

              '
            type: string
        type: object
      usage:
        description: 'Container for usage data. Only returns the last 6 months of
          usage.

          '
        items:
          $ref: '#/definitions/GETAccountSummaryUsageType'
        type: array
    type: object
  GETAccountSummaryUsageType:
    properties:
      quantity:
        description: 'Number of units used.

          '
        format: decimal
        type: string
      startDate:
        description: 'The start date of a usage period as `yyyy-mm`. Zuora uses this
          field value to determine the usage date.

          '
        format: date
        type: string
      unitOfMeasure:
        description: 'Unit by which consumption is measured, as configured in the
          Billing Settings section of the web-based UI.

          '
        type: string
    title: usage
    type: object
  GETAccountType:
    properties:
      basicInfo:
        description: 'Container for basic information about the account.

          '
        properties:
          accountNumber:
            description: 'Account number.

              '
            type: string
          batch:
            description: 'The alias name given to a batch. A string of 50 characters
              or less.

              '
            type: string
          communicationProfileId:
            description: 'ID of a communication profile.

              '
            type: string
          crmId:
            description: 'CRM account ID for the account, 100 characters or less.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          id:
            description: 'Account ID.

              '
            type: string
          invoiceTemplateId:
            description: 'Invoice template ID, configured in Billing Settings in the
              Zuora UI.

              '
            type: string
          name:
            description: 'Account name.

              '
            type: string
          notes:
            description: 'Notes associated with the account, up to 65,535 characters.

              '
            type: string
          status:
            description: 'Account status; possible values are: `Active`, `Draft`,
              `Canceled`.

              '
            type: string
          tags:
            description: ''
            type: string
        type: object
      billToContact:
        description: 'Container for bill-to contact information.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country name or abbreviation.

              '
            type: string
          county:
            description: 'County; 32 characters or less. Zuora Tax uses this information
              to calculate county taxation.          '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact.

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State name or 2-character abbreviation.

              '
            type: string
          taxRegion:
            description: 'A region string, defined in your Zuora tax rules.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        type: object
      billingAndPayment:
        description: 'Container for billing and payment information for the account.

          '
        properties:
          additionalEmailAddresses:
            description: 'A list of additional email addresses to receive emailed
              invoices.

              '
            items:
              type: string
            type: array
          billCycleDay:
            description: 'Billing cycle day (BCD), the day of the month when a bill
              run generates invoices for the account.

              '
            type: string
          currency:
            description: 'A currency defined in the web-based UI administrative settings.

              '
            type: string
          invoiceDeliveryPrefsEmail:
            description: "Whether the customer wants to receive invoices through email.\
              \ \n"
            type: boolean
          invoiceDeliveryPrefsPrint:
            description: 'Whether the customer wants to receive printed invoices,
              such as through postal mail.

              '
            type: boolean
          paymentGateway:
            description: 'The name of the payment gateway instance. If null or left
              unassigned, the Account will use the Default Gateway.

              '
            type: string
          paymentTerm:
            description: 'A payment-terms indicator defined in the web-based UI administrative
              settings, e.g., "Net 30".

              '
            type: string
        type: object
      metrics:
        description: 'Container for account metrics.

          '
        properties:
          balance:
            description: 'The customer''s total invoice balance minus credit balance.

              '
            format: decimal
            type: string
          contractedMrr:
            description: 'Future expected MRR that accounts for future upgrades, downgrades,
              upsells and cancellations.

              '
            format: decimal
            type: string
          creditBalance:
            description: 'Current credit balance.

              '
            format: decimal
            type: string
          totalInvoiceBalance:
            description: 'Total of all open invoices.

              '
            format: decimal
            type: string
        type: object
      soldToContact:
        description: 'Container for sold-to contact information. Uses the same field
          structure as billToContact.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country name or abbreviation.

              '
            type: string
          county:
            description: 'County; 32 characters or less. Zuora tax uses this information
              to calculate county taxation.          '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact.

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State name or 2-character abbreviation.

              '
            type: string
          taxRegion:
            description: 'A region string, defined in your Zuora tax rules.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        type: object
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      taxInfo:
        description: 'Container for tax exempt information, used to establish the
          tax exempt status of a customer account.

          '
        properties:
          VATId:
            description: 'EU Value Added Tax ID.

              '
            type: string
          companyCode:
            description: 'Unique code that identifies a company account in Avalara.

              '
            type: string
          exemptCertificateId:
            description: 'ID of the customer tax exemption certificate.

              '
            type: string
          exemptCertificateType:
            description: 'Type of tax exemption certificate that the customer holds.

              '
            type: string
          exemptDescription:
            description: 'Description of the tax exemption certificate that the customer
              holds.

              '
            type: string
          exemptEffectiveDate:
            description: 'Date when the customer tax exemption starts.

              '
            format: date
            type: string
          exemptExpirationDate:
            description: 'Date when the customer tax exemption expires.

              '
            format: date
            type: string
          exemptIssuingJurisdiction:
            description: 'Jurisdiction in which the customer tax exemption certificate
              was issued.

              '
            type: string
          exemptStatus:
            description: 'Status of the account tax exemption.

              '
            type: string
        type: object
    type: object
  GETAccountingCodeItemType:
    properties:
      category:
        description: |
          The category associated with the accounting code.

          Possible values:
          * `Assets`
          * `Liabilities`
          * `Equity`
          * `Revenue`
          * `Expenses`
        type: string
      createdBy:
        description: 'The ID of the user who created the accounting code.

          '
        type: string
      createdOn:
        description: 'Date and time when the accounting code was created.

          '
        format: date-time
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      glAccountName:
        description: |
          Name of the account in your general ledger.

          Field only available if you have Zuora Finance enabled.
        type: string
      glAccountNumber:
        description: |
          Account number in your general ledger.

          Field only available if you have Zuora Finance enabled.
        type: string
      id:
        description: 'ID of the accounting code.

          '
        type: string
      name:
        description: 'Name of the accounting code.

          '
        type: string
      notes:
        description: 'Any optional notes for the accounting code.

          '
        type: string
      status:
        description: |
          The accounting code status.

          Possible values:
          * `Active`
          * `Inactive`
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      type:
        description: |
          Accounting code type.

          Possible values:
          * `AccountsReceivable`
          * `Cash`
          * `OtherAssets`
          * `CustomerCashOnAccount`
          * `DeferredRevenue`
          * `SalesTaxPayable`
          * `OtherLiabilities`
          * `SalesRevenue`
          * `SalesDiscounts`
          * `OtherRevenue`
          * `OtherEquity`
          * `BadDebt`
          * `OtherExpenses`
        type: string
      updatedBy:
        description: 'The ID of the user who last updated the accounting code.

          '
        type: string
      updatedOn:
        description: 'Date and time when the accounting code was last updated.

          '
        format: date-time
        type: string
    type: object
  GETAccountingCodeItemWithoutSuccessType:
    properties:
      category:
        description: |
          The category associated with the accounting code.

          Possible values:
          * `Assets`
          * `Liabilities`
          * `Equity`
          * `Revenue`
          * `Expenses`
        type: string
      createdBy:
        description: 'The ID of the user who created the accounting code.

          '
        type: string
      createdOn:
        description: 'Date and time when the accounting code was created.

          '
        format: date-time
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      glAccountName:
        description: |
          Name of the account in your general ledger.

          Field only available if you have Zuora Finance enabled.
        type: string
      glAccountNumber:
        description: |
          Account number in your general ledger.

          Field only available if you have Zuora Finance enabled.
        type: string
      id:
        description: 'ID of the accounting code.

          '
        type: string
      name:
        description: 'Name of the accounting code.

          '
        type: string
      notes:
        description: 'Any optional notes for the accounting code.

          '
        type: string
      status:
        description: |
          The accounting code status.

          Possible values:
          * `Active`
          * `Inactive`
        type: string
      type:
        description: |
          Accounting code type.

          Possible values:
          * `AccountsReceivable`
          * `Cash`
          * `OtherAssets`
          * `CustomerCashOnAccount`
          * `DeferredRevenue`
          * `SalesTaxPayable`
          * `OtherLiabilities`
          * `SalesRevenue`
          * `SalesDiscounts`
          * `OtherRevenue`
          * `OtherEquity`
          * `BadDebt`
          * `OtherExpenses`
        type: string
      updatedBy:
        description: 'The ID of the user who last updated the accounting code.

          '
        type: string
      updatedOn:
        description: 'Date and time when the accounting code was last updated.

          '
        format: date-time
        type: string
    title: accountingCodes
    type: object
  GETAccountingCodesType:
    properties:
      accountingCodes:
        description: 'An array of all the accounting codes in your chart of accounts.
          Each accounting code has the following fields.

          '
        items:
          $ref: '#/definitions/GETAccountingCodeItemWithoutSuccessType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETAccountingPeriodFileIdsType:
    properties:
      accountsReceivableAccountAgingDetailExportFileId:
        description: 'File ID of the Accounts Receivable Aging Account Detail report.

          '
        type: string
      accountsReceivableInvoiceAgingDetailExportFileId:
        description: 'File ID of the Accounts Receivable Aging Invoice Detail report.

          '
        type: string
      arRollForwardDetailExportFileId:
        description: 'File ID of the Accounts Receivable Detail report.

          '
        type: string
      fxRealizedGainAndLossDetailExportFileId:
        description: |
          File ID of the Realized Gain and Loss Detail report.

          Returned only if you have Foreign Currency Conversion enabled.
        type: string
      fxUnrealizedGainAndLossDetailExportFileId:
        description: |
          File ID of the Unrealized Gain and Loss Detail report.

          Returned only if you have Foreign Currency Conversion enabled
        type: string
      revenueDetailCsvFileId:
        description: 'File ID of the Revenue Detail report in CSV format.

          '
        type: string
      revenueDetailExcelFileId:
        description: 'File ID of the Revenue Detail report in XLSX format.

          '
        type: string
      unprocessedChargesFileId:
        description: 'File ID of a report containing all unprocessed charges for the
          accounting period.

          '
        type: string
    title: fileIds
    type: object
  GETAccountingPeriodType:
    properties:
      createdBy:
        description: 'ID of the user who created the accounting period.

          '
        type: string
      createdOn:
        description: 'Date and time when the accounting period was created.

          '
        format: date-time
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      endDate:
        description: 'The end date of the accounting period.

          '
        format: date
        type: string
      fileIds:
        description: 'File IDs of the reports available for the accounting period.
          You can retrieve the reports by specifying the file ID in a [Get Files](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Get_Files)
          REST API call.

          '
        items:
          $ref: '#/definitions/GETAccountingPeriodFileIdsType'
        type: array
      fiscalYear:
        description: 'Fiscal year of the accounting period.

          '
        type: string
      fiscal_quarter:
        description: ''
        format: int64
        type: integer
      id:
        description: 'ID of the accounting period.

          '
        type: string
      name:
        description: 'Name of the accounting period.

          '
        type: string
      notes:
        description: 'Any optional notes about the accounting period.

          '
        type: string
      runTrialBalanceEnd:
        description: 'Date and time that the trial balance was completed. If the trial
          balance status is `Pending`, `Processing`, or `Error`, this field is `null`.

          '
        format: date-time
        type: string
      runTrialBalanceErrorMessage:
        description: 'If trial balance status is Error, an error message is returned
          in this field.

          '
        type: string
      runTrialBalanceStart:
        description: 'Date and time that the trial balance was run. If the trial balance
          status is Pending, this field is null.

          '
        format: date-time
        type: string
      runTrialBalanceStatus:
        description: |
          Status of the trial balance for the accounting period. Possible values:

          * `Pending`
          * `Processing`
          * `Completed`
          * `Error`
        type: string
      startDate:
        description: 'The start date of the accounting period.

          '
        format: date
        type: string
      status:
        description: |
          Status of the accounting period. Possible values:
          * `Open`
          * `PendingClose`
          * `Closed`
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      updatedBy:
        description: 'ID of the user who last updated the accounting period.

          '
        type: string
      updatedOn:
        description: 'Date and time when the accounting period was last updated.

          '
        format: date-time
        type: string
    type: object
  GETAccountingPeriodWithoutSuccessType:
    properties:
      createdBy:
        description: 'ID of the user who created the accounting period.

          '
        type: string
      createdOn:
        description: 'Date and time when the accounting period was created.

          '
        format: date-time
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      endDate:
        description: 'The end date of the accounting period.

          '
        format: date
        type: string
      fileIds:
        description: 'File IDs of the reports available for the accounting period.
          You can retrieve the reports by specifying the file ID in a [Get Files](https://knowledgecenter.zuora.com/DC_Developers/REST_API/B_REST_API_reference/Get_Files)
          REST API call.

          '
        items:
          $ref: '#/definitions/GETAccountingPeriodFileIdsType'
        type: array
      fiscalYear:
        description: 'Fiscal year of the accounting period.

          '
        type: string
      fiscal_quarter:
        description: ''
        format: int64
        type: integer
      id:
        description: 'ID of the accounting period.

          '
        type: string
      name:
        description: 'Name of the accounting period.

          '
        type: string
      notes:
        description: 'Any optional notes about the accounting period.

          '
        type: string
      runTrialBalanceEnd:
        description: 'Date and time that the trial balance was completed. If the trial
          balance status is `Pending`, `Processing`, or `Error`, this field is `null`.

          '
        format: date-time
        type: string
      runTrialBalanceErrorMessage:
        description: 'If trial balance status is Error, an error message is returned
          in this field.

          '
        type: string
      runTrialBalanceStart:
        description: 'Date and time that the trial balance was run. If the trial balance
          status is `Pending`, this field is `null`.

          '
        format: date-time
        type: string
      runTrialBalanceStatus:
        description: |
          Status of the trial balance for the accounting period. Possible values:

          * `Pending`
          * `Processing`
          * `Completed`
          * `Error`
        type: string
      startDate:
        description: 'The start date of the accounting period.

          '
        format: date
        type: string
      status:
        description: |
          Status of the accounting period. Possible values:

          * `Open`
          * `PendingClose`
          * `Closed`
        type: string
      updatedBy:
        description: 'D of the user who last updated the accounting period.

          '
        type: string
      updatedOn:
        description: 'Date and time when the accounting period was last updated.

          '
        format: date-time
        type: string
    title: accountingPeriods
    type: object
  GETAccountingPeriodsType:
    properties:
      accountingPeriods:
        description: 'An array of all accounting periods on your tenant. The accounting
          periods are returned in ascending order of start date; that is, the latest
          period is returned first.

          '
        items:
          $ref: '#/definitions/GETAccountingPeriodWithoutSuccessType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETAmendmentType:
    properties:
      autoRenew:
        description: "Determines whether the subscription is automatically renewed,\
          \ or whether it expires at the end of the term and needs to be manually\
          \ renewed. \n"
        type: boolean
      baseRatePlanId:
        description: 'The rate plan ID on which changes are made. Only the Update
          or Remove amendment returns a base rate plan ID.

          '
        type: string
      baseSubscriptionId:
        description: 'The ID of the subscription based on which the amendment is created.

          '
        type: string
      code:
        description: 'The amendment code.

          '
        type: string
      contractEffectiveDate:
        description: 'The date when the amendment becomes effective for billing purposes,
          as `yyyy-mm-dd`.

          '
        format: date
        type: string
      currentTerm:
        description: "The length of the period for the current subscription term.\
          \ \n"
        format: int64
        type: integer
      currentTermPeriodType:
        description: |
          The period type for the current subscription term.
          Possible values are:

          - Month
          - Year
          - Day
          - Week
        type: string
      customerAcceptanceDate:
        description: 'The date when the customer accepts the amendment changes to
          the subscription, as `yyyy-mm-dd`.

          '
        format: date
        type: string
      description:
        description: 'Description of the amendment.

          '
        type: string
      destinationAccountId:
        description: 'The ID of the account that the subscription is being transferred
          to.

          '
        type: string
      destinationInvoiceOwnerId:
        description: 'The ID of the invoice that the subscription is being transferred
          to.

          '
        type: string
      effectiveDate:
        description: "The date when the amendment changes take effective. \n"
        format: date
        type: string
      id:
        description: 'The amendment ID.

          '
        type: string
      name:
        description: 'The name of the amendment.

          '
        type: string
      newRatePlanId:
        description: 'The ID of the rate plan charge on which amendment is made. Only
          the Add or Update amendment returns a new rate plan ID.

          '
        type: string
      newSubscriptionId:
        description: 'The ID of the subscription that the amendment changes.

          '
        type: string
      renewalSetting:
        description: |
          Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
          Possible values are:

          - RENEW_WITH_SPECIFIC_TERM
          - RENEW_TO_EVERGREEN
        type: string
      renewalTerm:
        description: 'The term of renewal for the amended subscription.

          '
        format: int64
        type: integer
      renewalTermPeriodType:
        description: |
          The period type for the subscription renewal term.
          Possible values are:

          - Month
          - Year
          - Day
          - Week
        type: string
      resumeDate:
        description: |
          The date when the subscription resumption takes effect, as `yyyy-mm-dd`.

          **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        format: date
        type: string
      serviceActivationDate:
        description: 'The date when service is activated, as `yyyy-mm-dd`.

          '
        format: date
        type: string
      specificUpdateDate:
        description: "The date when the Update Product amendment takes effect. \n\
          Only for the Update Product amendments if there is already a future-dated\
          \ Update Product amendment on\nthe subscription.\n"
        format: date
        type: string
      status:
        description: "The status of the amendment.\nPossible values are:\n\n- Draft\
          \ \n- Pending Activation\n- Pending Acceptance\n- Completed\n"
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      suspendDate:
        description: |
          The date when the subscription suspension takes effect, as `yyyy-mm-dd`.

          **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        format: date
        type: string
      termStartDate:
        description: 'The date when the new terms and conditions take effect.

          '
        format: date
        type: string
      termType:
        description: 'Indicates if the subscription is `TERMED` or `EVERGREEN`.

          '
        type: string
      type:
        description: |
          Type of the amendment.
          Possible values are:

          - Cancellation
          - NewProduct
          - OwnerTransfer
          - RemoveProduct
          - Renewal
          - UpdateProduct
          - TermsAndConditions
        type: string
    type: object
  GETAttachmentResponseType:
    properties:
      createdBy:
        description: 'Zuora user id who added this attachment to the object.

          '
        type: string
      createdOn:
        description: 'Date and time when the attachment was added to the object.

          '
        format: date-time
        type: string
      description:
        description: 'Description of the attachment.

          '
        type: string
      fileContentType:
        description: 'File type.

          '
        type: string
      fileId:
        description: 'File id of the attached file.

          '
        type: string
      fileName:
        description: 'Attachment file name.

          '
        type: string
      id:
        description: 'Id of this attachment.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      updatedBy:
        description: 'Zuora user id who last updated the attachment.

          '
        type: string
      updatedOn:
        description: 'Date and time when the attachment was last updated.

          '
        format: date-time
        type: string
    type: object
  GETAttachmentResponseWithoutSuccessType:
    properties:
      createdBy:
        description: 'Zuora user id of who added this attachment to the object.

          '
        type: string
      createdOn:
        description: 'Date and time when the attachment was added to the object.

          '
        format: date-time
        type: string
      description:
        description: 'Description of the attachment.

          '
        type: string
      fileContentType:
        description: 'Attachment file type.

          '
        type: string
      fileId:
        description: 'File id of the attached file.

          '
        type: string
      fileName:
        description: 'Attachment file name.

          '
        type: string
      id:
        description: 'Zuora id of this attachement.

          '
        type: string
      updatedBy:
        description: 'Zuora user id who last updated the attachment.

          '
        type: string
      updatedOn:
        description: 'Date and time when the attachment was last updated.

          '
        format: date-time
        type: string
    title: attachments
    type: object
  GETAttachmentsResponseType:
    properties:
      attachments:
        description: 'Container for one or more attachments.

          '
        items:
          $ref: '#/definitions/GETAttachmentResponseWithoutSuccessType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETCalloutHistoryVOType:
    properties:
      attemptedNum:
        description: 'The number of times the callout was retried.

          '
        type: string
      createTime:
        description: 'The time that the calloutHistory record was made.

          '
        type: string
      eventCategory:
        description: 'The event category for the callout.

          '
        type: string
      eventContext:
        description: 'The context of the callout event.

          '
        type: string
      notification:
        description: 'The name of the notification.

          '
        type: string
      requestMethod:
        description: 'The request method set in notifications settings.

          '
        type: string
      requestUrl:
        description: 'The base url set in notifications settings.

          '
        type: string
      responseCode:
        description: 'The responseCode of the request.

          '
        type: string
      responseContent:
        description: ''
        type: string
    title: calloutHistories
    type: object
  GETCalloutHistoryVOsType:
    properties:
      calloutHistories:
        description: 'A container for callout histories.

          '
        items:
          $ref: '#/definitions/GETCalloutHistoryVOType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETCatalogType:
    properties:
      products:
        description: 'Container for one or more products:

          '
        items:
          $ref: '#/definitions/GETProductType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETChargeRSDetailType:
    properties:
      accountId:
        description: 'An account ID.

          '
        type: string
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as *JPY 30* or USD *30.15*. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned:  *"Allocation amount with wrong decimal places."*

          '
        format: decimal
        type: string
      currency:
        description: "The type of currency used. \n"
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      number:
        description: 'The charge revenue summary number.

          '
        type: string
      recognitionRuleName:
        description: 'The name of the recognition rule.

          '
        type: string
      recognizedRevenue:
        description: 'The revenue that was distributed in a closed accounting period.

          '
        format: decimal
        type: string
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRevenueItemType'
        type: array
      subscriptionChargeId:
        description: 'The original subscription charge ID.

          '
        type: string
      subscriptionId:
        description: 'The original subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      undistributedUnrecognizedRevenue:
        description: 'Revenue in the open-ended accounting period.

          '
        format: decimal
        type: string
      unrecognizedRevenue:
        description: 'Revenue distributed in all open accounting periods, which includes
          the open-ended accounting period.

          '
        format: decimal
        type: string
    type: object
  GETCustomExchangeRatesDataType:
    properties:
      DATE:
        description: 'Container for exchange rate information on a given date. The
          field name is the date in `yyyy-mm-dd` format, for example, 2016-01-15.

          '
        properties:
          CURRENCY:
            description: |
              The exchange rate on the **providerExchangeRateDate**. The field name is the ISO currency code of the currency, for example, `EUR`.

              There may be more than one currency returned for a given **providerExchangeRateDate**. If the rate for a certain currency is not available on the **providerExchangeRateDate**, the currency is not returned in the response.
            type: string
          providerExchangeRateDate:
            description: |
              The date of the exchange rate used. The date is in `yyyy-mm-dd` format.

              Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
            format: date
            type: string
        title: List of exchange rates
        type: object
    title: rates
    type: object
  GETCustomExchangeRatesType:
    properties:
      inverse:
        description: |
          - If `true`, the exchange rate in the response is an inverse exchange rate.
          - If `false`, the exchange rate in the response is not an inverse exchange rate.
          The value is determined by the **Use inverse rate** checkbox in your Zuora Finance Manage Currency Conversion settings.
        type: boolean
      rates:
        description: "Container for exchange rate data. Contains a set of fields that\
          \ provide exchange rate data for each day between the specified `startDate`\
          \ and `endDate` (inclusive). \n"
        items:
          $ref: '#/definitions/GETCustomExchangeRatesDataType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETEmailHistoryVOType:
    properties:
      bcc:
        description: 'Blind carbon copy recipients of the email.

          '
        type: string
      cc:
        description: 'Carbon Copy recipients of the email.

          '
        type: string
      errorMessage:
        description: 'null if the content of result is "OK". A description of the
          error if the content of result is not "OK".

          '
        type: string
      eventCategory:
        description: 'The event category of the email.

          '
        type: string
      fromEmail:
        description: 'The sender of the email.

          '
        type: string
      notification:
        description: 'The name of the notification.

          '
        type: string
      replyTo:
        description: 'The reply-to address as configured in the email template.

          '
        type: string
      result:
        description: 'The result from the mail server of sending the email.

          '
        type: string
      sendTime:
        description: 'The date and time the email was sent.

          '
        type: string
      subject:
        description: 'The subject of the email.

          '
        type: string
      toEmail:
        description: 'The intended recipient of the email.

          '
        type: string
    title: emailHistories
    type: object
  GETEmailHistoryVOsType:
    properties:
      emailHistories:
        description: 'A container for email histories.

          '
        items:
          $ref: '#/definitions/GETEmailHistoryVOType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETInvoiceFileType:
    properties:
      id:
        description: |
          ID of the invoice PDF file.
          This is the ID for the file object and different from the file handle id in the pdfFileUrl field. To open a file, you need to use the file handle ID.
        type: string
      pdfFileUrl:
        description: 'REST URL for the invoice PDF file. Click the URL to open the
          invoice PDF file.

          '
        type: string
      versionNumber:
        description: 'Version number of the invoice PDF file

          '
        format: int64
        type: integer
    title: invoiceFiles
    type: object
  GETInvoiceFileWrapper:
    properties:
      invoices:
        description: 'Contains information about one or more invoices:

          '
        items:
          $ref: '#/definitions/GETInvoiceType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETInvoiceType:
    properties:
      accountId:
        description: 'Customer account ID.

          '
        type: string
      accountName:
        description: 'Customer account name.

          '
        type: string
      accountNumber:
        description: 'Customer account number.

          '
        type: string
      amount:
        description: 'Amount of the invoice before adjustments, discounts, and similar
          items.

          '
        format: decimal
        type: string
      balance:
        description: 'Balance remaining due on the invoice (after adjustments, discounts,
          etc.)

          '
        format: decimal
        type: string
      body:
        description: 'The REST URL of the invoice PDF file.

          '
        type: string
      createdBy:
        description: 'User ID of the person who created the invoice. If a bill run
          generated the invoice, then this is the user ID of person who created the
          bill run.

          '
        type: string
      creditBalanceAdjustmentAmount:
        description: ''
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      dueDate:
        description: 'Payment due date as _yyyy-mm-dd_.

          '
        format: date
        type: string
      id:
        description: 'Invoice ID.

          '
        type: string
      invoiceDate:
        description: 'Invoice date as _yyyy-mm-dd_

          '
        format: date
        type: string
      invoiceFiles:
        description: 'Information about the invoice PDF file:

          '
        items:
          $ref: '#/definitions/GETInvoiceFileType'
        type: array
      invoiceItems:
        description: 'Information on one or more items on this invoice:

          '
        items:
          $ref: '#/definitions/GETInvoicesInvoiceItemType'
        type: array
      invoiceNumber:
        description: 'Unique invoice ID, returned as a string.

          '
        type: string
      invoiceTargetDate:
        description: 'Date through which charges on this invoice are calculated, as
          _yyyy-mm-dd_.

          '
        format: date
        type: string
      status:
        description: 'Status of the invoice in the system - not the payment status,
          but the status of the invoice itself. Possible values are: `Posted`, `Draft`,
          `Canceled`, `Error`.

          '
        type: string
    title: invoices
    type: object
  GETInvoicesInvoiceItemType:
    properties:
      chargeAmount:
        description: 'The amount of the charge. This amount doesn''t include taxes
          regardless if the charge''s tax mode is inclusive or exclusive.

          '
        format: decimal
        type: string
      chargeDescription:
        description: 'Description of the charge.

          '
        type: string
      chargeId:
        description: 'ID of the charge.

          '
        type: string
      chargeName:
        description: 'Name of the charge.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      id:
        description: 'Item ID.

          '
        type: string
      productName:
        description: 'Name of the product associated with this item.

          '
        type: string
      quantity:
        description: 'Quantity of this item, in the configured unit of measure for
          the charge.

          '
        format: decimal
        type: string
      serviceEndDate:
        description: 'End date of the service period for this item, i.e., the last
          day of the service period, as _yyyy-mm-dd_.

          '
        format: date
        type: string
      serviceStartDate:
        description: 'Start date of the service period for this item, as _yyyy-mm-dd_.
          For a one-time fee item, the date of the charge.

          '
        format: date
        type: string
      subscriptionId:
        description: 'ID of the subscription for this item.

          '
        type: string
      subscriptionName:
        description: 'Name of the subscription for this item.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      taxAmount:
        description: 'Tax applied to the charge.

          '
        format: decimal
        type: string
      unitOfMeasure:
        description: 'Unit used to measure consumption.

          '
        type: string
    title: invoiceItems
    type: object
  GETJournalEntriesInJournalRunType:
    properties:
      journalEntries:
        description: 'Key name that represents the list of journal entries.

          '
        items:
          $ref: '#/definitions/GETJournalEntryDetailTypeWithoutSuccess'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETJournalEntryDetailType:
    properties:
      accountingPeriodName:
        description: 'Name of the accounting period that the journal entry belongs
          to.

          '
        type: string
      aggregateCurrency:
        description: 'Returns true if the journal entry is aggregating currencies.
          That is, if the journal entry was created when the `Aggregate transactions
          with different currencies during a Journal Run` setting was configured to
          `Yes`. Otherwise, returns `false`.

          '
        type: boolean
      currency:
        description: 'Currency used.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      homeCurrency:
        description: 'Home currency used.

          '
        type: string
      journalEntryDate:
        description: 'Date of the journal entry.

          '
        format: date
        type: string
      journalEntryItems:
        description: 'Key name that represents the list of journal entry items.

          '
        items:
          $ref: '#/definitions/GETJournalEntryItemType'
        type: array
      notes:
        description: |2

          Additional information about this record.
          Character limit: 2,000
        type: string
      number:
        description: 'Journal entry number in the format JE-00000001.

          '
        type: string
      segments:
        description: 'List of segments that apply to the summary journal entry.

          '
        items:
          $ref: '#/definitions/GETJournalEntrySegmentType'
        type: array
      status:
        description: 'Status of journal entry. An enum with the values `Created` or
          `Cancelled`.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      timePeriodEnd:
        description: 'End date of time period included in the journal entry.

          '
        format: date
        type: string
      timePeriodStart:
        description: 'Start date of time period included in the journal entry.

          '
        format: date
        type: string
      transactionType:
        description: 'Transaction type of the transactions included in the summary
          journal entry.

          '
        type: string
      transferDateTime:
        description: 'Date and time that transferredToAccounting was changed to `Yes`.
          This field is returned only when transferredToAccounting is `Yes`. Otherwise,
          this field is `null`.

          '
        format: date-time
        type: string
      transferredBy:
        description: 'User ID of the person who changed transferredToAccounting to
          `Yes`. This field is returned only when transferredToAccounting is `Yes`.
          Otherwise, this field is `null`.

          '
        type: string
      transferredToAccounting:
        description: 'Status shows whether the journal entry has been transferred
          to an accounting system. The possible values are `No`, `Processing`, `Yes`,
          `Error`, `Ignore`.

          '
        type: string
    type: object
  GETJournalEntryDetailTypeWithoutSuccess:
    properties:
      accountingPeriodName:
        description: 'Name of the accounting period that the journal entry belongs
          to.

          '
        type: string
      aggregateCurrency:
        description: 'Returns true if the journal entry is aggregating currencies.
          That is, if the journal entry was created when the `Aggregate transactions
          with different currencies during a JournalRun` setting was configured to
          "Yes". Otherwise, returns `false`.

          '
        type: boolean
      currency:
        description: 'Currency used.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      homeCurrency:
        description: 'Home currency used.

          '
        type: string
      journalEntryDate:
        description: 'Date of the journal entry.

          '
        format: date
        type: string
      journalEntryItems:
        description: 'Key name that represents the list of journal entry items.

          '
        items:
          $ref: '#/definitions/GETJournalEntryItemType'
        type: array
      notes:
        description: |
          Additional information about this record.
          Character limit: 2,000
        type: string
      number:
        description: 'Journal entry number in the format JE-00000001.

          '
        type: string
      segments:
        description: 'List of segments that apply to the summary journal entry.

          '
        items:
          $ref: '#/definitions/GETJournalEntrySegmentType'
        type: array
      status:
        description: 'Status of journal entry. An enum with the values`Created` or
          `Cancelled`.

          '
        type: string
      timePeriodEnd:
        description: 'End date of time period included in the journal entry.

          '
        format: date
        type: string
      timePeriodStart:
        description: 'Start date of time period included in the journal entry.

          '
        format: date
        type: string
      transactionType:
        description: 'Transaction type of the transactions included in the summary
          journal entry.

          '
        type: string
      transferDateTime:
        description: 'Date and time that transferredToAccounting was changed to `Yes`.
          This field is returned only when transferredToAccounting is `Yes`. Otherwise,
          this field is `null`.

          '
        format: date-time
        type: string
      transferredBy:
        description: 'User ID of the person who changed transferredToAccounting to
          `Yes`. This field is returned only when transferredToAccounting is `Yes`.
          Otherwise, this field is `null`.

          '
        type: string
      transferredToAccounting:
        description: 'Status shows whether the journal entry has been transferred
          to an accounting system. The possible values are `No`, `Processing`, `Yes`,
          `Error`, `Ignore`.

          '
        type: string
    title: journalEntries
    type: object
  GETJournalEntryItemType:
    properties:
      accountingCodeName:
        description: 'Name of the accounting code.

          '
        type: string
      accountingCodeType:
        description: "Accounting code type. The accounting code types are:\n\n* `AccountsReceivable`\n\
          *  `Cash`\n*  `OtherAssets`\n*  `CustomerCashOnAccount `\n* `DeferredRevenue`\n\
          * `SalesTaxPayable`\n* `OtherLiabilities`\n* `SalesRevenue`\n* `SalesDiscounts`\n\
          * `OtherRevenue` \n* `OtherEquity`\n* `BadDebt`  \n* `OtherExpenses`\n"
        type: string
      amount:
        description: 'Journal entry item amount in transaction currency.

          '
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      glAccountName:
        description: 'The account number in the general ledger (GL) that corresponds
          to the accounting code.

          '
        type: string
      glAccountNumber:
        description: 'The account name in the general ledger (GL) that corresponds
          to the accounting code.

          '
        type: string
      homeCurrencyAmount:
        description: 'Journal entry item amount in home currency.

          '
        format: decimal
        type: string
      type:
        description: 'Type of journal entry item. An enum with the value `Credit`
          or `Debit`.

          '
        type: string
    title: journalEntryItems
    type: object
  GETJournalEntrySegmentType:
    properties:
      segmentName:
        description: 'Name of segment.

          '
        type: string
      segmentValue:
        description: 'Value of segment in this summary journal entry.

          '
        type: string
    title: segments
    type: object
  GETJournalRunTransactionType:
    properties:
      type:
        description: "Transaction type. \n\nThe transaction types are:\n* Invoice\
          \ Item\n* Taxation Item\n* Invoice Item Adjustment (Invoice)\n* Invoice\
          \ Item Adjustment (Tax)\n* Invoice Adjustment (Invoice Adjustment is deprecated\
          \ on Production. Zuora recommends that you use the Invoice Item Adjustment\
          \ instead.)\n* Electronic Payment\n* External Payment\n* Electronic Refund\n\
          * External Refund\n* Electronic Credit Balance Payment\n* External Credit\
          \ Balance Payment\n* Electronic Credit Balance Refund\n* External Credit\
          \ Balance Refund\n* Credit Balance Adjustment (Applied from Credit Balance)\n\
          * Credit Balance Adjustment (Transferred to Credit Balance)\n* Revenue Event\
          \ Item\n"
        type: string
    title: transactionTypes
    type: object
  GETJournalRunType:
    properties:
      aggregateCurrency:
        description: ''
        type: boolean
      executedOn:
        description: 'Date and time the journal run was executed.

          '
        format: date-time
        type: string
      journalEntryDate:
        description: 'Date of the journal entry.

          '
        format: date
        type: string
      number:
        description: 'Journal run number.

          '
        type: string
      segmentationRuleName:
        description: 'Name of GL segmentation rule used in the journal run.

          '
        type: string
      status:
        description: "Status of the journal run. \n\nThe possible values are:\n* Pending\n\
          * Processing\n* Completed\n* Error\n* CancelInprogress\n* Cancelled\n* DeleteInprogress\n"
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      targetEndDate:
        description: 'The target end date of the journal run.

          '
        format: date
        type: string
      targetStartDate:
        description: 'The target start date of the journal run.

          '
        format: date
        type: string
      totalJournalEntryCount:
        description: 'Total number of journal entries in the journal run.

          '
        format: int64
        type: integer
      transactionTypes:
        description: 'Transaction types included in the journal run.

          '
        items:
          $ref: '#/definitions/GETJournalRunTransactionType'
        type: array
    type: object
  GETMassUpdateType:
    properties:
      actionType:
        description: 'Type of mass action.

          '
        type: string
      endedOn:
        description: 'Date and time that the mass action was completed. The format
          is `yyyy-MM-dd hh:mm:ss`.

          '
        format: date-time
        type: string
      errorCount:
        description: |
          Total number of failed records.

          This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have failed so far. When the mass action **status** is Pending, this field is null.
        type: string
      inputSize:
        description: 'Size of the input file in bytes.

          '
        format: int64
        type: integer
      outputSize:
        description: 'Size of the response file in bytes.

          '
        format: int64
        type: integer
      outputType:
        description: |
          Type of output for the response file. The following table describes the output type.

          | Output Type    | Description                         |
          |----------------|-------------------------------------|
          | (url:.csv.zip) | URL pointing to a zipped .csv file. |
        type: string
      outputURL:
        description: "URL to download the response file. The response file is a zipped\
          \ .csv file. \nThe response file is identical to the file you uploaded to\
          \ perform the mass action, with additional columns providing information\
          \ about the outcome of each record. \nThis field only returns a value when\
          \ the mass action **status** is Completed or Stopped. Otherwise, this field\
          \ is null.\n"
        type: string
      processedCount:
        description: |
          Total number of processed records. This field is equal to the sum of `errorCount` and `successCount`.

          This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have been processed so far. When the mass action **status** is Pending, this field is null.
        type: string
      startedOn:
        description: 'Date and time that Zuora started processing the mass action.
          The format is `yyyy-MM-dd hh:mm:ss`.

          '
        format: date-time
        type: string
      status:
        description: |
          Status of the mass action. The following table describes the mass action statuses.

          | Status     | Description                                                                |
          |------------|----------------------------------------------------------------------------|
          | Pending    | Mass action has not yet started being processed.                           |
          | Processing | Mass action is in progress.                                                |
          | Stopping   | Mass action is in the process of stopping, but has not yet stopped.        |
          | Stopped    | Mass action has stopped.                                                   |
          | Completed  | Mass action was successfully completed. There may still be failed records. |
          | Failed     | Mass action failed. No records are processed. No response file is created. |
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      successCount:
        description: |
          Total number of successful records.
          This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have succeeded so far. When the mass action **status** is Pending, this field is null.
        type: string
      totalCount:
        description: |
          Total number of records in the uploaded mass action file.
          When the mass action **status** is Pending, this field is null.
        type: string
      uploadedBy:
        description: 'Email of the person who uploaded the mass action file.

          '
        type: string
      uploadedOn:
        description: 'Date and time that the mass action file was uploaded. The format
          is `yyyy-MM-dd hh:mm:ss`.

          '
        format: date-time
        type: string
    type: object
  GETPaidInvoicesType:
    properties:
      appliedPaymentAmount:
        description: 'Amount of the payment applied to this invoice.

          '
        format: decimal
        type: string
      invoiceId:
        description: 'Invoice ID.

          '
        type: string
      invoiceNumber:
        description: 'Invoice number.

          '
        type: string
    title: paidInvoices
    type: object
  GETPaymentMethodType:
    properties:
      cardHolderInfo:
        description: 'Container for the name and billing address for the card holder.

          '
        properties:
          addressLine1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          addressLine2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          cardHolderName:
            description: 'The full name as it appears on the card, e.g., "John J Smith",
              50 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country, must be a valid country name or abbreviation.

              '
            type: string
          email:
            description: 'Card holder''s email address, 80 characters or less.

              '
            type: string
          phone:
            description: 'Phone number, 40 characters or less.

              '
            type: string
          state:
            description: 'State, must be a valid state name or 2-character abbreviation.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        type: object
      cardNumber:
        description: 'Credit or debit card number, 16 characters or less, masked for
          security purposes.

          '
        type: string
      cardType:
        description: 'The type of credit card or debit card being billed.  Possible
          values are: `Visa`, `MasterCard`, `AmericanExpress`, `Discover`.

          '
        type: string
      defaultPaymentMethod:
        description: 'Contains true if this is the default payment method for this
          customer, otherwise false.

          '
        type: boolean
      expirationMonth:
        description: 'Two-digit expiration month (01 - 12).

          '
        type: string
      expirationYear:
        description: 'Four-digit expiration year.

          '
        type: string
      id:
        description: 'Unique ID generated by Zuora when this payment method was created.

          '
        type: string
    title: creditCards
    type: object
  GETPaymentMethodsType:
    properties:
      creditCards:
        description: 'Container for one or more credit or debit card records:

          '
        items:
          $ref: '#/definitions/GETPaymentMethodType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETPaymentType:
    properties:
      accountID:
        description: 'Customer account ID.

          '
        type: string
      accountName:
        description: 'Customer account name.

          '
        type: string
      accountNumber:
        description: 'Customer account number.

          '
        type: string
      amount:
        description: 'Payment amount.

          '
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      effectiveDate:
        description: 'Effective payment date as _yyyy-mm-dd_.

          '
        format: date
        type: string
      gatewayTransactionNumber:
        description: 'Transaction ID from payment gateway.

          '
        type: string
      id:
        description: 'PaymentID.

          '
        type: string
      paidInvoices:
        description: 'Information about one or more invoices to which this payment
          was applied:

          '
        items:
          $ref: '#/definitions/GETPaidInvoicesType'
        type: array
      paymentMethodID:
        description: 'Payment method.

          '
        type: string
      paymentNumber:
        description: 'Unique payment number.

          '
        type: string
      status:
        description: 'Possible values are: `Draft`, `Processing`, `Processed`, `Error`,
          `Voided`, `Canceled`, `Posted.

          '
        type: string
      type:
        description: 'Possible values are: `External`, `Electronic`.

          '
        type: string
    title: payments
    type: object
  GETPaymentsType:
    properties:
      payments:
        description: 'Information about one or more payments:

          '
        items:
          $ref: '#/definitions/GETPaymentType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETProductRatePlanChargePricingTierType:
    properties:
      endingUnit:
        description: 'Decimal defining end of tier range.

          '
        format: decimal
        type: string
      price:
        description: 'The decimal value of the tiered charge model. If the charge
          model is not a tiered type then this price field will be null and the price
          field directly under the productRatePlanCharges applies.

          '
        format: decimal
        type: string
      priceFormat:
        description: "Tier price format.\n\nAllowed values:\n- flat fee \n- per unit\n"
        type: string
      startingUnit:
        description: 'Decimal defining start of tier range.

          '
        format: decimal
        type: string
      tier:
        description: 'Unique number of the tier.

          '
        format: int64
        type: integer
    title: tiers
    type: object
  GETProductRatePlanChargePricingType:
    properties:
      currency:
        description: 'Currency used by the charge model. For example: USD or EUR

          '
        type: string
      discountAmount:
        description: 'Value subtracted from price in currency specified. Used only
          when the charge model is DiscountFixedAmount.

          '
        format: decimal
        type: string
      discountPercentage:
        description: 'Percent discount applied to the price. Used only when the charge
          model is DiscountPercentage.

          '
        format: decimal
        type: string
      includedUnits:
        description: 'Specifies the number of units in the base set of units when
          the charge model is Overage.

          '
        format: decimal
        type: string
      overagePrice:
        description: 'Price per unit when base set of units is exceeded. Used only
          when charge model is Overage or Tiered with Overage.

          '
        format: decimal
        type: string
      price:
        description: 'The decimal value that applies when the charge model is not
          tiered

          '
        format: decimal
        type: string
      tiers:
        description: 'Container for one or many defined tier ranges with distinct
          pricing.  Applies when model is `Tiered`, `TieredWithOverage`, or `Volume`

          '
        items:
          $ref: '#/definitions/GETProductRatePlanChargePricingTierType'
        type: array
    title: pricing
    type: object
  GETProductRatePlanChargeType:
    properties:
      applyDiscountTo:
        description: |
          Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.

          Permissible values:
          - RECURRING
          - USAGE
          - ONETIMERECURRING
          - ONETIMEUSAGE
          - RECURRINGUSAGE
          - ONETIMERECURRINGUSAGE
        type: string
      billingDay:
        description: 'The bill cycle day (BCD) for the charge. The BCD determines
          which day of the month or week the customer is billed. The BCD value in
          the account can override the BCD in this object.

          '
        type: string
      billingPeriod:
        description: |
          The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).

          Values:
          - Month
          - Quarter
          - Annual
          - Semi-Annual
          - Specific Months
          - Week
          - Specific_Weeks
        type: string
      billingPeriodAlignment:
        description: |
          Aligns charges within the same subscription if multiple charges begin on different dates.

          Possible values:
          - AlignToCharge
          - AlignToSubscriptionStart
          - AlignToTermStart
        type: string
      billingTiming:
        description: "The billing timing for the charge. You can choose to bill for\
          \ charges in advance or in arrears.\n\nValues:\n- In Advance\n- In Arrears\n\
          \n**Note:** This feature is in Limited Availability. If you wish to have\
          \ access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).\
          \ \n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      defaultQuantity:
        description: 'The default quantity of units.  This field is required if you
          use a per-unit charge model.

          '
        format: decimal
        type: string
      description:
        description: 'Usually a brief line item summary of the Rate Plan Charge.

          '
        type: string
      discountLevel:
        description: "The level of the discount. \n\nValues:\n- RatePlan\n- Subscription\n\
          - Account\n"
        type: string
      endDateCondition:
        description: |
          Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.

          Values:
          - Subscription_End
          - Fixed_Period
        type: string
      financeInformation:
        description: 'Container for finance information of a rate plan charge.

          '
        properties:
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          deferredRevenueAccountingCode:
            description: "The accounting code for deferred revenue, such as Monthly\
              \ Recurring Liability. \n"
            type: string
          deferredRevenueAccountingCodeType:
            description: "The type associated with the deferred revenue accounting\
              \ code, such as Deferred Revenue. \n"
            type: string
          recognizedRevenueAccountingCode:
            description: "The accounting code for recognized revenue, such as Monthly\
              \ Recurring Charges or Overage Charges. \n"
            type: string
          recognizedRevenueAccountingCodeType:
            description: "The type associated with the recognized revenue accounting\
              \ code, such as Sales Revenue or Sales Discount. \n"
            type: string
        title: financeInformation
        type: object
      id:
        description: 'Unique product rate-plan charge ID.

          '
        type: string
      includedUnits:
        description: 'Specifies the number of units in the base set of units when
          the charge model is Overage.

          '
        format: decimal
        type: string
      listPriceBase:
        description: |
          The list price base for the product rate plan charge.

          Values:
          - Month
          - Billing Period
          - Per_Week
        type: string
      maxQuantity:
        description: 'Specifies the maximum number of units for this charge. Use this
          field and the `minQuantity` field to create a range of units allowed in
          a product rate plan charge.

          '
        format: decimal
        type: string
      minQuantity:
        description: 'Specifies the minimum number of units for this charge. Use this
          field and the `maxQuantity` field to create a range of units allowed in
          a product rate plan charge.

          '
        format: decimal
        type: string
      model:
        description: "Charge model which determines how charges are calculated.  Charge\
          \ models must be individually activated in Zuora Billing administration.\
          \ \n\nPossible values are:\n- FlatFee\n- PerUnit\n- Overage\n- Volume\n\
          - Tiered\n- TieredWithOverage\n- DiscountFixedAmount\n- DiscountPercentage\n\
          The Pricing Summaries section below details these charge models and their\
          \ associated pricingSummary values.\n"
        type: string
      name:
        description: 'Name of the product rate-plan charge. (Not required to be unique.)

          '
        type: string
      numberOfPeriods:
        description: 'Value specifies the number of periods used in the smoothing
          model calculations Used when overage smoothing model is `RollingWindow`
          or `Rollover`.

          '
        format: int64
        type: integer
      overageCalculationOption:
        description: |
          Value specifies when to calculate overage charges.

          Values:
          - EndOfSmoothingPeriod
          - PerBillingPeriod
        type: string
      overageUnusedUnitsCreditOption:
        description: |
          Determines whether to credit the customer with unused units of usage.

          Values:
          - NoCredit
          - CreditBySpecificRate
        type: string
      prepayPeriods:
        description: "The number of periods to which prepayment is set. \n\n**Note:**\
          \ This field is only available if you already have the prepayment feature\
          \ enabled. The prepayment feature is deprecated and available only for backward\
          \ compatibility. Zuora does not support enabling this feature anymore.\n"
        format: int64
        type: integer
      priceChangeOption:
        description: |
          Applies an automatic price change when a termed subscription is renewed and the following applies:

          1. AutomatedPriceChange setting is on
          2. Charge type is not one-time
          3. Charge model is not discount fixed amount

          Values:
          - NoChange (default)
          - SpecificPercentageValue
          - UseLatestProductCatalogPricing
        type: string
      priceIncreasePercentage:
        description: |
          Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.

          1. AutomatedPriceChange setting is on
          2. Charge type is not one-time
          3. Charge model is not discount fixed amount

          Values: a decimal between -100 and 100
        format: decimal
        type: string
      pricing:
        description: "One or more price charge models with attributes that further\
          \ describe the model. \nSome attributes show as null values when not applicable.\n"
        items:
          $ref: '#/definitions/GETProductRatePlanChargePricingType'
        type: array
      pricingSummary:
        description: 'A concise description of the charge model and pricing that is
          suitable to show to your customers.

          '
        items:
          type: string
        type: array
      ratingGroup:
        description: "Specifies a rating group based on which usage records are rated.\
          \ \n\n**Note:** This feature is in Limited Availability. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\
          \ \n"
        type: string
      revenueRecognitionRuleName:
        description: 'The name of the revenue recognition rule governing the revenue
          schedule.

          '
        type: string
      smoothingModel:
        description: |
          Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.

          One of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:

          - `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins.
          - `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.
        type: string
      specificBillingPeriod:
        description: 'When the billing period is set to `Specific` Months then this
          positive integer reflects the number of months for billing period charges.

          '
        format: int64
        type: integer
      taxCode:
        description: 'Specifies the tax code for taxation rules; used by Zuora Tax.

          '
        type: string
      taxMode:
        description: 'Specifies how to define taxation for the charge; used by Zuora
          Tax. Possible values are: `TaxExclusive`, `TaxInclusive`.

          '
        type: string
      taxable:
        description: 'Specifies whether the charge is taxable; used by Zuora Tax.
          Possible values are:`true`, `false`.

          '
        type: boolean
      triggerEvent:
        description: "Specifies when to start billing the customer for the charge.\n\
          \nValues: one of the following:\n- `ContractEffective` is the date when\
          \ the subscription's contract goes into effect and the charge is ready to\
          \ be billed.\n- `ServiceActivation` is the date when the services or products\
          \ for a subscription have been activated and the customers have access.\n\
          - `CustomerAcceptance` is when the customer accepts the services or products\
          \ for a subscription. \n- `SpecificDate` is the date specified.\n"
        type: string
      type:
        description: 'The type of charge. Possible values are: `OneTime`, `Recurring`,
          `Usage`.

          '
        type: string
      uom:
        description: |
          Describes the Units of Measure (uom) configured in **Settings > Billing** for the productRatePlanCharges.

          Values: `Each`, `License`, `Seat`, or `null`
        type: string
      upToPeriods:
        description: |
          Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
          If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
        format: int64
        type: integer
      upToPeriodsType:
        description: "The period type used to define when the charge ends.\n\nValues:\n\
          - Billing_Periods\n- Days\n- Weeks\n- Months\n- Years\n  \n"
        type: string
      usageRecordRatingOption:
        description: "Determines how Zuora processes usage records for per-unit usage\
          \ charges. \n"
        type: string
      useDiscountSpecificAccountingCode:
        description: |
          Determines whether to define a new accounting code for the new discount charge.
          Values: `true`, `false`
        type: boolean
      useTenantDefaultForPriceChange:
        description: |
          Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings > Billing > Define Default Subscription Settings**.

          Values: `true`, `false`
        type: boolean
    title: productRatePlanCharges
    type: object
  GETProductRatePlanType:
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Rate plan description.

          '
        type: string
      effectiveEndDate:
        description: 'Final date the rate plan is active, as `yyyy-mm-dd`. After this
          date, the rate plan status is `Expired`.

          '
        format: date
        type: string
      effectiveStartDate:
        description: 'First date the rate plan is active (i.e., available to be subscribed
          to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.

          '
        format: date
        type: string
      id:
        description: 'Unique product rate-plan charge ID.

          '
        type: string
      name:
        description: 'Name of the product rate-plan charge. (Not required to be unique.)

          '
        type: string
      productRatePlanCharges:
        description: 'Field attributes describing the product rate plan charges:

          '
        items:
          $ref: '#/definitions/GETProductRatePlanChargeType'
        type: array
      status:
        description: 'Possible vales are: `Active`, `Expired`, `NotStarted`.

          '
        type: string
    title: productRatePlans
    type: object
  GETProductType:
    properties:
      category:
        description: |
          Category of the product. Used by Zuora Quotes Guided Product Selector.

          Possible values are:
            - Base Products
            - Add On Services
            - Miscellaneous Products
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Optional product description.

          '
        type: string
      effectiveEndDate:
        description: 'The date when the product expires and cannot be subscribed to
          anymore, as `yyyy-mm-dd`.

          '
        format: date
        type: string
      effectiveStartDate:
        description: 'The date when the product becomes available and can be subscribed
          to, as `yyyy-mm-dd`.

          '
        format: date
        type: string
      id:
        description: 'Product ID.

          '
        type: string
      name:
        description: 'Product name, up to 100 characters.

          '
        type: string
      productFeatures:
        description: |
          Container for one or more product features. Only available when the following settings are enabled:
          - The Entitlements feature in your tenant
          - The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing
        items:
          $ref: '#/definitions/GetProductFeatureType'
        type: array
      productRatePlans:
        description: 'Container for one or more product rate plans:

          '
        items:
          $ref: '#/definitions/GETProductRatePlanType'
        type: array
      sku:
        description: 'Unique product SKU, up to 50 characters.

          '
        type: string
      tags:
        description: ''
        type: string
    title: products
    type: object
  GETRSDetailType:
    properties:
      accountId:
        description: 'An account ID.

          '
        type: string
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned: `Allocation amount with wrong decimal places.`

          '
        format: decimal
        type: string
      createdOn:
        description: 'The date when the record was created in `YYYY-MM-DD HH:MM:SS`
          format.

          '
        format: date-time
        type: string
      currency:
        description: 'The type of currency used.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      linkedTransactionId:
        description: "The linked transaction ID for billing transactions. This field\
          \ is used for all rules except the custom unlimited or manual recognition\
          \ rule models. If using the custom unlimited rule model, then the field\
          \ value must be null. If the field is not null, then the referenceId field\
          \ must be null. \n"
        type: string
      linkedTransactionNumber:
        description: "The number for the linked invoice item or invoice item adjustment\
          \ transaction. This field is used for all rules except the custom unlimited\
          \ or manual recognition rule models.  If using the custom unlimited or manual\
          \ recognition rule models, then the field value is null. \n"
        type: string
      linkedTransactionType:
        description: 'The type of linked transaction for billing transactions, which
          can be invoice item or invoice item adjustment. This field is used for all
          rules except the custom unlimited or manual recognition rule models.

          '
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      number:
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
        type: string
      recognitionRuleName:
        description: 'The name of the recognition rule.

          '
        type: string
      recognizedRevenue:
        description: 'The revenue that was distributed in a closed accounting period.

          '
        format: decimal
        type: string
      referenceId:
        description: 'Reference ID is used only in the custom unlimited rule to create
          a revenue schedule. In this scenario, the revenue schedule is not linked
          to an invoice item or invoice item adjustment.

          '
        type: string
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRsRevenueItemType'
        type: array
      revenueScheduleDate:
        description: |
          The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.

          The date cannot be in a closed accounting period. The date must be in the `YYYY-MM-DD` format.
        format: date
        type: string
      subscriptionChargeId:
        description: 'The original subscription charge ID.

          '
        type: string
      subscriptionId:
        description: 'The original subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      undistributedUnrecognizedRevenue:
        description: 'Revenue in the open-ended accounting period.

          '
        format: decimal
        type: string
      unrecognizedRevenue:
        description: 'Revenue distributed in all open accounting periods, which includes
          the open-ended accounting period.

          '
        format: decimal
        type: string
      updatedOn:
        description: 'The date when the revenue automation start date was set.

          '
        format: date-time
        type: string
    type: object
  GETRSDetailWithoutSuccessType:
    properties:
      accountId:
        description: 'An account ID.

          '
        type: string
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned: `Allocation amount with wrong decimal places.`

          '
        format: decimal
        type: string
      createdOn:
        description: 'The date when the record was created in `YYYY-MM-DD HH:MM:SS`
          format.

          '
        format: date-time
        type: string
      currency:
        description: 'The type of currency used.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      linkedTransactionId:
        description: "The linked transaction ID for billing transactions. This field\
          \ is used for all rules except the custom unlimited or manual recognition\
          \ rule models. If using the custom unlimited rule model, then the field\
          \ value must be null. If the field is not null, then the referenceId field\
          \ must be null. \n"
        type: string
      linkedTransactionNumber:
        description: "The number for the linked invoice item or invoice item adjustment\
          \ transaction. This field is used for all rules except the custom unlimited\
          \ or manual recognition rule models.  If using the custom unlimited or manual\
          \ recognition rule models, then the field value is null. \n"
        type: string
      linkedTransactionType:
        description: 'The type of linked transaction for billing transactions, which
          can be invoice item or invoice item adjustment. This field is used for all
          rules except the custom unlimited or manual recognition rule models.

          '
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      number:
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
        type: string
      recognitionRuleName:
        description: 'The name of the recognition rule.

          '
        type: string
      recognizedRevenue:
        description: 'The revenue that was distributed in a closed accounting period.

          '
        format: decimal
        type: string
      referenceId:
        description: 'Reference ID is used only in the custom unlimited rule to create
          a revenue schedule. In this scenario, the revenue schedule is not linked
          to an invoice item or invoice item adjustment.

          '
        type: string
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRsRevenueItemType'
        type: array
      revenueScheduleDate:
        description: |
          The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.

          The date cannot be in a closed accounting period. The date must be in the `YYYY-MM-DD` format.
        format: date
        type: string
      subscriptionChargeId:
        description: 'The original subscription charge ID.

          '
        type: string
      subscriptionId:
        description: 'The original subscription ID.

          '
        type: string
      undistributedUnrecognizedRevenue:
        description: 'Revenue in the open-ended accounting period.

          '
        format: decimal
        type: string
      unrecognizedRevenue:
        description: 'Revenue distributed in all open accounting periods, which includes
          the open-ended accounting period.

          '
        format: decimal
        type: string
      updatedOn:
        description: 'The date when the revenue automation start date was set.

          '
        format: date-time
        type: string
    title: revenueSchedules
    type: object
  GETRSDetailsByChargeType:
    properties:
      revenueSchedules:
        description: "Represents how revenue will be recognized over time.\n\nThis\
          \ contains the details of a revenue schedule. If you do not specify the\
          \ \uFF40pageSize\uFF40 variable, the default number of revenue schedules\
          \ returned per invocation is 8, and if there are more than 8 revenue schedules\
          \ to be returned, the \uFF40nextPage\uFF40 field will provide a hyperlink\
          \ to view the next page(s) of revenue events. The order of revenue schedules\
          \ is descending by the \uFF40updatedOn\uFF40 field.\n"
        items:
          $ref: '#/definitions/GETRSDetailWithoutSuccessType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETRevenueEventDetailType:
    properties:
      accountId:
        description: 'An account ID.

          '
        type: string
      createdOn:
        description: 'The date when the record was created in YYYY-MM-DD HH:MM:SS
          format.

          '
        format: date-time
        type: string
      currency:
        description: "The type of currency used. \n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      eventType:
        description: |
          Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:

            * Invoice Posted
            * Invoice Item Adjustment Created
            * Invoice Canceled
            * Invoice Item Adjustment Canceled
            * Revenue Distributed
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      number:
        description: 'The revenue event number created when a revenue event occurs.

          '
        type: string
      recognitionEnd:
        description: "The end date of a recognition period in YYYY-MM-DD format. \n\
          \nThe maximum difference of the recognitionStart and recognitionEnd date\
          \ fields is equal to 250 multiplied by the length of an accounting period.\n"
        format: date
        type: string
      recognitionStart:
        description: 'The start date of a recognition period in YYYY-MM-DD format.

          '
        format: date
        type: string
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRevenueItemType'
        type: array
      subscriptionChargeId:
        description: 'The original subscription charge ID.

          '
        type: string
      subscriptionId:
        description: 'The original subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETRevenueEventDetailWithoutSuccessType:
    properties:
      accountId:
        description: 'An account ID.

          '
        type: string
      createdOn:
        description: 'The date when the record was created in YYYY-MM-DD HH:MM:SS
          format.

          '
        format: date-time
        type: string
      currency:
        description: "The type of currency used. \n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      eventType:
        description: |
          Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:

            * Invoice Posted
            * Invoice Item Adjustment Created
            * Invoice Canceled
            * Invoice Item Adjustment Canceled
            * Revenue Distributed
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      number:
        description: 'The revenue event number created when a revenue event occurs.

          '
        type: string
      recognitionEnd:
        description: "\nThe end date of a recognition period in YYYY-MM-DD format.\
          \ \n\nThe maximum difference of the recognitionStart and recognitionEnd\
          \ date fields is equal to 250 multiplied by the length of an accounting\
          \ period.\n"
        format: date
        type: string
      recognitionStart:
        description: 'The start date of a recognition period in YYYY-MM-DD format.

          '
        format: date
        type: string
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRevenueItemType'
        type: array
      subscriptionChargeId:
        description: 'The original subscription charge ID.

          '
        type: string
      subscriptionId:
        description: 'The original subscription ID.

          '
        type: string
    title: revenueEventDetails
    type: object
  GETRevenueEventDetailsType:
    properties:
      revenueEventDetails:
        description: 'Represents a change to a revenue schedule, such as posting an
          invoice or distributing revenue.

          '
        items:
          $ref: '#/definitions/GETRevenueEventDetailWithoutSuccessType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETRevenueItemType:
    properties:
      accountingPeriodEndDate:
        description: "The accounting period end date. The accounting period end date\
          \ of the open-ended accounting period is null. \n"
        format: date
        type: string
      accountingPeriodName:
        description: "Name of the accounting period. The open-ended accounting period\
          \ is named `Open-Ended`. \n"
        type: string
      accountingPeriodStartDate:
        description: 'The accounting period start date.

          '
        format: date
        type: string
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as *JPY 30* or *USD 30.15*. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned:  `Allocation amount with wrong decimal places.`

          '
        format: decimal
        type: string
      currency:
        description: "The type of currency used. \n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      isAccountingPeriodClosed:
        description: "Indicates if the accounting period is closed or open. \n"
        type: boolean
    title: revenueItems
    type: object
  GETRevenueItemsType:
    properties:
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRevenueItemType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETRevenueRecognitionRuleAssociationType:
    properties:
      revenueRecognitionRuleName:
        description: 'The name of the revenue recognition rule governing the revenue
          schedule.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETRevenueStartDateSettingType:
    properties:
      startDate:
        description: 'The date on which revenue automation starts. This is the first
          day of an accounting period.

          '
        format: date
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      updatedBy:
        description: 'The user who made the change.

          '
        type: string
      updatedOn:
        description: 'The date when the revenue automation start date was set.

          '
        format: date-time
        type: string
    type: object
  GETRsRevenueItemType:
    properties:
      accountingPeriodEndDate:
        description: 'The accounting period end date. The accounting period end date
          of the open-ended accounting period is null.

          '
        format: date
        type: string
      accountingPeriodName:
        description: "Name of the accounting period. The open-ended accounting period\
          \ is named `Open-Ended`. \n"
        type: string
      accountingPeriodStartDate:
        description: 'The accounting period start date.

          '
        format: date
        type: string
      amount:
        description: 'The amount of the revenue item.

          '
        format: decimal
        type: string
      currency:
        description: 'The type of currency used.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      deferredRevenueAccountingCode:
        description: 'The accounting code for deferred revenue, such as Monthly Recurring
          Liability. Required only when `overrideChargeAccountingCodes` is `true`.
          Otherwise this value is ignored.

          '
        type: string
      deferredRevenueAccountingCodeType:
        description: 'The type associated with the deferred revenue accounting code,
          such as Deferred Revenue. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise this value is ignored.

          '
        type: string
      isAccountingPeriodClosed:
        description: 'Indicates if the accounting period is closed or open.

          '
        type: boolean
      recognizedRevenueAccountingCode:
        description: 'The accounting code for recognized revenue, such as Monthly
          Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise the value is ignored.

          '
        type: string
      recognizedRevenueAccountingCodeType:
        description: 'The type associated with the recognized revenue accounting code,
          such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise this value is ignored.

          '
        type: string
    title: revenueItems
    type: object
  GETRsRevenueItemsType:
    properties:
      revenueItems:
        description: 'Revenue items are listed in ascending order by the accounting
          period start date.

          '
        items:
          $ref: '#/definitions/GETRsRevenueItemType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETSubscriptionProductFeatureType:
    properties:
      description:
        description: 'Feature description.

          '
        type: string
      featureCode:
        description: 'Feature code, up to 255 characters long.

          '
        type: string
      id:
        description: 'SubscriptionProductFeature ID.

          '
        type: string
      name:
        description: 'Feature name, up to 255 characters long.

          '
        type: string
    title: subscriptionProductFeatures
    type: object
  GETSubscriptionRatePlanChargesType:
    properties:
      applyDiscountTo:
        description: "Specifies the type of charges a specific discount applies to.\
          \ \n\nThis field is only used when applied to a discount charge model. If\
          \ you are not using a discount charge model, the value is null.\n\nPossible\
          \ values:\n\n* `RECURRING`\n* `USAGE`\n* `ONETIMERECURRING`\n* `ONETIMEUSAGE`\n\
          * `RECURRINGUSAGE`\n* `ONETIMERECURRINGUSAGE`\n"
        type: string
      billingDay:
        description: "Billing cycle day (BCD), which is when bill runs generate invoices\n\
          for charges associated with the product rate plan charge or the account.\
          \  \n\nValues:\n\n* `DefaultFromCustomer`\n* `SpecificDayofMonth(#)`\n*\
          \ `SubscriptionStartDay`\n* `ChargeTriggerDay`\n* `SpecificDayOfWeek/dayofweek`:\
          \ in which dayofweek is the day in the week you define your billing periods\
          \ to start.\n\nIn the response data, a day-of-the-month value (`1`-`31`)\
          \ appears in place of the hash sign above (\"#\"). If this value exceeds\
          \ the number of days in a particular month, the last day of the month is\
          \ used as the BCD.\n"
        type: string
      billingPeriod:
        description: 'Allows billing period to be overridden on the rate plan charge.

          '
        type: string
      billingPeriodAlignment:
        description: |
          Possible values:

          * `AlignToCharge`
          * `AlignToSubscriptionStart`
          * `AlignToTermStart`
        type: string
      billingTiming:
        description: |
          The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.

          Possible values are:

          * `In Advance`
          * `In Arrears`

          **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        type: string
      chargedThroughDate:
        description: 'The date through which a customer has been billed for the charge.

          '
        format: date
        type: string
      currency:
        description: 'Currency used by the account. For example, `USD` or `EUR`.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Description of the rate plan charge.

          '
        type: string
      discountAmount:
        description: 'The amount of the discount.

          '
        format: decimal
        type: string
      discountLevel:
        description: 'The level of the discount. Values: `RatePlan`, `Subscription`,
          `Account`.

          '
        type: string
      discountPercentage:
        description: 'The amount of the discount as a percentage.

          '
        format: decimal
        type: string
      dmrc:
        description: 'The change (delta) of monthly recurring charge exists when the
          change in monthly recurring revenue caused by an amendment or a new subscription.

          '
        type: string
      done:
        description: 'A value of `true` indicates that an invoice for a charge segment
          has been completed. A value of `false` indicates that an invoice has not
          bee completed for the charge segment.

          '
        type: boolean
      dtcv:
        description: 'After an amendment or an AutomatedPriceChange event, `dtcv`
          displays the change (delta) for the total contract value (TCV) amount for
          this charge, compared with its previous value with recurring charge types.

          '
        type: string
      effectiveEndDate:
        description: 'The effective end date of the rate plan charge.

          '
        format: date
        type: string
      effectiveStartDate:
        description: 'The effective start date of the rate plan charge.

          '
        format: date
        type: string
      endDateCondition:
        description: |
          Defines when the charge ends after the charge trigger date.

          If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.

          Values:

          * `Subscription_End`
          * `Fixed_Period`
          * `Specific_End_Date`
        type: string
      id:
        description: 'Rate plan charge ID.

          '
        type: string
      includedUnits:
        description: 'Specifies the number of units in the base set of units.

          '
        format: decimal
        type: string
      listPriceBase:
        description: |
          List price base; possible values are:

          * `Per_Billing_Period`
          * `Per_Month`
          * `Per_Week`
        type: string
      model:
        description: |
          Charge model; possible values are:

          * `FlatFee`
          * `PerUnit`
          * `Overage`
          * `Volume`
          * `Tiered`
          * `TieredWithOverage`
          * `DiscountFixedAmount`
          * `DiscountPercentage`
        type: string
      mrr:
        description: 'Monthly recurring revenue of the rate plan charge.

          '
        type: string
      name:
        description: 'Charge name.

          '
        type: string
      number:
        description: 'Charge number.

          '
        type: string
      numberOfPeriods:
        description: 'Specifies the number of periods to use when calculating charges
          in an overage smoothing charge model.

          '
        format: int64
        type: integer
      originalChargeId:
        description: 'The original ID of the rate plan charge.

          '
        type: string
      overageCalculationOption:
        description: 'Determines when to calculate overage charges.

          '
        type: string
      overagePrice:
        description: 'The price for units over the allowed amount.

          '
        format: decimal
        type: string
      overageUnusedUnitsCreditOption:
        description: 'Determines whether to credit the customer with unused units
          of usage.

          '
        type: string
      price:
        description: 'The price associated with the rate plan charge expressed as
          a decimal.

          '
        format: decimal
        type: string
      priceChangeOption:
        description: "When the following is true:\n\n1. AutomatedPriceChange setting\
          \ is on\n\n2. Charge type is not one-time\n\n3. Charge model is not discount\
          \ percentage\n\nThen an automatic price change can have a value for when\
          \ a termed subscription is renewed. \n\nValues (one of the following):\n\
          \n* `NoChange` (default)\n* `SpecificPercentageValue`\n* `UseLatestProductCatalogPricing`\n"
        type: string
      priceIncreasePercentage:
        description: 'A planned future price increase amount as a percentage.

          '
        format: decimal
        type: string
      pricingSummary:
        description: 'Concise description of rate plan charge model.

          '
        type: string
      processedThroughDate:
        description: 'The date until when charges have been processed. When billing
          in arrears, such as usage, this field value is the the same as the `ChargedThroughDate`
          value. This date is the earliest date when a charge can be amended.

          '
        format: date
        type: string
      productRatePlanChargeId:
        description: ''
        type: string
      quantity:
        description: 'The quantity of units, such as the number of authors in a hosted
          wiki service. Valid for all charge models except for Flat Fee pricing.

          '
        format: decimal
        type: string
      ratingGroup:
        description: "Specifies a rating group based on which usage records are rated.\
          \ \n\nPossible values are:\n\n* `ByBillingPeriod` (default)\n* `ByUsageStartDate`\n\
          * `ByUsageRecord`\n* `ByUsageUpload`\n\n**Note:** This field is only used\
          \ for per unit, volume pricing, and tiered pricing charge models. Use this\
          \ field only for Usage charges. One-Time Charges and Recurring Charges return\
          \ `NULL`.\n\n**Note:** This feature is in **Limited Availability**. If you\
          \ wish to have access to the feature, submit a request at [Zuora Global\
          \ Support](http://support.zuora.com/).\n"
        type: string
      segment:
        description: 'The identifying number of the subscription rate plan segment.
          Segments are numbered sequentially, starting with 1.

          '
        format: int64
        type: integer
      smoothingModel:
        description: |
          Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:

          * `ContractEffectiveDate`
          * `ServiceActivationDate`
          * `CustomerAcceptanceDate`
        type: string
      specificBillingPeriod:
        description: 'Customizes the number of month or week for the charges billing
          period. This field is required if you set the value of the `BillingPeriod`
          field to `Specific_Months` or `Specific_Weeks`.

          '
        format: int64
        type: integer
      specificEndDate:
        description: 'The specific date on which the charge ends. If the subscription
          ends before the specific end date, the charge ends when the subscription
          ends. But if the subscription end date is subsequently changed through a
          Renewal, or Terms and Conditions amendment, the charge will end on the specific
          end date.

          '
        format: date
        type: string
      tcv:
        description: 'The total contract value.

          '
        type: string
      tiers:
        description: 'One or many defined ranges with distinct pricing.

          '
        items:
          $ref: '#/definitions/GETTierType'
        type: array
      triggerDate:
        description: 'The date that the rate plan charge will be triggered.

          '
        format: date
        type: string
      triggerEvent:
        description: "The event that will cause the rate plan charge to be triggered.\n\
          \nPossible values: \n\n* `ContractEffective`\n* `ServiceActivation`\n* `CustomerAcceptance`\n\
          * `SpecificDate`\n"
        type: string
      type:
        description: 'Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.

          '
        type: string
      unusedUnitsCreditRates:
        description: "Specifies the rate to credit a customer for unused units of\
          \ usage. This field is applicable only for overage charge models when the\
          \ \n`OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.\n"
        format: decimal
        type: string
      uom:
        description: "Specifies the units to measure usage. \n"
        type: string
      upToPeriods:
        description: |
          Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.

          If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
        type: string
      upToPeriodsType:
        description: "The period type used to define when the charge ends. \n\nValues:\n\
          \n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n"
        type: string
      usageRecordRatingOption:
        description: "Determines how Zuora processes usage records for per-unit usage\
          \ charges. \n"
        type: string
      version:
        description: 'Rate plan charge revision number.

          '
        format: int64
        type: integer
    title: ratePlanCharges
    type: object
  GETSubscriptionRatePlanType:
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      id:
        description: 'Rate plan ID.

          '
        type: string
      lastChangeType:
        description: |
          The last amendment on the rate plan.

          Possible Values:

          * `Add`
          * `Update`
          * `Remove`
        type: string
      productId:
        description: ''
        type: string
      productName:
        description: ''
        type: string
      productRatePlanId:
        description: ''
        type: string
      productSku:
        description: 'The unique SKU for the product.

          '
        type: string
      ratePlanCharges:
        description: 'Container for one or more charges.

          '
        items:
          $ref: '#/definitions/GETSubscriptionRatePlanChargesType'
        type: array
      ratePlanName:
        description: 'Name of the rate plan.

          '
        type: string
      subscriptionProductFeatures:
        description: "Container for one or more features. \n\nOnly available when\
          \ the following settings are enabled:\n\n* The Entitlements feature in your\
          \ tenant.\n*"
        items:
          $ref: '#/definitions/GETSubscriptionProductFeatureType'
        type: array
    title: ratePlans
    type: object
  GETSubscriptionType:
    properties:
      CpqBundleJsonId__QT:
        description: ''
        type: string
      OpportunityCloseDate__QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName__QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType__QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal, or Churn.\
          \ This field is populated when the subscription originates from Zuora Quotes.\n\
          \nThis field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteNumber__QT:
        description: |+
          The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.

          This field is used only for reporting subscription metrics.


        type: string
      QuoteType__QT:
        description: "The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is populated when\
          \ the subscription originates from Zuora Quotes.\n\nThis field is used only\
          \ for reporting subscription metrics. \n\n"
        type: string
      accountId:
        description: ''
        type: string
      accountName:
        description: ''
        type: string
      accountNumber:
        description: ''
        type: string
      autoRenew:
        description: 'If `true`, the subscription automatically renews at the end
          of the term. Default is `false`.

          '
        type: boolean
      contractEffectiveDate:
        description: 'Effective contract date for this subscription, as yyyy-mm-dd.

          '
        format: date
        type: string
      contractedMrr:
        description: 'Monthly recurring revenue of the subscription.

          '
        format: decimal
        type: string
      currentTerm:
        description: 'The length of the period for the current subscription term.

          '
        format: int64
        type: integer
      currentTermPeriodType:
        description: |
          The period type for the current subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      customerAcceptanceDate:
        description: 'The date on which the services or products within a subscription
          have been accepted by the customer, as yyyy-mm-dd.

          '
        format: date
        type: string
      id:
        description: 'Subscription ID.

          '
        type: string
      initialTerm:
        description: 'The length of the period for the first subscription term.

          '
        format: int64
        type: integer
      initialTermPeriodType:
        description: |
          The period type for the first subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      invoiceOwnerAccountId:
        description: ''
        type: string
      invoiceOwnerAccountName:
        description: ''
        type: string
      invoiceOwnerAccountNumber:
        description: ''
        type: string
      invoiceSeparately:
        description: "Separates a single subscription from other subscriptions and\
          \ creates an invoice for the subscription. \n\nIf the value is `true`, the\
          \ subscription is billed separately from other subscriptions. If the value\
          \ is `false`, the subscription is included with other subscriptions in the\
          \ account invoice.\n"
        type: string
      notes:
        description: 'A string of up to 65,535 characters.

          '
        type: string
      ratePlans:
        description: 'Container for rate plans.

          '
        items:
          $ref: '#/definitions/GETSubscriptionRatePlanType'
        type: array
      renewalSetting:
        description: "Specifies whether a termed subscription will remain `TERMED`\
          \ or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM`\
          \ (default)\n* `RENEW_TO_EVERGREEN`\n"
        type: string
      renewalTerm:
        description: 'The length of the period for the subscription renewal term.

          '
        format: int64
        type: integer
      renewalTermPeriodType:
        description: |
          The period type for the subscription renewal term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      serviceActivationDate:
        description: 'The date on which the services or products within a subscription
          have been activated and access has been provided to the customer, as yyyy-mm-dd

          '
        format: date
        type: string
      status:
        description: |
          Subscription status; possible values are:

          * `Draft`
          * `PendingActivation`
          * `PendingAcceptance`
          * `Active`
          * `Cancelled`
          * `Suspended` (This value is in Limited Availability.)
        type: string
      subscriptionNumber:
        description: ''
        type: string
      subscriptionStartDate:
        description: 'Date the subscription becomes effective.

          '
        format: date
        type: string
      termEndDate:
        description: 'Date the subscription term ends. If the subscription is evergreen,
          this is null or is the cancellation date (if one has been set).

          '
        format: date
        type: string
      termStartDate:
        description: 'Date the subscription term begins. If this is a renewal subscription,
          this date is different from the subscription start date.

          '
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
      totalContractedValue:
        description: 'Total contracted value of the subscription.

          '
        format: decimal
        type: string
    title: subscriptions
    type: object
  GETSubscriptionTypeWithSuccess:
    properties:
      CpqBundleJsonId__QT:
        description: ''
        type: string
      OpportunityCloseDate__QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName__QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType__QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal, or Churn.\
          \ This field is populated when the subscription originates from Zuora Quotes.\n\
          \nThis field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteNumber__QT:
        description: |
          The unique identifier of the Quote. This field is populated when the subscription originates from Zuora Quotes.

          This field is used only for reporting subscription metrics.

          See [Subscription Data Source](https://knowledgecenter.zuora.com/CD_Reporting/Data_Exports/Z_Data_Source_Reference/Subscription_Data_Source) for more information.
        type: string
      QuoteType__QT:
        description: "The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is populated when\
          \ the subscription originates from Zuora Quotes.\n\nThis field is used only\
          \ for reporting subscription metrics. \n\n"
        type: string
      accountId:
        description: ''
        type: string
      accountName:
        description: ''
        type: string
      accountNumber:
        description: ''
        type: string
      autoRenew:
        description: 'If `true`, the subscription automatically renews at the end
          of the term. Default is `false`.

          '
        type: boolean
      contractEffectiveDate:
        description: 'Effective contract date for this subscription, as yyyy-mm-dd.

          '
        format: date
        type: string
      contractedMrr:
        description: 'Monthly recurring revenue of the subscription.

          '
        format: decimal
        type: string
      currentTerm:
        description: 'The length of the period for the current subscription term.

          '
        format: int64
        type: integer
      currentTermPeriodType:
        description: |
          The period type for the current subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      customerAcceptanceDate:
        description: 'The date on which the services or products within a subscription
          have been accepted by the customer, as yyyy-mm-dd.

          '
        format: date
        type: string
      id:
        description: 'Subscription ID.

          '
        type: string
      initialTerm:
        description: 'The length of the period for the first subscription term.

          '
        format: int64
        type: integer
      initialTermPeriodType:
        description: |
          The period type for the first subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      invoiceOwnerAccountId:
        description: ''
        type: string
      invoiceOwnerAccountName:
        description: ''
        type: string
      invoiceOwnerAccountNumber:
        description: ''
        type: string
      invoiceSeparately:
        description: "Separates a single subscription from other subscriptions and\
          \ creates an invoice for the subscription. \n\nIf the value is `true`, the\
          \ subscription is billed separately from other subscriptions. If the value\
          \ is `false`, the subscription is included with other subscriptions in the\
          \ account invoice.\n"
        type: string
      notes:
        description: 'A string of up to 65,535 characters.

          '
        type: string
      ratePlans:
        description: 'Container for rate plans.

          '
        items:
          $ref: '#/definitions/GETSubscriptionRatePlanType'
        type: array
      renewalSetting:
        description: "Specifies whether a termed subscription will remain `TERMED`\
          \ or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM`\
          \ (default)\n* `RENEW_TO_EVERGREEN`\n"
        type: string
      renewalTerm:
        description: 'The length of the period for the subscription renewal term.

          '
        format: int64
        type: integer
      renewalTermPeriodType:
        description: |
          The period type for the subscription renewal term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      serviceActivationDate:
        description: 'The date on which the services or products within a subscription
          have been activated and access has been provided to the customer, as yyyy-mm-dd

          '
        format: date
        type: string
      status:
        description: |
          Subscription status; possible values are:

          * `Draft`
          * `PendingActivation`
          * `PendingAcceptance`
          * `Active`
          * `Cancelled`
          * `Suspended` (This value is in Limited Availability.)
        type: string
      subscriptionNumber:
        description: ''
        type: string
      subscriptionStartDate:
        description: 'Date the subscription becomes effective.

          '
        format: date
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      termEndDate:
        description: 'Date the subscription term ends. If the subscription is evergreen,
          this is null or is the cancellation date (if one has been set).

          '
        format: date
        type: string
      termStartDate:
        description: 'Date the subscription term begins. If this is a renewal subscription,
          this date is different from the subscription start date.

          '
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
      totalContractedValue:
        description: 'Total contracted value of the subscription.

          '
        format: decimal
        type: string
    type: object
  GETSubscriptionWrapper:
    properties:
      subscriptions:
        description: 'Array of subscriptions.

          '
        items:
          $ref: '#/definitions/GETSubscriptionType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GETTierType:
    properties:
      endingUnit:
        description: 'Decimal defining end of tier range.

          '
        format: decimal
        type: string
      price:
        description: 'The decimal value of the tiered charge model. If the charge
          model is not a tiered type then this price field will be null and the `price`
          field directly under the `productRatePlanCharges` applies.

          '
        format: decimal
        type: string
      priceFormat:
        description: 'Tier price format. Allowed values: `flat fee`, `per unit`.

          '
        type: string
      startingUnit:
        description: 'Decimal defining start of tier range.

          '
        format: decimal
        type: string
      tier:
        description: 'Unique number of the tier.

          '
        format: int64
        type: integer
    title: tiers
    type: object
  GETUsageType:
    properties:
      accountId:
        description: 'Customer account ID.

          '
        type: string
      accountName:
        description: 'Customer account name.

          '
        type: string
      accountNumber:
        description: 'Customer account number.

          '
        type: string
      chargeNumber:
        description: 'Number of the rate-plan charge that pays for this usage.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      id:
        description: 'Unique ID for the usage item.

          '
        type: string
      quantity:
        description: 'Number of units used.

          '
        format: decimal
        type: string
      sourceName:
        description: 'Source of the usage data. Possible values are: `Import`, `API`.

          '
        type: string
      startDateTime:
        description: 'Start date of the time period in which usage is tracked. Zuora
          uses this field value to determine the usage date.

          '
        format: date-time
        type: string
      status:
        description: 'Possible values are: `Importing`, `Pending`, `Processed`.

          '
        type: string
      submissionDateTime:
        description: 'Date when usage was submitted.

          '
        format: date-time
        type: string
      subscriptionNumber:
        description: 'Number of the subscription covering this usage.

          '
        type: string
      unitOfMeasure:
        description: 'Unit used to measure consumption.

          '
        type: string
    title: usage
    type: object
  GETUsageWrapper:
    properties:
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      usage:
        description: 'Contains one or more usage items.

          '
        items:
          $ref: '#/definitions/GETUsageType'
        type: array
    type: object
  GatewayOption:
    properties:
      name:
        description: ''
        type: string
      value:
        description: ''
        type: string
    type: object
  GetHostedPageType:
    properties:
      pageId:
        description: 'Page ID of the Payment Page that Zuora assigns when it is created.

          '
        type: string
      pageName:
        description: 'Name of the Payment Page that specified during the page configuration.

          '
        type: string
      pageType:
        description: 'Payment method type of this Payment Page, e.g. ''Credit Card'',
          ''ACH'', or ''Bank Transfer''.

          '
        type: string
      pageVersion:
        description: 'Version of the Payment Page. 1 for Payment Pages 1.0 or 2 for
          Payment Pages 2.0.

          '
        type: string
    title: hostedpages
    type: object
  GetHostedPagesType:
    properties:
      hostedpages:
        description: 'Container for the hosted page information.

          '
        items:
          $ref: '#/definitions/GetHostedPageType'
        type: array
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  GetProductFeatureType:
    properties:
      code:
        description: 'Feature code, up to 255 characters long.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Feature description.

          '
        type: string
      id:
        description: 'Feature ID.

          '
        type: string
      name:
        description: 'Feature name, up to 255 characters long.

          '
        type: string
      status:
        description: ''
        type: string
    title: productFeatures
    type: object
  Invoice:
    properties:
      AccountId:
        description: ''
        type: string
      AdjustmentAmount:
        description: " The amount of the invoice adjustments associated with the invoice.\
          \ **Character limi**t: 16\n\n\n**Values**: a valid currency amount "
        format: double
        type: number
      Amount:
        description: " The sum of all charges and taxes associated with the invoice.\n\
          \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
        format: double
        type: number
      AmountWithoutTax:
        description: " The sum of all charges associated with the invoice. Taxes are\
          \ excluded from this value.\n\n\n**Character limit**: 16\n\n\n**Values**:\
          \ automatically generated "
        format: double
        type: number
      Balance:
        description: " The remaining balance of the invoice after all payments, adjustments,\
          \ and refunds are applied.\n\n\n**Character limit**: 16\n\n\n**Values**:\
          \ automatically generated "
        format: double
        type: number
      BillRunId:
        description: " The ID of a Bill Run.\n\n\n**Character limit**: 32\n\n\n**Values**:\
          \ a BillRun ID "
        type: string
      Body:
        description: ' Required '
        type: string
      Comments:
        description: " Additional information related to the invoice that a Zuora\
          \ user added to the invoice.\n\n\n**Character limit**: 255 **Values:** a\
          \ string of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice. If a bill\
          \ run generated the invoice, then the value is the user ID of person who\
          \ created the bill run.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically\
          \ generated "
        type: string
      CreatedDate:
        description: " The date when the invoice was generated.\n\n\n**Character limit**:\
          \ 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      CreditBalanceAdjustmentAmount:
        description: |2+
           The currency amount of the adjustment applied to the customer's credit balance.


          **Character limit**: 16


          **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.


        format: double
        type: number
      DueDate:
        description: " The date by which the payment for this invoice is due.\n\n\n\
          **Character limit**: 29 "
        format: date
        type: string
      IncludesOneTime:
        description: " Specifies whether the invoice includes one-time charges. You\
          \ can use this field only with the `generate\n` call for the Invoice object.\n\
          \n\n**Character limit**: 5\n\n\n**Values**: automatically generated from\
          \ one of the following: `True` (default), `False` "
        type: boolean
      IncludesRecurring:
        description: " Specifies whether the invoice includes recurring charges. You\
          \ can use this field only with the `generate\n`call for the Invoice object.\n\
          \n\n**Character limit**: 5\n\n\n**Values**: automatically generated from\
          \ one of the following: `True` (default), `False` "
        type: boolean
      IncludesUsage:
        description: " Specifies whether the invoice includes usage charges. You can\
          \ use this field only with the `generate\n`call for the Invoice object.\n\
          \n\n**Character limit**: 5\n\n\n**Values**: automatically generated from\
          \ one of the following: `True `(default), `False` "
        type: boolean
      InvoiceDate:
        description: " Specifies the date on which to generate the invoice.\n\n\n\
          **Character limit**: 29 "
        format: date
        type: string
      InvoiceNumber:
        description: " The unique identification number for the invoice. This number\
          \ is returned as a string.\n\n\n**Character limit**: 32\n\n\n**Values**:\
          \ automatically generated "
        type: string
      LastEmailSentDate:
        description: " The date when the invoice was last emailed.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      PaymentAmount:
        description: " The amount of payments applied to the invoice.\n\n\n**Character\
          \ limit**: 16 **Value**s: automatically generated "
        format: double
        type: number
      PostedBy:
        description: " The user ID of the person who moved the invoice to Posted status.\n\
          \n\n**Character limit**: 32\n\n\n**Values**: automatically generated "
        type: string
      PostedDate:
        description: " The date when the invoice was posted.\n**Character limit:**\
          \ 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      RefundAmount:
        description: " Specifies the amount of a refund that was applied against an\
          \ earlier payment on the invoice.\n\n\n**Character limit**: 16\n\n\n**Values**:\
          \ automatically generated "
        format: double
        type: number
      RegenerateInvoicePDF:
        description: " Regenerates a PDF of an invoice that was already generated.\
          \ Add this field to an `update\n` call to regenerate an invoice PDF. Note\
          \ that when you set the `RegenerateInvoicePDF` field to `true`, you cannot\
          \ update any other fields in the same `update\n` call. Otherwise, you will\
          \ receive the following `INVALID_VALUE` error: &quot;When field RegenerateInvoicePDF\
          \ is set to true to regenerate the invoice PDF file, changes on other fields\
          \ of the invoice are not allowed.&quot;\n\n**Character limit**: 5\n\n\n\
          **Values**: `True`, `False` "
        type: boolean
      Status:
        description: |2+
           The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.


          **Character limit**: 8


          **Values**: one of the following:

          -  Draft (default, automatically set upon invoice creation)

          -  Posted

          -  Canceled

        type: string
      TargetDate:
        description: " This date is used to determine which charges are to be billed.\
          \ All charges that are to be billed on this date or prior will be included\
          \ in this bill run.\n\n\n**Character limit**: 29 "
        format: date
        type: string
      TaxAmount:
        description: " The total amount of the taxes applied to the invoice.\n\n\n\
          **Character limit**: 16\n\n\n**Values**: automatically generated "
        format: double
        type: number
      TaxExemptAmount:
        description: " The total amount of the invoice that is exempt from taxation.\n\
          \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
        format: double
        type: number
      TransferredToAccounting:
        description: " Specifies whether or not the invoice was transferred to an\
          \ external accounting system, such as NetSuite.\n\n\n**Character limit**:\
          \ 10\n\n\n**Values**: Processing, Yes, Error, Ignore "
        type: string
      UpdatedById:
        description: ''
        type: string
      UpdatedDate:
        description: " The date when the invoice was last updated.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
    type: object
  InvoiceData:
    properties:
      Invoice:
        description: ''
        properties:
          AccountId:
            description: ''
            type: string
          AdjustmentAmount:
            description: " The amount of the invoice adjustments associated with the\
              \ invoice. **Character limi**t: 16\n\n\n**Values**: a valid currency\
              \ amount "
            format: double
            type: number
          Amount:
            description: " The sum of all charges and taxes associated with the invoice.\n\
              \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          AmountWithoutTax:
            description: " The sum of all charges associated with the invoice. Taxes\
              \ are excluded from this value.\n\n\n**Character limit**: 16\n\n\n**Values**:\
              \ automatically generated "
            format: double
            type: number
          Balance:
            description: " The remaining balance of the invoice after all payments,\
              \ adjustments, and refunds are applied.\n\n\n**Character limit**: 16\n\
              \n\n**Values**: automatically generated "
            format: double
            type: number
          BillRunId:
            description: " The ID of a Bill Run.\n\n\n**Character limit**: 32\n\n\n\
              **Values**: a BillRun ID "
            type: string
          Body:
            description: ' Required '
            type: string
          Comments:
            description: " Additional information related to the invoice that a Zuora\
              \ user added to the invoice.\n\n\n**Character limit**: 255 **Values:**\
              \ a string of 255 characters or fewer "
            type: string
          CreatedById:
            description: " The user ID of the person who created the invoice. If a\
              \ bill run generated the invoice, then the value is the user ID of person\
              \ who created the bill run.\n\n\n**Character limit**: 32\n\n\n**Values**:\
              \ automatically generated "
            type: string
          CreatedDate:
            description: " The date when the invoice was generated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          CreditBalanceAdjustmentAmount:
            description: |2+
               The currency amount of the adjustment applied to the customer's credit balance.


              **Character limit**: 16


              **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.


            format: double
            type: number
          DueDate:
            description: " The date by which the payment for this invoice is due.\n\
              \n\n**Character limit**: 29 "
            format: date
            type: string
          IncludesOneTime:
            description: " Specifies whether the invoice includes one-time charges.\
              \ You can use this field only with the `generate\n` call for the Invoice\
              \ object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically\
              \ generated from one of the following: `True` (default), `False` "
            type: boolean
          IncludesRecurring:
            description: " Specifies whether the invoice includes recurring charges.\
              \ You can use this field only with the `generate\n`call for the Invoice\
              \ object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically\
              \ generated from one of the following: `True` (default), `False` "
            type: boolean
          IncludesUsage:
            description: " Specifies whether the invoice includes usage charges. You\
              \ can use this field only with the `generate\n`call for the Invoice\
              \ object.\n\n\n**Character limit**: 5\n\n\n**Values**: automatically\
              \ generated from one of the following: `True `(default), `False` "
            type: boolean
          InvoiceDate:
            description: " Specifies the date on which to generate the invoice.\n\n\
              \n**Character limit**: 29 "
            format: date
            type: string
          InvoiceNumber:
            description: " The unique identification number for the invoice. This\
              \ number is returned as a string.\n\n\n**Character limit**: 32\n\n\n\
              **Values**: automatically generated "
            type: string
          LastEmailSentDate:
            description: " The date when the invoice was last emailed.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          PaymentAmount:
            description: " The amount of payments applied to the invoice.\n\n\n**Character\
              \ limit**: 16 **Value**s: automatically generated "
            format: double
            type: number
          PostedBy:
            description: " The user ID of the person who moved the invoice to Posted\
              \ status.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically\
              \ generated "
            type: string
          PostedDate:
            description: " The date when the invoice was posted.\n**Character limit:**\
              \ 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          RefundAmount:
            description: " Specifies the amount of a refund that was applied against\
              \ an earlier payment on the invoice.\n\n\n**Character limit**: 16\n\n\
              \n**Values**: automatically generated "
            format: double
            type: number
          RegenerateInvoicePDF:
            description: " Regenerates a PDF of an invoice that was already generated.\
              \ Add this field to an `update\n` call to regenerate an invoice PDF.\
              \ Note that when you set the `RegenerateInvoicePDF` field to `true`,\
              \ you cannot update any other fields in the same `update\n` call. Otherwise,\
              \ you will receive the following `INVALID_VALUE` error: &quot;When field\
              \ RegenerateInvoicePDF is set to true to regenerate the invoice PDF\
              \ file, changes on other fields of the invoice are not allowed.&quot;\n\
              \n**Character limit**: 5\n\n\n**Values**: `True`, `False` "
            type: boolean
          Status:
            description: |2+
               The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.


              **Character limit**: 8


              **Values**: one of the following:

              -  Draft (default, automatically set upon invoice creation)

              -  Posted

              -  Canceled

            type: string
          TargetDate:
            description: " This date is used to determine which charges are to be\
              \ billed. All charges that are to be billed on this date or prior will\
              \ be included in this bill run.\n\n\n**Character limit**: 29 "
            format: date
            type: string
          TaxAmount:
            description: " The total amount of the taxes applied to the invoice.\n\
              \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          TaxExemptAmount:
            description: " The total amount of the invoice that is exempt from taxation.\n\
              \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          TransferredToAccounting:
            description: " Specifies whether or not the invoice was transferred to\
              \ an external accounting system, such as NetSuite.\n\n\n**Character\
              \ limit**: 10\n\n\n**Values**: Processing, Yes, Error, Ignore "
            type: string
          UpdatedById:
            description: ''
            type: string
          UpdatedDate:
            description: " The date when the invoice was last updated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
        type: object
      InvoiceItem:
        description: ''
        items:
          $ref: '#/definitions/InvoiceItem'
        type: array
    type: object
  InvoiceItem:
    properties:
      AccountingCode:
        description: " The accounting code for the item's charge. Accounting codes\
          \ group transactions that contain similar accounting attributes.\n\n\n**Character\
          \ limit**: 100\n\n\n**Values**: inherited from `RatePlanCharge.AccountingCode` "
        type: string
      AppliedToChargeNumber:
        description: " The charge number that the discount charge is applied to. This\
          \ field is only for the invoice items that are discount charges. This field\
          \ is only returned in subscription previews.\nThis field will be returned\
          \ in the response if you specify the charge number in the rate plan charges\
          \ in the request.\n\n**Character limit**: 32\n\n**Values**: inherited from\
          \ `RatePlanCharge.ChargeNumber` for the charge associated with the invoice\
          \ item that the discount charge is applied to "
        type: string
      AppliedToInvoiceItemId:
        description: " Associates a discount invoice item to a specific invoice item.\n\
          \n**Character limit**: 32\n\n**Values**: inherited from the ID of the charge\
          \ that a discount applies to "
        type: string
      ChargeAmount:
        description: " The amount being charged for the invoice item. This amount\
          \ doesn't include taxes regardless if the charge's tax mode is inclusive\
          \ or exclusive.\n\n\n**Character limit**:\n\n\n**Values**: automatically\
          \ calculated from multiple fields in multiple objects "
        format: double
        type: number
      ChargeDate:
        description: " The date when the Invoice Item is created .\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      ChargeDescription:
        description: " A description of the invoice item's charge.\n\n\n**Character\
          \ limit**: 500\n\n\n**Values**: inherited from `RatePlanCharge.Description` "
        type: string
      ChargeId:
        description: " The ID of the rate plan charge that is associated with this\
          \ invoice item upon object creation.\n\n\n**Character limit**: 32\n\n\n\
          **Values**: inherited from `RatePlanCharge.Id` "
        type: string
      ChargeName:
        description: " The name of the invoice item's charge.\n**Character limi**t:\
          \ 50 **Values: **inherited from `RatePlanCharge.Name` "
        type: string
      ChargeNumber:
        description: " The unique identifier of the invoice item's charge.\n**Character\
          \ limit:** 50 **Values:** inherited from `RatePlanCharge.ChargeNumber` "
        type: string
      ChargeType:
        description: |2
           Specifies the type of charge.


          **Character limit**: 9


          **Values**: one of the following:

          - `OneTime`
          - `Recurring`
          - `Usage`
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice item.\n\n\
          \n**Character limit**: 32\n\n\n**Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date the invoice item was created.\n**Character limit:**\
          \ 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      InvoiceId:
        description: " The ID of the invoice that's associated with this invoice item.\n\
          \n\n**Character limit**: 32\n\n\n**Values**: inherited from `Invoice.Id` "
        type: string
      ProcessingType:
        description: |2
           Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.


          **Character limit**: **Values: **

          - 0: charge
          - 1: discount
          - 2: prepayment
          - 3: tax
        format: double
        type: number
      ProductDescription:
        description: " A description of the product associated with this invoice item.\n\
          \n\n**Character limit**: 500\n\n\n**Values**: inherited from `Product.Description` "
        type: string
      ProductId:
        description: " The ID of the product associated with this invoice item.\n\n\
          \n**Character limit**: 32\n\n\n**Values**: inherited from `Product.Id` "
        type: string
      ProductName:
        description: " The name of the product associated with this invoice item.\n\
          \n\n**Character limit**: 255 **Values: **inherited from `Product.Name` "
        type: string
      ProductRatePlanChargeId:
        description: |2-
           The ID of the rate plan charge that's associated with this invoice item.


          **Character limit**: 32


          **Values**: inherited from `ProductRatePlanCharge.Id` You cannot `query
          ` for this field. Only the s`ubscribe
          ` preview and the `amend
          ` preview calls will return the value of this field in the response.
        type: string
      Quantity:
        description: " The number of units for this invoice item.\n\n\n\n**Values**:\
          \ inherited from `RatePlanCharge.Quantity` "
        format: double
        type: number
      RatePlanChargeId:
        description: " The ID of the rate plan charge that's associated with this\
          \ invoice item.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited\
          \ from `RatePlanCharge.Id` "
        type: string
      RevRecCode:
        description: " Associates this invoice item with a specific revenue recognition\
          \ code.\n\n\n**Character limit**: 32\n\n\n**Values**: inherited from `ProductRatePlanCharge.RevRecCode` "
        type: string
      RevRecStartDate:
        description: " The date when revenue recognition is triggered.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: generated from `InvoiceItem.RevRecTriggerCondition` "
        format: date
        type: string
      RevRecTriggerCondition:
        description: " Specifies when revenue recognition begins based on a triggering\
          \ event.\n\n\n**Character limit**:\n\n\n**Values**: inherited from `ProductRatePlanCharge`.`RevRecTriggerCondition` "
        type: string
      SKU:
        description: " The unique SKU for the product associated with this invoice\
          \ item.\n\n\n**Character limit**: 255\n\n\n**Values**: inherited from `Product.SKU` "
        type: string
      ServiceEndDate:
        description: " The end date of the service period associated with this invoice\
          \ item. Service ends one second before the date in this value.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date
        type: string
      ServiceStartDate:
        description: " The start date of the service period associated with this invoice\
          \ item. If the associated charge is a one-time fee, then this date is the\
          \ date of that charge.\n**Character limit:** 29\n\n\n**Values**: automatically\
          \ generated "
        format: date
        type: string
      SubscriptionId:
        description: " The ID of the subscription associated with the invoice item.\n\
          \n\n**Character limit**: 32\n\n\n**Values**: inherited from `Subscription.Id` "
        type: string
      SubscriptionNumber:
        description: " The number of the subscription associated with the invoice\
          \ item.\n\n\n**Character limit**:\n\n\n**Values**: "
        type: string
      TaxAmount:
        description: " The amount of tax applied to the invoice item's charge.\n\n\
          \n**Character limit**:\n\n\n**Values**: calculated from multiple fields\
          \ in the ProductRatePlanCharge object "
        format: double
        type: number
      TaxCode:
        description: " Specifies the tax code for taxation rules.\n\n\n**Character\
          \ limit**: 6\n\n\n**Values**: inherited from `ProductRatePlanCharge.TaxCode` "
        type: string
      TaxExemptAmount:
        description: " The amount of the invoice item's charge that's tax exempt.\n\
          \n\n**Character limit**:\n\n\n**Values**: calculated from multiple fields\
          \ in the ProductRatePlanCharge object "
        format: double
        type: number
      TaxMode:
        description: " The tax mode of the invoice item.\n\n\n**Character limit**:\
          \ 12\n\n\n**Values**: `TaxExclusive`, `TaxInclusive` "
        type: string
      UOM:
        description: " Specifies the units to measure usage. Units of measure are\
          \ configured in the web-based UI: **Z-Billing > Settings**\n\n**Character\
          \ limit**:\n\n\n**Values**: inherited from `ProductRatePlanCharge.UOM` "
        type: string
      UnitPrice:
        description: " The per-unit price of the invoice item.\n\n\n**Character limit**:\n\
          \n\n**Values**: calculated from multiple fields in ProductRatePlanCharge\
          \ and ProductRatePlanChargeTier objets "
        format: double
        type: number
      UpdatedById:
        description: " The ID of the user who last updated the invoice item.\n\n\n\
          **Character limit**: 32\n\n\n**Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice item was last updated.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
    type: object
  InvoiceProcessingOptions:
    properties:
      InvoiceDate:
        description: ' The invoice date.'
        format: date
        type: string
      InvoiceTargetDate:
        description: ' The date that determines which charges to bill. Charges prior
          to this date or on this date are billed on the resulting invoices. '
        format: date
        type: string
    type: object
  NewChargeMetrics:
    properties:
      ChargeNumber:
        description: ''
        type: string
      DMRR:
        description: ''
        format: double
        type: number
      DTCV:
        description: ''
        format: double
        type: number
      MRR:
        description: ''
        format: double
        type: number
      OriginalId:
        description: ''
        type: string
      OriginalRatePlanId:
        description: ''
        type: string
      ProductRatePlanChargeId:
        description: ''
        type: string
      ProductRatePlanId:
        description: ''
        type: string
      TCV:
        description: ''
        format: double
        type: number
    type: object
  POSTAccountResponseType:
    properties:
      accountId:
        description: 'Auto-generated account ID.

          '
        type: string
      accountNumber:
        description: 'Account number.

          '
        type: string
      contractedMrr:
        description: 'Contracted monthly recurring revenue of the subscription.

          '
        format: decimal
        type: string
      invoiceId:
        description: 'ID of the invoice generated at account creation, if applicable.

          '
        type: string
      paidAmount:
        description: 'Amount collected on the invoice generated at account creation,
          if applicable.

          '
        format: decimal
        type: string
      paymentId:
        description: 'ID of the payment collected on the invoice generated at account
          creation, if applicable.

          '
        type: string
      paymentMethodId:
        description: 'ID of the payment method that was set up at account creation,
          which automatically becomes the default payment method for this account.

          '
        type: string
      subscriptionId:
        description: 'ID of the subscription that was set up at account creation,
          if applicable.

          '
        type: string
      subscriptionNumber:
        description: 'Number of the subscription that was set up at account creation,
          if applicable.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      totalContractedValue:
        description: 'Total contracted value of the subscription.

          '
        format: decimal
        type: string
    type: object
  POSTAccountType:
    example:
      additionalEmailAddresses:
      - test1@test.com
      - test2@test.com
      autoPay: false
      billCycleDay: 0
      billToContact:
        address1: 1051 E Hillsdale Blvd
        city: Foster City
        country: United States
        firstName: John
        lastName: Smith
        state: CA
        workEmail: john.smith@test.com
        zipCode: '94404'
      collect: false
      currency: USD
      hpmCreditCardPaymentMethodId: 2c92c0f93cf64d94013cfe2d20db61a7
      invoice: true
      invoiceDeliveryPrefsEmail: true
      invoiceDeliveryPrefsPrint: false
      name: Zuora Test Account
      notes: This account is for demo purposes.
      paymentTerm: Due Upon Receipt
      subscription:
        autoRenew: true
        contractEffectiveDate: '2016-01-01'
        initialTerm: 12
        notes: This is a trial subscription for POST account demo.
        renewalTerm: 12
        subscribeToRatePlans:
        - chargeOverrides:
          - price: 1000
            productRatePlanChargeId: 2c92c0f94ac8307f014ae5d4a5156b28
          - price: 1000
            productRatePlanChargeId: 2c92c0f94ac8307f014ae5dbe2947851
          productRatePlanId: 2c92c0f94ac8307f014ae5d3d1d469e2
        - chargeOverrides:
          - price: 1000
            productRatePlanChargeId: 2c92c0f83cf64298013d027725a67b7b
          productRatePlanId: 2c92c0f93cf64d94013d027681560341
        termType: TERMED
    properties:
      accountNumber:
        description: 'A unique account number, up to 50 characters that do not begin
          with the default account number prefix.  If no account number is specified,
          one is generated.

          '
        type: string
      additionalEmailAddresses:
        description: |
          A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.

          **Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.
        items:
          type: string
        type: array
      applyCreditBalance:
        description: "Applies a credit balance to an invoice. \n\nIf the value is\
          \ `true`, the credit balance is applied to the invoice. If the value is\
          \ `false`, no action is taken.\n\nPrerequisite: `invoice` must be `true`.\
          \ \n\n**Note:** If you are using the field `invoiceCollect` rather than\
          \ the field `invoice`, the `invoiceCollect` value must be `true`.\n\nTo\
          \ view the credit balance adjustment, retrieve the details of the invoice\
          \ using the Get Invoices method.\n"
        type: boolean
      autoPay:
        description: 'Specifies whether future payments are to be automatically billed
          when they are due. Possible values are: `true`, `false`.

          '
        type: boolean
      batch:
        description: 'The alias name given to a batch. A string of 50 characters or
          less.

          '
        type: string
      billCycleDay:
        description: "The account's bill cycle day (BCD), when bill runs generate\
          \ invoices for the account.  Specify any day of the month (1-31, where 31\
          \ = end-of-month), or 0 for auto-set.\n\nRequired if no subscription will\
          \ be created. \n\nOptional if a subscription is created and defaults to\
          \ the day-of-the-month of the subscription's `contractEffectiveDate`.\n"
        format: int64
        type: integer
      billToContact:
        description: 'Container for bill-to contact information for this account.
          If you do not provide a sold-to contact, the bill-to contact is copied to
          sold-to contact. Once the sold-to contact is created, changes to billToContact
          will not affect soldToContact and vice versa.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country; must be a valid country name or abbreviation. If
              using Zuora Tax, you must specify a country in the sold-to contact to
              calculate tax. A bill-to contact may be used if no sold-to contact is
              provided.

              '
            type: string
          county:
            description: 'County; 32 characters or less. May optionally be used by
              Zuora Tax to calculate county tax.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State; must be a valid state or province name or 2-character
              abbreviation. If using Zuora Tax, be aware that Zuora tax requires a
              state (in the US) or province (in Canada) in this field for the sold-to
              contact to calculate tax, and that a bill-to contact may be used if
              no sold-to contact is provided.

              '
            type: string
          taxRegion:
            description: 'If using Zuora Tax, a region string as optionally defined
              in your tax rules. Not required.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        required:
        - firstName
        - lastName
        type: object
      collect:
        description: "Collects an automatic payment for a subscription. The collection\
          \ generated in this operation is only for this subscription, not for the\
          \ entire customer account.\n\nIf the value is `true`, the automatic payment\
          \ is collected. If the value is `false`, no action is taken.\n\nThe default\
          \ value is `true`.\n\nPrerequisite: invoice must be `true`. \n\n**Note:**\
          \ This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` parameter to the minor version number in the request header. "
        type: string
      communicationProfileId:
        description: 'The ID of a communication profile.          '
        type: string
      creditCard:
        description: 'Container for information on a credit card to associate with
          this account. You must provide either this structure or the `hpmCreditCardPaymentMethodId`
          field, but not both.

          '
        properties:
          cardHolderInfo:
            description: 'ontainer for cardholder information. If provided, Zuora
              will only use this information for this card.  If not provided, Zuora
              will use the account''s existing bill-to contact information for this
              card.

              '
            properties:
              addressLine1:
                description: 'First address line, 255 characters or less.

                  '
                type: string
              addressLine2:
                description: 'Second address line, 255 characters or less.

                  '
                type: string
              cardHolderName:
                description: 'The card holder''s full name as it appears on the card,
                  e.g., "John J Smith", 50 characters or less.

                  '
                type: string
              city:
                description: 'City, 40 characters or less.

                  '
                type: string
              country:
                description: 'Country; must be a valid country name or abbreviation.

                  '
                type: string
              email:
                description: 'Card holder''s email address, 80 characters or less.

                  '
                type: string
              phone:
                description: 'Phone number, 40 characters or less.

                  '
                type: string
              state:
                description: 'State; must be a valid state name or 2-character abbreviation.

                  '
                type: string
              zipCode:
                description: 'Zip code, 20 characters or less.

                  '
                type: string
            required:
            - addressLine1
            - cardHolderName
            - city
            - country
            - state
            - zipCode
            type: object
          cardNumber:
            description: 'Card number, up to 16 characters. Once created, this field
              can''t be updated or queried, and is only available in masked format
              (e.g., XXXX-XXXX-XXXX-1234).

              '
            type: string
          cardType:
            description: 'Possible values are: `Visa`, `MasterCard`, `AmericanExpress`,
              `Discover`.

              '
            type: string
          expirationMonth:
            description: 'Two-digit expiration month (01-12).

              '
            type: string
          expirationYear:
            description: 'Four-digit expiration year.

              '
            type: string
          securityCode:
            description: 'The CVV or CVV2 security code of the card. To ensure PCI
              compliance, this value isn''t stored and can''t be queried.

              '
            type: string
        required:
        - cardHolderInfo
        - cardNumber
        - cardType
        - expirationMonth
        - expirationYear
        type: object
      crmId:
        description: 'CRM account ID for the account, up to 100 characters.

          '
        type: string
      currency:
        description: 'A currency as defined in Billing Settings in the Zuora UI.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      hpmCreditCardPaymentMethodId:
        description: |
          The ID of the HPM credit card payment method associated with this account. You must provide either this field or the `creditCard` structure, but not both.

          **Note:** Non-credit card payment methods are not supported.
        type: string
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken.\n\nThe default value is `true`. \n\n**Note:**\
          \ This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` parameter to the minor version number in the request header."
        type: string
      invoiceCollect:
        description: |
          **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.

          If `true` (default), and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.

          This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.
        type: boolean
      invoiceDeliveryPrefsEmail:
        description: "Whether the customer wants to receive invoices through email.\
          \ \n\nThe default value is `false`.\n"
        type: boolean
      invoiceDeliveryPrefsPrint:
        description: |
          Whether the customer wants to receive printed invoices, such as through postal mail.

          The default value is `false`.
        type: boolean
      invoiceTargetDate:
        description: 'If `invoiceCollect` is `true`, the target date for the invoice
          (that is, the date through which charges should be calculated). In `yyyy-mm-dd`
          format; defaults to the current date.

          '
        format: date
        type: string
      invoiceTemplateId:
        description: 'Invoice template ID, configured in Billing Settings in the Zuora
          UI.

          '
        type: string
      name:
        description: 'Account name, up to 255 characters.

          '
        type: string
      notes:
        description: 'A string of up to 65,535 characters.

          '
        type: string
      paymentGateway:
        description: 'The name of the payment gateway instance. If null or left unassigned,
          the Account will use the Default Gateway.

          '
        type: string
      paymentTerm:
        description: 'Payment terms for this account. Possible values are: `Due Upon
          Receipt`, `Net 30`, `Net 60`, `Net 90`.

          '
        type: string
      soldToContact:
        description: 'Container for optional sold-to contact; uses the same field
          structure as the bill-to contact (above). If a sold-to contact is not specified,
          one is created from the bill-to contact. Once created, these are two separate
          data entities, and future changes to one do not affect the other.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country; must be a valid country name or abbreviation. If
              using Zuora Tax, you must specify a country in the sold-to contact to
              calculate tax. A bill-to contact may be used if no sold-to contact is
              provided.

              '
            type: string
          county:
            description: 'County; 32 characters or less. May optionally be used by
              Zuora Tax to calculate county tax.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State; must be a valid state or province name or 2-character
              abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a
              state (in the US) or province (in Canada) in this field for the sold-to
              contact to calculate tax, and that a bill-to contact may be used if
              no sold-to contact is provided.

              '
            type: string
          taxRegion:
            description: 'If using Zuora Tax, a region string as optionally defined
              in your tax rules. Not required.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        required:
        - firstName
        - lastName
        type: object
      subscription:
        description: 'Container for subscription information, used if creating a subscription
          for the new account at the time of account creation.

          '
        properties:
          CpqBundleJsonId__QT:
            description: ''
            type: string
          OpportunityCloseDate__QT:
            description: ''
            type: string
          OpportunityName__QT:
            description: ''
            type: string
          QuoteBusinessType__QT:
            description: ''
            type: string
          QuoteNumber__QT:
            description: ''
            type: string
          QuoteType__QT:
            description: ''
            type: string
          autoRenew:
            description: 'If `true`, auto-renew is enabled. Default is `false`.

              '
            type: boolean
          contractEffectiveDate:
            description: 'Effective contract date for this subscription, as `yyyy-mm-dd`.

              '
            format: date
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          customerAcceptanceDate:
            description: |
              The date on which the services or products within a subscription have been accepted by the customer, as `yyyy-mm-dd`.

              Default value is dependent on the value of other fields. See Notes section for more details.
            format: date
            type: string
          initialTerm:
            description: "Duration of the initial subscription term in whole months.\
              \  Default is 0. \n"
            format: int64
            type: integer
          invoiceOwnerAccountKey:
            description: "Invoice owner account number or ID.\n\n**Note:** This feature\
              \ is in Limited Availability. If you wish to have access to the feature,\
              \ submit a request at [Zuora Global Support](https://support.zuora.com).\
              \ \n"
            type: string
          invoiceSeparately:
            description: "Separates a single subscription from other subscriptions\
              \ and invoices the charge independently. \n\nIf the value is `true`,\
              \ the subscription is billed separately from other subscriptions. If\
              \ the value is `false`, the subscription is included with other subscriptions\
              \ in the account invoice.\nThe default value is `false`.\n\nPrerequisite:\
              \ The default subscription setting `Enable Subscriptions to be Invoiced\
              \ Separately` must be set to `Yes`.\n"
            type: boolean
          notes:
            description: ''
            type: string
          renewalTerm:
            description: 'Duration of the renewal term in whole months. Default is
              0.

              '
            format: int64
            type: integer
          serviceActivationDate:
            description: |
              The date on which the services or products within a subscription have been activated and access has been provided to the customer, as `yyyy-mm-dd`.

              Default value is dependent on the value of other fields. See Notes section for more details.
            format: date
            type: string
          subscribeToRatePlans:
            description: 'Container for one or more rate plans for this subscription.

              '
            items:
              $ref: '#/definitions/POSTSrpCreateType'
            type: array
          subscriptionNumber:
            description: |
              Subscription Number. The value can be up to 1000 characters.

              If you do not specify a subscription number when creating a subscription for the new account, Zuora will generate a subscription number automatically.

              If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.
            type: string
          termStartDate:
            description: 'The date on which the subscription term begins, as `yyyy-mm-dd`.
              If this is a renewal subscription, this date is different from the subscription
              start date.

              '
            format: date
            type: string
          termType:
            description: 'Possible values are: `TERMED`, `EVERGREEN`.

              '
            type: string
        required:
        - contractEffectiveDate
        - termType
        type: object
      tagging:
        description: ''
        type: string
      taxInfo:
        description: 'Container for tax exempt information, used to establish the
          tax exempt status of a customer account.

          '
        properties:
          VATId:
            description: "EU Value Added Tax ID. \n\n**Note:** This feature is in\
              \ Limited Availability. If you wish to have access to the feature, submit\
              \ a request at [Zuora Global Support](https://support.zuora.com).\n"
            type: string
          companyCode:
            description: "Unique code that identifies a company account in Avalara.\
              \ Use this field to calculate taxes based on origin and sold-to addresses\
              \ in Avalara.\n\n**Note:** This feature is in Limited Availability.\
              \ If you wish to have access to the feature, submit a request at [Zuora\
              \ Global Support](https://support.zuora.com). \n"
            type: string
          exemptCertificateId:
            description: 'ID of the customer tax exemption certificate. Requires Zuora
              Tax.

              '
            type: string
          exemptCertificateType:
            description: 'Type of tax exemption certificate that the customer holds.
              Requires Zuora Tax.

              '
            type: string
          exemptDescription:
            description: 'Description of the tax exemption certificate that the customer
              holds. Requires Zuora Tax.

              '
            type: string
          exemptEffectiveDate:
            description: |
              Date when the customer tax exemption starts. Requires Zuora Tax.

              Format: `yyyy-mm-dd`. Defaults to the current date.
            format: date
            type: string
          exemptExpirationDate:
            description: |
              Date when the customer tax exemption expires. Requires Zuora Tax.

              Format: `yyyy-mm-dd`. Defaults to the current date.
            format: date
            type: string
          exemptIssuingJurisdiction:
            description: 'Jurisdiction in which the customer tax exemption certificate
              was issued.

              '
            type: string
          exemptStatus:
            description: |
              Status of the account tax exemption. Requires Zuora Tax.

              Required if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.

              Values: `Yes`, `No`, `pendingVerification`.
            type: string
        type: object
    required:
    - name
    - currency
    - billToContact
    type: object
  POSTAccountingCodeResponseType:
    properties:
      id:
        description: 'ID of the newly created accounting code.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTAccountingCodeType:
    example:
      name: CASH
      type: Cash
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      glAccountName:
        description: |
          Name of the account in your general ledger.

          Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
        type: string
      glAccountNumber:
        description: |
          Account number in your general ledger.

          Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
        type: string
      name:
        description: |
          Name of the accounting code.

          Accounting code name must be unique. Maximum of 100 characters.
        type: string
      notes:
        description: 'Maximum of 2,000 characters.

          '
        type: string
      type:
        description: "Accounting code type. \n\nValid values are as follows:\n* `Cash`\n\
          * `OtherAssets`\n* `CustomerCashOnAccount`\n* `DeferredRevenue`\n* `SalesTaxPayable`\n\
          * `OtherLiabilities`\n* `SalesRevenue`\n* `SalesDiscounts`\n* `OtherRevenue`\n\
          * `OtherEquity`\n* `BadDebt`\n* `OtherExpenses`\n          \nYou cannot\
          \ create new accounting codes of type `AccountsReceivable`.\n"
        type: string
    required:
    - name
    - type
    type: object
  POSTAccountingPeriodResponseType:
    properties:
      id:
        description: 'ID of the newly-created accounting period.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTAccountingPeriodType:
    example:
      endDate: '2016-06-30'
      fiscalYear: 2016
      name: Jun 2016
      notes: optional notes here
      startDate: '2016-06-01'
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      endDate:
        description: 'The end date of the accounting period in yyyy-mm-dd format,
          for example, "2016-02-19".

          '
        format: date
        type: string
      fiscalYear:
        description: 'Fiscal year of the accounting period in yyyy format, for example,
          "2016".

          '
        type: string
      fiscal_quarter:
        description: ''
        format: int64
        type: integer
      name:
        description: |
          Name of the accounting period.

          Accounting period name must be unique. Maximum of 100 characters.
        type: string
      notes:
        description: |
          Notes about the accounting period.

          Maximum of 255 characters.
        type: string
      startDate:
        description: 'The start date of the accounting period in yyyy-mm-dd format,
          for example, "2016-02-19".

          '
        format: date
        type: string
    required:
    - name
    - startDate
    - endDate
    - fiscalYear
    type: object
  POSTAttachmentResponseType:
    properties:
      fileId:
        description: 'Id to identify the attached file.

          '
        type: string
      id:
        description: 'Attachment id.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTAttachmentType:
    example: |-
      curl
      --form "file=@PODocument.pdf" \
      -X POST https://api.zuora.com/rest/v1/attachments/?description=123&associatedObjectType=Subscription&associatedObjectKey=A-S00005714
    properties:
      file:
        description: |
          The file to be attached. Must be multipart/form-data.
          The maximum file size is 4 MB.
          Files with the following extensions are not supported: .exe, .sh, .dmg, .pkg, .cmd, .bat
        type: string
    required:
    - file
    type: object
  POSTDecryptResponseType:
    properties:
      decryptedSignature:
        description: |
          The string of a list of the following items: Payment Pages 2.0 URL, tenant ID, timestamp,the Payment Page ID

          The items are separated by '#', e.g., "/apps/publichostedpagelite.do#12271#rvBp1AxBJwk6FrT7aqFuABIINiRbwJCc
          #1418848373103#2c92c0f948f899"
        type: string
      publicKey:
        description: 'The public key passed in as a request parameter.

          '
        type: string
      signature:
        description: 'The signature passed in as a request parameter.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTDecryptionType:
    example:
      method: POST
      publicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWRFTwxQOqaG4JDZSQF/NJWvCDoSXm3TYilNzoN8nBbuvhKa7SZBBS+VP6rFqcbIU38Fu+Rf09vqyYOxuasPJe7yhqeOiStWB/aCPLhwXBeKt37L/qkwpNOKb1FETtUgrc+UjbtT0pnl55wCfi+Ik//X5SQi0B+c0ei1DQv99qmPJJErrhnBtdxeaWAT0EYAo42AOQ5cp0UWDY6OdOYL6+RyFOUFIs1yEgtfg4VMMSpSOKBOhYclQYuSC7nBF5Cc18ydtzsBpf7l49gCLTFzG45NCDAocada8KihFNpGXbauV9V4EPRD4lofaXdsXJ5Tw8/+KCsrUlvIQI3vcEv9LQIDAQAB
      signature: BeNYuHFkp/sbfm3clYyCkKEqd7XVTRDOJ1/5rL0tpkqxiSq+maqYkDz5kA+lN64ipoefQuJ7Rdm5TpICErufeJfa2sfTmGARDJ0hr+StXfLsIxHmDoNH5dqcXv3W6MR4kaljEqPVuhzGQ0We98DG52JcHWqqN53oHwTyuZuXocQqnmiE23IPm8UrU3g4hX/OLat0R81wDQ1SslZ+4pnqlncpTpopCK4FxeG3B0gYMhZcYd17Cmf0N3tEHVXHDlJIm4rOx0OVT+YBnjbKYLM0jxYu7PRKRis+yzN1BoappOEB0gmPjznIeiYF0u/fJdZWoEwK7d9mrfJeOBbpFyRoHA==
    properties:
      method:
        description: 'The type of the request. Set it to POST.

          '
        type: string
      publicKey:
        description: 'The public key generated by Zuora.

          '
        type: string
      signature:
        description: 'The signature generated by Zuora.

          '
        type: string
    required:
    - method
    - publicKey
    - signature
    type: object
  POSTDistributionItemType:
    properties:
      accountingPeriodName:
        description: "Name of the accounting period. The open-ended accounting period\
          \ is named `Open-Ended`. \n\nThe accounting period must be open.\n"
        type: string
      newAmount:
        description: |
          Amount of revenue you want to distribute into the accounting period.

          The value must be formatted based on the currency, for example, `JPY 30` or `USD 30.15`. If the value is formatted incorrectly, the following error message is returned: `Allocation amount with wrong decimal places.`
        format: decimal
        type: string
    required:
    - accountingPeriodName
    - newAmount
    title: revenueDistributions
    type: object
  POSTHMACSignatureResponseType:
    properties:
      signature:
        description: |
          Contains a keyed-hash message authentication code (HMAC)
          e.g. `ZmI0ZjE2ZTMxMWY1YjA0ZTc4MTg1ZDhlYWRkMTEwNDE3M2RiMzNiNQ==<`
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      token:
        description: 'cContains a token code. e.g. `gCH6gYqQffQCsFKSLuxyagXsuXcIK0uf`

          '
        type: string
    type: object
  POSTHMACSignatureType:
    example:
      accountKey: A00000001
      method: POST
      uri: https://api.zuora.com/rest/v1/payment-methods/credit-cards
    properties:
      accountKey:
        description: |
          Customer account number or ID.

          Specifies this field only when creating signatures for Create payment method.
        type: string
      method:
        description: 'Possible values are: ''GET'', ''POST'', ''PUT'', ''DELETE'',
          ''OPTIONS''.

          '
        type: string
      name:
        description: |
          Account name.

          Specifies this field only when creating signatures for Create account.
        type: string
      pageId:
        description: |
          The page id of your Payment Pages 2.0 form. Click **Show Page Id** next to the Payment Page name in the Hosted Page List to retrieve the page id.

          Specifies this field only when creating signatures for RSA Signatures.
        type: string
      uri:
        description: |
          The URI of the API object the customer will make a CORS enabled call to.
          e.g. "https://api.zuora.com/rest/v1/payment-methods/credit-cards"
        type: string
    required:
    - uri
    - method
    type: object
  POSTInvoiceCollectInvoicesType:
    properties:
      invoiceAmount:
        description: 'Invoice amount.

          '
        format: decimal
        type: string
      invoiceId:
        description: 'Invoice ID.

          '
        type: string
      invoiceNumber:
        description: 'Invoice number.

          '
        type: string
    title: invoices
    type: object
  POSTInvoiceCollectResponseType:
    properties:
      amountCollected:
        description: 'Payment amount applied.

          '
        format: decimal
        type: string
      invoices:
        description: 'Information on one or more invoices associated with this operation:

          '
        items:
          $ref: '#/definitions/POSTInvoiceCollectInvoicesType'
        type: array
      paymentId:
        description: 'Payment ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTInvoiceCollectType:
    example:
      accountKey: 4028925a4cb74ec9014cb7520fc00005
      invoiceId: 4028925a4cb74ec9014cb7540988002e
      paymentGateway: TestGateway
    properties:
      accountKey:
        description: 'Customer account ID or account number.

          '
        type: string
      invoiceDate:
        description: 'The invoice date that should appear on the invoice being generated,
          in `yyyy-mm-dd` format. If `invoiceId` is not specified and this value is
          omitted, the current date is used by default.

          '
        format: date
        type: string
      invoiceId:
        description: 'The ID of an existing invoice for which to collect payment using
          the account''s default payment method. If this value is specified, no new
          invoice is generated, and both `invoiceDate` and `invoiceTargetDate` are
          ignored.

          '
        type: string
      invoiceTargetDate:
        description: 'The date, in `yyyy-mm-dd` format, through which charges on this
          account will be processed when generating a new invoice.If `invoiceId` is
          not specified and this value is omitted, the current date is used by default.

          '
        format: date
        type: string
      paymentGateway:
        description: 'The name of the gateway that will be used for the payment. Must
          be a valid gateway name and the gateway must support the specific payment
          method. If a value is not specified, the default gateway on the Account
          will be used.

          '
        type: string
    required:
    - accountKey
    type: object
  POSTJournalEntryItemType:
    properties:
      accountingCodeName:
        description: 'Name of the accounting code.

          '
        type: string
      accountingCodeType:
        description: "Accounting code type. The accounting code types are:\n\n* `AccountsReceivable`\n\
          *  `Cash`\n*  `OtherAssets`\n*  `CustomerCashOnAccount `\n* `DeferredRevenue`\n\
          * `SalesTaxPayable`\n* `OtherLiabilities`\n* `SalesRevenue`\n* `SalesDiscounts`\n\
          * `OtherRevenue` \n* `OtherEquity`\n* `BadDebt`  \n* `OtherExpenses`\n\n\
          This field is required if accountingCodeName is not unique.\n"
        type: string
      amount:
        description: 'Journal entry item amount in transaction currency.

          '
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      homeCurrencyAmount:
        description: |
          Journal entry item amount in home currency.

          This field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field.
        format: decimal
        type: string
      type:
        description: 'Type of journal entry item. An enum with the value `Credit`
          or `Debit`.

          '
        type: string
    required:
    - accountingCodeName
    - type
    - amount
    title: journalEntryItems
    type: object
  POSTJournalEntryResponseType:
    properties:
      journalEntryNumber:
        description: 'Journal entry number in the format JE-00000001.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTJournalEntrySegmentType:
    properties:
      segmentName:
        description: 'Name of segment.

          '
        type: string
      segmentValue:
        description: 'Value of segment in this summary journal entry.

          '
        type: string
    required:
    - segmentName
    - segmentValue
    title: segments
    type: object
  POSTJournalEntryType:
    example:
      accountingPeriodName: Nov-2014
      cf_pk1__c: CreditCard
      cf_pk2__c: John Smith
      cf_txt1__c: '1000001'
      cf_txt2__c: '2014-11-01'
      currency: USD
      journalEntryDate: '2014-09-09'
      journalEntryItems:
      - accountingCodeName: Accounts Receivable
        accountingCodeType: Deferred Revenue
        amount: '400.9'
        homeCurrencyAmount: '801.8'
        type: Credit
      - accountingCodeName: Subscription Revenue
        accountingCodeType: Sales Revenue
        amount: '400.9'
        homeCurrencyAmount: '801.8'
        type: Debit
      notes: my account
      segments:
      - segmentName: billToCountry
        segmentValue: United States
      - segmentName: billToState
        segmentValue: California
      transferredToAccounting: 'No'
    properties:
      accountingPeriodName:
        description: "Name of the accounting period. The open-ended accounting period\
          \ is named `Open-Ended`. \n"
        type: string
      currency:
        description: "The type of currency used. \n\nCurrency must be active.\n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      journalEntryDate:
        description: 'Date of the journal entry.

          '
        format: date
        type: string
      journalEntryItems:
        description: 'Key name that represents the list of journal entry items.

          '
        items:
          $ref: '#/definitions/POSTJournalEntryItemType'
        type: array
      notes:
        description: |
          The number associated with the revenue event.

          Character limit: 2,000
        type: string
      segments:
        description: 'List of segments that apply to the summary journal entry.

          '
        items:
          $ref: '#/definitions/POSTJournalEntrySegmentType'
        type: array
      transferredToAccounting:
        description: 'Status shows whether the journal entry has been transferred
          to an accounting system. The possible values are `No`, `Processing`, `Yes`,
          `Error`, `Ignore`.

          '
        type: string
    required:
    - journalEntryDate
    - accountingPeriodName
    - currency
    - journalEntryItems
    type: object
  POSTJournalRunResponseType:
    properties:
      journalRunNumber:
        description: 'Journal run number.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTJournalRunTransactionType:
    properties:
      type:
        description: "Transaction type. \n\nThe transaction types are:\n* Invoice\
          \ Item\n* Taxation Item\n* Invoice Item Adjustment (Invoice)\n* Invoice\
          \ Item Adjustment (Tax)\n* Invoice Adjustment (Invoice Adjustment is deprecated\
          \ on Production. Zuora recommends that you use the Invoice Item Adjustment\
          \ instead.)\n* Electronic Payment\n* External Payment\n* Electronic Refund\n\
          * External Refund\n* Electronic Credit Balance Payment\n* External Credit\
          \ Balance Payment\n* Electronic Credit Balance Refund\n* External Credit\
          \ Balance Refund\n* Credit Balance Adjustment (Applied from Credit Balance)\n\
          * Credit Balance Adjustment (Transferred to Credit Balance)\n* Revenue Event\
          \ Item\n\nTo include all transaction types, pass in \"All\".\n"
        type: string
    required:
    - type
    title: transactionTypes
    type: object
  POSTJournalRunType:
    example:
      accountingPeriodName: Nov-2014
      journalEntryDate: '2014-11-04'
      transactionTypes:
      - type: Invoice Item
      - type: Revenue Event Item
    properties:
      accountingPeriodName:
        description: |
          Name of the accounting period.

          This field determines the target start and end dates of the journal run.

          Required if you don't include 'targetStartDate' and 'targetEndDate'.
        type: string
      journalEntryDate:
        description: 'Date of the journal entry.

          '
        format: date
        type: string
      targetEndDate:
        description: |
          The target end date of the journal run.

          If you include 'accountingPeriodName', the 'targetEndDate' must be empty or the same as the end date of the accounting period specified in 'accountingPeriodName'.
        format: date
        type: string
      targetStartDate:
        description: |
          The target start date of the journal run.

          Required if you include targetEndDate.

          If you include 'accountingPeriodName', the 'targetStartDate' must be empty or the same as the start date of the accounting period specified in 'accountingPeriodName'.
        format: date
        type: string
      transactionTypes:
        description: |
          Transaction types included in the journal run.

          You can include one or more transaction types.
        items:
          $ref: '#/definitions/POSTJournalRunTransactionType'
        type: array
    required:
    - transactionTypes
    - journalEntryDate
    type: object
  POSTMassUpdateResponseType:
    properties:
      bulkKey:
        description: 'String of 32 characters that identifies the mass action. The
          bulkKey is generated before the mass action is processed. You can use the
          bulkKey to Get the Mass Action Result.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTMassUpdateType:
    example: |-
      curl
      -H "apiAccessKeyId:Username"
      -H "apiSecretAccessKey:Password"
      -H "Accept:application/json"
      --form "file=@CreateRevenueSchedules.csv"
      --form "params={actionType:CreateRevenueSchedule}"
      -X POST https://api.zuora.com/rest/v1/bulk
    properties:
      file:
        description: "File containing data about the mass action you want to perform.\
          \ The file requirements are the same as when uploading a file through the\
          \ Mass Updater on the Zuora UI.\n\nThe file must be a .csv file or a zipped\
          \ .csv file. \n\nThe maximum file size is 4 MB.\n\nThe data in the file\
          \ must be formatted according to the mass action type you want to perform.\
          \ Refer to the articles listed in the `actionType` field below for the requirements\
          \ of each mass action type.\n"
        type: string
      params:
        description: 'Container for the following fields. You must format the `params`
          field as a JSON object.

          '
        properties:
          actionType:
            description: |
              Type of mass action you want to perform. The following mass actions are supported:
              - UpdateAccountingCode
              - CreateRevenueSchedule
              - UpdateRevenueSchedule
              - DeleteRevenueSchedule
              - ImportFXRate
            type: string
          checksum:
            description: 'An MD5 checksum that is used to validate the integrity of
              the uploaded file. The checksum is a 32-character string.

              '
            type: string
        required:
        - actionType
        type: object
    required:
    - file
    - params
    type: object
  POSTPaymentMethodResponseType:
    properties:
      paymentMethodId:
        description: 'ID of the newly-created payment method.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTPaymentMethodType:
    example:
      accountKey: A00001115
      cardHolderInfo:
        addressLine1: 77 Fallon Glen
        addressLine2: ''
        cardHolderName: Bill Thiebault
        city: Fremont
        country: USA
        email: bill@testaddress.com
        phone: '4155551234'
        state: California
        zipCode: '94020'
      creditCardNumber: '1111222233334444'
      creditCardType: Discover
      defaultPaymentMethod: false
      expirationMonth: '10'
      expirationYear: '2015'
      securityCode: '123'
    properties:
      accountKey:
        description: 'ID of the customer account to update.

          '
        type: string
      cardHolderInfo:
        description: 'Container for cardholder information. If provided, Zuora will
          only use this information for this card.  If not provided, Zuora will use
          the account''s existing bill-to contact information for this card.

          '
        properties:
          addressLine1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          addressLine2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          cardHolderName:
            description: 'The card holder''s full name as it appears on the card,
              e.g., "John J Smith", 50 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country, must be a valid country name or abbreviation.

              '
            type: string
          email:
            description: 'Card holder''s email address, 80 characters or less.

              '
            type: string
          phone:
            description: 'Phone number, 40 characters or less.

              '
            type: string
          state:
            description: 'State; must be a valid state name or 2-character abbreviation.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        required:
        - cardHolderName
        - city
        - state
        - zipCode
        - country
        type: object
      creditCardNumber:
        description: 'Credit card number, a string of up to 16 characters. This field
          can only be set when creating a new payment method; it cannot be queried
          or updated.

          '
        type: string
      creditCardType:
        description: 'Possible values are: `Visa`, `MasterCard`, `AmericanExpress`,
          `Discover`.

          '
        type: string
      defaultPaymentMethod:
        description: 'Specify true to make this card the default payment method; otherwise,
          omit this parameter to keep the current default payment method.

          '
        type: boolean
      expirationMonth:
        description: 'Two-digit expiration month (01-12).

          '
        type: string
      expirationYear:
        description: 'Four-digit expiration year.

          '
        type: string
      securityCode:
        description: |+
          The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.

        type: string
    required:
    - accountKey
    - creditCardType
    - creditCardNumber
    - expirationMonth
    - expirationYear
    type: object
  POSTQuoteDocResponseType:
    properties:
      file:
        description: 'URL of the generated quote document if the file was successfully
          generated.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTQuoteDocType:
    example:
      apiuser: superadmin@zuora.com
      documentType: pdf
      locale: en_US
      quoteId: a0Bi000000A71rp
      serverUrl: https://c.na10.visual.force.com/services/Soap/u/10.0/00DF00000008VnX
      sessionId: we764buuM03bkE0fmmc5zGMYp
      templateId: 4028925648fdb7830148fdc1246c0003
      useSFDCLocale: '1'
      zquotesMajorVersion: '7'
      zquotesMinorVersion: '0'
    properties:
      apiuser:
        description: 'If not using Salesforce locale, this API Zuora user will be
          used to retrieve the locale from Zuora.

          '
        type: string
      documentType:
        description: 'Type of the document to generate: `PDF` or `DOC`.

          '
        type: string
      locale:
        description: 'Salesforce locale value to use.

          '
        type: string
      password:
        description: ''
        type: string
      quoteId:
        description: "\uFF5C Id of the quote\u3002"
        type: string
      sandbox:
        description: ''
        type: string
      serverUrl:
        description: 'SOAP URL used to login to Salesforce to get data. You can get
          the value with the following code in a Visualforce page: `{!$Api.Partner_Server_URL_100}`

          '
        type: string
      sessionId:
        description: 'Salesforce session id used to log in to Salesforce to get data.
          You can get the value with the following code in a Visualforce page: *{!$Api.Session_ID}*

          '
        type: string
      templateId:
        description: 'Id of the quote template in Zuora.

          '
        type: string
      token:
        description: ''
        type: string
      useSFDCLocale:
        description: 'If using Salesforce org locale, set this to a value that is
          not null.

          '
        type: string
      username:
        description: ''
        type: string
      zquotesMajorVersion:
        description: |
          The major version number of Zuora Quotes you are generating the quote document in.
          You can use a quote template with hierarchy sizes bigger than 3 if this is set to 7 or higher.
        type: string
      zquotesMinorVersion:
        description: 'The minor version number of Zuora Quotes you are generating
          the quote document in.

          '
        type: string
    required:
    - documentType
    - quoteId
    - serverUrl
    - templateId
    - sessionId
    type: object
  POSTRSASignatureResponseType:
    properties:
      key:
        description: 'Public key generated for this Payment Page.

          '
        type: string
      signature:
        description: 'Digital signature generated for this Payment Page.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      tenantId:
        description: 'ID of the Zuora tenant.

          '
        type: string
      token:
        description: 'Token generated for this Payment Page.

          '
        type: string
    type: object
  POSTRSASignatureType:
    example:
      method: POST
      pageId: 2c92c0f855e2b4630155ec9e6a1b6eec
      uri: https://apisandbox.zuora.com/apps/PublicHostedPageLite.do
    properties:
      method:
        description: 'The type of the request. Set it to POST.

          '
        type: string
      pageId:
        description: 'The page id of your Payment Pages 2.0 form. Click **Show Page
          Id** next to the Payment Page name in the Hosted Page List to retrieve the
          page id.

          '
        type: string
      uri:
        description: |
          The URL that the Payment Page will be served from. Set it to:

          * https://www.zuora.com/apps/PublicHostedPageLite.do if you are on the production environment.
          * https://apisandbox.zuora.com/apps/PublicHostedPageLite.do if you are on the API Sandbox environmentdbox.zuora.com/apps/PublicHostedPageLite.do if you are on the API Sandbox environment.
        type: string
    required:
    - method
    - pageId
    - uri
    type: object
  POSTRevenueScheduleByChargeResponseType:
    properties:
      revenueScheduleNumber:
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTRevenueScheduleByChargeType:
    example:
      amount: '300'
      cf_phases__c: Phase 1
      cf_project__c: project A
      deferredRevenueAccountingCode: Deferred Revenue
      deferredRevenueAccountingCodeType: Deferred Revenue
      overrideChargeAccountingCodes: 'true'
      recognizedRevenueAccountingCode: Subscription Revenue
      recognizedRevenueAccountingCodeType: Sales Revenue
      referenceId: rs transaction ref
      revenueDistributions:
      - accountingPeriodName: Jan'2013
        newAmount: '100'
      - accountingPeriodName: Feb'2013
        newAmount: '200'
      revenueEvent:
        cf_phases__c: Phase 1
        cf_project__c: project A
        eventType: Revenue Distributed
        eventTypeSystemId: '1111111'
        notes: Manually distribute revenue by usage
      revenueScheduleDate: '2013-01-01'
    properties:
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned: `Allocation amount with wrong decimal places.`

          '
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      deferredRevenueAccountingCode:
        description: 'The accounting code for deferred revenue, such as Monthly Recurring
          Liability. Required only when `overrideChargeAccountingCodes` is `true`.
          Otherwise this value is ignored.

          '
        type: string
      deferredRevenueAccountingCodeType:
        description: 'The type associated with the deferred revenue accounting code,
          such as Deferred Revenue. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise this value is ignored.

          '
        type: string
      notes:
        description: |
          Additional information about this record.

          Character Limit: 2,000
        type: string
      overrideChargeAccountingCodes:
        description: |
          When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have empty value.

          `True` or `False`. A `false` value will be used if this field is empty in the request body.
        type: boolean
      recognizedRevenueAccountingCode:
        description: 'The accounting code for recognized revenue, such as Monthly
          Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise the value is ignored.

          '
        type: string
      recognizedRevenueAccountingCodeType:
        description: 'The type associated with the recognized revenue accounting code,
          such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes`
          is `true`. Otherwise this value is ignored.

          '
        type: string
      referenceId:
        description: |
          Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.

          Character Limit: 60
        type: string
      revenueDistributions:
        description: |
          An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.

          The sum of the newAmount fields must be equal to the amount field.
        items:
          $ref: '#/definitions/POSTDistributionItemType'
        type: array
      revenueEvent:
        description: 'Represents a change to a revenue schedule, such as posting an
          invoice or distributing revenue.

          '
        properties:
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          eventType:
            description: |
              Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
              * Invoice Posted
              * Invoice Item Adjustment Created
              * Invoice Canceled
              * Invoice Item Adjustment Canceled
              * Revenue Distributed
            type: string
          eventTypeSystemId:
            description: 'System ID of the revenue event type. Each eventType has
              a unique system ID. You can configure your revenue event type system
              IDs by navigating to **Settings > Finance > Configure Revenue Event
              Types** in the Zuora UI.

              '
            type: string
          notes:
            description: 'Additional information about this record.

              '
            type: string
        required:
        - eventTypeSystemId
        - eventType
        type: object
      revenueScheduleDate:
        description: |
          The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.

          The date cannot be in a closed accounting period. The date must be in the `YYYY-MM-DD` format.
        format: date
        type: string
    required:
    - amount
    - revenueScheduleDate
    type: object
  POSTRevenueScheduleByDateRangeType:
    example:
      customField__c: null
      distributionType: Daily distribution
      notes: Manually distribute revenue by usage
      recognitionEnd: '2016-12-31'
      recognitionStart: 2016-12-1
      revenueEvent:
        customField__c: null
        eventType: Revenue Distributed
        eventTypeSystemId: RevenueDistributed__z
        notes: ''
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      distributionType:
        description: "How you want to distribute the revenue. The distribution types\
          \ are: \n* Daily Distribution: Distributes revenue evenly across each day\
          \ between the recognitionStart and recognitionEnd dates.\n* Monthly Distribution\
          \ (Back Load): Back loads the revenue so you distribute the monthly amount\
          \ in the partial month at the end only.\n* Monthly Distribution (Front Load):\
          \ Front loads the revenue so you distribute the monthly amount in the partial\
          \ month at the beginning only.\n* Monthly Distribution (Proration by Days):\
          \ Splits the revenue amount between the two partial months.\n\n**Note:**\
          \ To use any of the Monthly Distribution options, you must have the \"Monthly\
          \ recognition over time\" model enabled in **Settings > Finance > Manage\
          \ Revenue Recognition Models**. \n"
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      recognitionEnd:
        description: "The end date of a recognition period in `YYYY-MM-DD` format.\
          \ \n\nThe maximum difference of the `recognitionStart` and `recognitionEnd`\
          \ date fields is equal to 250 multiplied by the length of an accounting\
          \ period.\n"
        format: date
        type: string
      recognitionStart:
        description: |
          The start date of a recognition period in `YYYY-MM-DD` format.

          If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
        format: date
        type: string
      revenueEvent:
        description: 'Must specify at least one of `eventType` or `eventTypeSystemId`.

          '
        properties:
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          eventType:
            description: |
              Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
              * Invoice Posted
              * Invoice Item Adjustment Created
              * Invoice Canceled
              * Invoice Item Adjustment Canceled
              * Revenue Distributed
            type: string
          eventTypeSystemId:
            description: |
              System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.

              Required only if there is more than one revenue event type with the same label.
            type: string
          notes:
            description: ''
            type: string
        type: object
    required:
    - recognitionEnd
    - recognitionStart
    - revenueEvent
    type: object
  POSTRevenueScheduleByTransactionResponseType:
    properties:
      revenueScheduleNumber:
        description: 'Revenue schedule number. The revenue schedule number is always
          prefixed with "RS", for example, "RS-00000001".

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  POSTRevenueScheduleByTransactionType:
    example:
      revenueDistributions:
      - accountingPeriodName: Jan '16
        newAmount: '20'
      - accountingPeriodName: Open-Ended
        newAmount: '30'
      revenueEvent:
        eventType: Revenue Distributed
        eventTypeSystemId: RevenueDistributed__z
        notes: My notes
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      notes:
        description: |
          Additional information about this record.

          Character Limit: 2,000
        type: string
      revenueDistributions:
        description: |
          An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.

          The sum of newAmounts must equal the the Charge Amount of the specified Invoice Item.
        items:
          $ref: '#/definitions/POSTDistributionItemType'
        type: array
      revenueEvent:
        description: |
          Represents a change to a revenue schedule, such as posting an invoice or distributing revenue.

          You must specify the `eventType` or the `eventTypeSystemID`, or both. If you have configured more than one revenue event type with the same label, you must specify the `eventTypeSystemId`.
        properties:
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          eventType:
            description: |
              Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
              * Invoice Posted
              * Invoice Item Adjustment Created
              * Invoice Canceled
              * Invoice Item Adjustment Canceled
              * Revenue Distributed
            type: string
          eventTypeSystemId:
            description: |
              System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.

              Required only if there is more than one revenue event type with the same label.
            type: string
          notes:
            description: 'Additional information about this record.

              '
            type: string
        type: object
    type: object
  POSTScCreateType:
    properties:
      applyDiscountTo:
        description: |
          Specifies the type of charges that you want a specific discount to apply to.

          Values:

          * `ONETIME`
          * `RECURRING`
          * `USAGE`
          * `ONETIMERECURRING`
          * `ONETIMEUSAGE`
          * `RECURRINGUSAGE`
          * `ONETIMERECURRINGUSAGE`
        type: string
      billCycleDay:
        description: |
          Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed.

          Values: `1`-`31`
        type: string
      billCycleType:
        description: |
          Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayOfMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayOfWeek`, set the `weeklyBillCycleDay` field.

          Values:

          * `DefaultFromCustomer`
          * `SpecificDayOfMonth`
          * `SubscriptionStartDay`
          * `ChargeTriggerDay`
          * `SpecificDayOfWeek`
        type: string
      billingPeriod:
        description: |
          Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).

          Values:

          * `Month`
          * `Quarter`
          * `Semi_Annual`
          * `Annual`
          * `Eighteen_Months`
          * `Two_Years`
          * `Three_Years`
          * `Five_Years`
          * `Specific_Months`
          * `Subscription_Term`
          * `Week`
          * `Specific_Weeks`
        type: string
      billingPeriodAlignment:
        description: |
          Aligns charges within the same subscription if multiple charges begin on different dates.

          Values:

          * `AlignToCharge`
          * `AlignToSubscriptionStart`
          * `AlignToTermStart`
        type: string
      billingTiming:
        description: |
          Billing timing for the charge for recurring charge types. Not avaliable for one time, usage, and discount charges.

          Values:

          * `IN_ADVANCE` (default)
          * `IN_ARREARS`
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Description of the charge.

          '
        type: string
      discountAmount:
        description: 'Specifies the amount of fixed-amount discount.

          '
        format: decimal
        type: string
      discountLevel:
        description: |
          Specifies if the discount applies to the product rate plan only, the entire subscription, or to any activity in the account.

          Values:

          * `rateplan`
          * `subscription`
          * `account`
        type: string
      discountPercentage:
        description: "Percentage of discount for a percentage discount. \n"
        format: decimal
        type: string
      endDateCondition:
        description: |
          Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.

          Values:

          * `Subscription_End`
          * `Fixed_Period`
          * `Specific_End_Date`
        type: string
      includedUnits:
        description: 'Specifies the number of units in the base set of units for this
          charge. Must be >=`0`.

          '
        format: decimal
        type: string
      listPriceBase:
        description: |
          The list price base for the product rate plan charge.

          Values:

          * `Per_Billing_Period`
          * `Per_Month`
          * `Per_Week`
        type: string
      number:
        description: 'Unique number that identifies the charge. Max 50 characters.
          System-generated if not provided.

          '
        type: string
      numberOfPeriods:
        description: 'Specifies the number of periods to use when calculating charges
          in an overage smoothing charge model.

          '
        format: int64
        type: integer
      overagePrice:
        description: 'Price for units over the allowed amount.

          '
        format: decimal
        type: string
      overageUnusedUnitsCreditOption:
        description: |
          Determines whether to credit the customer with unused units of usage.

          Values:

          * `NoCredit`
          * `CreditBySpecificRate`
        type: string
      price:
        description: 'Price for units in the subscription rate plan.

          '
        format: decimal
        type: string
      priceChangeOption:
        description: |
          Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.
          Values:

          * `NoChange` (default)
          * `SpecificPercentageValue`
          * `UseLatestProductCatalogPricing`
        type: string
      priceIncreasePercentage:
        description: "Specifies the percentage to increase or decrease the price of\
          \ a termed subscription's renewal. Required if you set the `PriceChangeOption`\
          \ field to `SpecificPercentageValue`. \n\nValue must be a decimal between\
          \ `-100` and `100`.\n"
        format: decimal
        type: string
      productRatePlanChargeId:
        description: 'ID of a product rate-plan charge for this subscription.

          '
        type: string
      quantity:
        description: 'Number of units. Must be a decimal >=`0`.

          '
        format: decimal
        type: string
      ratingGroup:
        description: "Specifies a rating group based on which usage records are rated.\
          \ **Note:** This feature is in **Limited Availability**. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
          \nValues:\n\n* `ByBillingPeriod` (default): The rating is based on all the\
          \ usages in a billing period.       \n* `ByUsageStartDate`: The rating is\
          \ based on all the usages on the same usage start date. \n* `ByUsageRecord`:\
          \ The rating is based on each usage record.\n* `ByUsageUpload`: The rating\
          \ is based on all the usages in a uploaded usage file (.xls or .csv).\n\n\
          **Note:**\n\nThe `ByBillingPeriod` value can be applied for all charge models.\n\
          The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can\
          \ only be applied for per unit, volume pricing, and tiered pricing charge\
          \ models.\nUse this field only for Usage charges. One-Time Charges and Recurring\
          \ Charges return `NULL`.\n"
        type: string
      specificBillingPeriod:
        description: 'Specifies the number of month or week for the charges billing
          period. Required if you set the value of the `billingPeriod` field to `Specific_Months`
          or `Specific_Weeks`.

          '
        format: int64
        type: integer
      specificEndDate:
        description: |
          Defines when the charge ends after the charge trigger date.

          **note:**

          * This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.

          * If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
        format: date
        type: string
      tiers:
        description: |
          Container for Volume, Tiered, or Tiered with Overage charge models. Supports the following charge types:

          * One-time
          * Recurring
          * Usage-based
        items:
          $ref: '#/definitions/POSTTierType'
        type: array
      triggerDate:
        description: 'Specifies when to start billing the customer for the charge.
          Required if the `triggerEvent` field is set to `USD`.

          '
        format: date
        type: string
      triggerEvent:
        description: |
          Specifies when to start billing the customer for the charge.

          Values:

          * `UCE`
          * `USA`
          * `UCA`
          * `USD`
        type: string
      unusedUnitsCreditRates:
        description: 'Specifies the rate to credit a customer for unused units of
          usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption`
          field is set to `CreditBySpecificRate`.

          '
        format: decimal
        type: string
      upToPeriods:
        description: "Specifies the length of the period during which the charge is\
          \ active. If this period ends before the subscription ends, the charge ends\
          \ when this period ends.\n\n**Note:** You must use this field together with\
          \ the `upToPeriodsType` field to specify the time period.\n\n* This field\
          \ is applicable only when the `endDateCondition` field is set to `Fixed_Period`.\
          \ \n* If the subscription end date is subsequently changed through a Renewal,\
          \ or Terms and Conditions amendment, the charge end date will change accordingly\
          \ up to the original period end.\n"
        format: int64
        type: integer
      upToPeriodsType:
        description: "\nThe period type used to define when the charge ends. \n\n\
          Values:\n\n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\
          \nYou must use this field together with the `upToPeriods` field to specify\
          \ the time period.\n\nThis field is applicable only when the `endDateCondition`\
          \ field is set to `Fixed_Period`. \n"
        type: string
      weeklyBillCycleDay:
        description: "Specifies which day of the week is the bill cycle day (BCD)\
          \ for the charge. \n\nValues:\n\n* `Sunday`\n* `Monday`\n* `Tuesday`\n*\
          \ `Wednesday`\n* `Thursday`\n* `Friday`\n* `Saturday`\n"
        type: string
    required:
    - productRatePlanChargeId
    - quantity
    title: chargeOverrides
    type: object
  POSTSrpCreateType:
    properties:
      chargeOverrides:
        description: 'This optional container is used to override the quantity of
          one or more product rate plan charges for this subscription.

          '
        items:
          $ref: '#/definitions/POSTScCreateType'
        type: array
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      productRatePlanId:
        description: 'ID of a product rate plan for this subscription.

          '
        type: string
    required:
    - productRatePlanId
    title: subscribeToRatePlans
    type: object
  POSTSubscriptionCancellationResponseType:
    properties:
      cancelledDate:
        description: 'The date that the subscription was canceled.

          '
        format: date
        type: string
      invoiceId:
        description: 'ID of the invoice, if one is generated.

          '
        type: string
      paidAmount:
        description: 'Amount paid.

          '
        format: decimal
        type: string
      paymentId:
        description: 'ID of the payment, if a payment is collected.

          '
        type: string
      subscriptionId:
        description: 'The subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      totalDeltaMrr:
        description: 'Change in the subscription monthly recurring revenue as a result
          of the update.

          '
        format: decimal
        type: string
      totalDeltaTcv:
        description: 'Change in the total contracted value of the subscription as
          a result of the update.

          '
        format: decimal
        type: string
    type: object
  POSTSubscriptionCancellationType:
    example:
      cancellationEffectiveDate: '2019-05-31'
      cancellationPolicy: SpecificDate
      collect: false
      invoice: true
    properties:
      OpportunityCloseDate_QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName_QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType_QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal, or Churn.\
          \ This field is populated when the subscription originates from Zuora Quotes.\n\
          \nThis field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteNumber_QT:
        description: "The unique identifier of the Quote. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteType_QT:
        description: |+
          The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is populated when the subscription originates from Zuora Quotes.

        type: string
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\nPrerequisite: invoice must be true. \n\n**Note:**\
          \ If you are using the field `invoiceCollect` rather than the field `invoice`,\
          \ the `invoiceCollect` value must be `true`.\n\nTo view the credit balance\
          \ adjustment, retrieve the details of the invoice using the Get Invoices\
          \ method.\n"
        type: boolean
      cancellationEffectiveDate:
        description: 'Date the cancellation takes effect, in the format yyyy-mm-dd.  Use
          only if `cancellationPolicy` is `SpecificDate`. Should not be earlier than
          the subscription contract-effective date, later than the subscription term-end
          date, or within a period for which the customer has been invoiced.

          '
        format: date
        type: string
      cancellationPolicy:
        description: 'Cancellation method. Possible values are: `EndOfCurrentTerm`,
          `EndOfLastInvoicePeriod`, `SpecificDate`. If using `SpecificDate`, the `cancellationEffectiveDate`
          field is required.

          '
        type: string
      collect:
        description: "Collects an automatic payment for a subscription. The collection\
          \ generated in this operation is only for this subscription, not for the\
          \ entire customer account.\n\nIf the value is `true`, the automatic payment\
          \ is collected. If the value is `false`, no action is taken.\n\nThe default\
          \ value is `false`.\n\nThis field is in Zuora REST API version control.\
          \ Supported minor versions are 196.0 or later. To use this field in the\
          \ method, you must set the `zuora-version` parameter to the minor version\
          \ number in the request header. \n\nPrerequisite: `invoice` must be `true`.\
          \ \n"
        type: boolean
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken.\n\nThe default value is `false`. \n\n\
          This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` parameter to the minor version number in the request header.\
          \ \n"
        type: boolean
      invoiceCollect:
        description: |
          This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.

          If `true`, an invoice is generated and payment automatically collected. Default is `false`.

          This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.
        type: boolean
      invoiceTargetDate:
        description: 'If an invoice is to be generated, the date through which to
          calculate the charges, as yyyy-mm-dd

          '
        format: date
        type: string
    required:
    - cancellationPolicy
    - invoiceCollect
    type: object
  POSTSubscriptionPreviewInvoiceItemsType:
    properties:
      chargeAmount:
        description: 'The amount of the charge. This amount doesn''t include taxes
          unless the charge''s tax mode is inclusive.

          '
        format: decimal
        type: string
      chargeDescription:
        description: 'Description of the charge.

          '
        type: string
      chargeName:
        description: 'Name of the charge.

          '
        type: string
      productName:
        description: 'Name of the product associated with this item.

          '
        type: string
      productRatePlanChargeId:
        description: 'ID of the product rate plan charge.

          '
        type: string
      quantity:
        description: 'Quantity of this item.

          '
        format: decimal
        type: string
      serviceEndDate:
        description: 'End date of the service period for this item, i.e., the last
          day of the period, as yyyy-mm-dd.

          '
        format: date
        type: string
      serviceStartDate:
        description: 'Service start date as yyyy-mm-dd. If the charge is a one-time
          fee, this is the date of that charge.

          '
        format: date
        type: string
      unitOfMeasure:
        description: ''
        type: string
    title: invoiceItems
    type: object
  POSTSubscriptionPreviewResponseType:
    properties:
      amount:
        description: 'Invoice amount.

          '
        format: decimal
        type: string
      amountWithoutTax:
        description: 'Invoice amount minus tax.

          '
        format: decimal
        type: string
      chargeMetrics:
        description: 'Container for charge metrics.

          '
        properties:
          dmrr:
            description: 'Change in monthly recurring revenue.

              '
            type: string
          dtcv:
            description: 'Change in total contract value.

              '
            type: string
          mrr:
            description: 'Monthly recurring revenue.

              '
            type: string
          number:
            description: 'The charge number of the subscription. Only available for
              update subscription.

              '
            type: string
          originRatePlanId:
            description: 'The origin rate plan ID. Only available for update subscription.

              '
            type: string
          originalId:
            description: 'The original rate plan charge ID. Only available for update
              subscription.

              '
            type: string
          productRatePlanChargeId:
            description: 'The product rate plan charge ID.

              '
            type: string
          productRatePlanId:
            description: 'The product rate plan ID.

              '
            type: string
          tcv:
            description: 'Total contract value.

              '
            type: string
        type: object
      contractedMrr:
        description: 'Monthly recurring revenue of the subscription.

          '
        format: decimal
        type: string
      invoice:
        description: "Container for invoices.\n\n\n **Note:** This field is only available\
          \ if you set the Zuora REST API minor version to 207.0 or later in the request\
          \ header. Also, the response structure is changed and the following invoice\
          \ related response fields are moved to this **invoice** container:\n  \n\
          \   * amount\n   * amountWithoutTax\n   * taxAmount\n   * invoiceItems\n\
          \   * targetDate\n   * chargeMetrics\n   \n"
        type: object
      invoiceItems:
        description: 'Container for invoice items.

          '
        items:
          $ref: '#/definitions/POSTSubscriptionPreviewInvoiceItemsType'
        type: array
      invoiceTargetDate:
        description: |
          Date through which charges are calculated on the invoice, as yyyy-mm-dd.

          **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      previewChargeMetricsResponse:
        description: ''
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      targetDate:
        description: |
          Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.

          **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      taxAmount:
        description: 'Tax amount on the invoice.

          '
        format: decimal
        type: string
      totalContractedValue:
        description: 'Total contracted value of the subscription.

          '
        format: decimal
        type: string
    type: object
  POSTSubscriptionPreviewType:
    example:
      contractEffectiveDate: 2013-1-15
      initialTerm: 12
      initialTermPeriodType: Week
      invoiceTargetDate: '2013-12-31'
      previewAccountInfo:
        billCycleDay: 31
        billToContact:
          city: Walnut Creek
          country: United States
          county: Contra Consta
          state: California
          zipCode: '94549'
        currency: USD
      subscribeToRatePlans:
      - chargeOverrides:
        - productRatePlanChargeId: ff8080811ca15d19011cddad8c953b53
          quantity: 100
        productRatePlanId: ff8080811ca15d19011cdda9b0ad3b51
      termType: TERMED
    properties:
      OpportunityCloseDate_QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName_QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType_QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal, or Churn.\
          \ This field is populated when the subscription originates from Zuora Quotes.\n\
          \nThis field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteNumber_QT:
        description: "The unique identifier of the Quote. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteType_QT:
        description: "The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is populated when\
          \ the subscription originates from Zuora Quotes.\n\nThis field is used only\
          \ for reporting subscription metrics. \n\n"
        type: string
      accountKey:
        description: "\nCustomer account number or ID.\n\nYou must specify the account\
          \ information either in this field or in the `previewAccountInfo` field\
          \ with the following conditions:\n         \n* If you already have a customer\
          \ account, specify the account number or ID in this field.\n* If you do\
          \ not have a customer account, provide account information in the `previewAccountInfo`\
          \ field.\n"
        type: string
      contractEffectiveDate:
        description: 'Effective contract date for this subscription, as yyyy-mm-dd.

          '
        format: date
        type: string
      customerAcceptanceDate:
        description: |
          The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.

          Default value is dependent on the value of other fields. See **Notes** section for more details.
        format: date
        type: string
      includeExistingDraftDocItems:
        description: |
          Specifies whether to include draft invoice items in subscription previews.
          Values are:

          * `true` (default). Includes draft invoice items in the preview result.
          * `false`. Excludes draft invoice items in the preview result.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        type: boolean
      includeExistingDraftInvoiceItems:
        description: |
          Specifies whether to include draft invoice items in previews.
          Values are:

          * `true` (default). Includes draft invoice items in the preview result.
          * `false`. Excludes draft invoice items in the preview result.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        type: boolean
      initialTerm:
        description: 'Duration of the first term of the subscription, in whole months.
          Default is `0`. If `termType` is `TERMED`, then this field is required,
          and the value must be greater than `0`. If `termType` is `EVERGREEN`, this
          field is ignored.

          '
        format: int64
        type: integer
      initialTermPeriodType:
        description: "The period type of the initial term. \n\nSupported values are:\n\
          \n* `Month`\n* `Year`\n* `Day`\n* `Week`\n"
        type: string
      invoiceOwnerAccountKey:
        description: |
          Invoice owner account number or ID.

          **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        type: string
      invoiceTargetDate:
        description: |
          Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      notes:
        description: String of up to 500 characters.
        type: string
      previewAccountInfo:
        description: |
          A container for providing a customer account information if you do not have an existing customer account. This customer account information is only used for subscription preview.

          You must specify the account information either in this field or in the `accountKey` field with the following conditions:

          * If you already have a customer account, specify the account number or ID in the accountKey field.
          * If you do not have a customer account, provide account information in this field.
        properties:
          billCycleDay:
            description: 'The account''s bill cycle day (BCD), when bill runs generate
              invoices for the account. Specify any day of the month (`1`-`31`, where
              `31` = end-of-month), or `0` for auto-set.

              '
            format: int64
            type: integer
          billToContact:
            description: 'Container for bill-to contact information of this account.

              '
            properties:
              city:
                description: 'The city of the bill-to address. The value should be
                  40 characters or less.

                  '
                type: string
              country:
                description: 'The country of the bill-to address. The value must be
                  a valid country name or abbreviation.

                  '
                type: string
              county:
                description: 'The county of the bill-to address. The value should
                  be 32 characters or less.

                  '
                type: string
              state:
                description: 'The state of the bill-to address. The value must be
                  a valid state or province name or 2-character abbreviation.

                  '
                type: string
              taxRegion:
                description: 'If using Zuora Tax, a region string as optionally defined
                  in your tax rules.

                  '
                type: string
              zipCode:
                description: 'The zip code of the bill-to address. The value should
                  be 20 characters or less.

                  '
                type: string
            type: object
          currency:
            description: 'A currency as defined in Billing Settings.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
        required:
        - billCycleDay
        - billToContact
        - currency
        type: object
      previewType:
        description: "The type of preview you will receive. \n\nThis field is in Zuora\
          \ REST API version control. The supported values of this field depend on\
          \ the REST API minor version you specified in the request header.\n\n\n\
          * If you do not specify the REST API minor version or specify the minor\
          \ version number to one of following values in the request header:\n \n\
          \  * 186.0\n  * 187.0\n  * 188.0\n  * 189.0\n  * 196.0 \n  \n  The following\
          \ values are supported in the **previewType** field:\n\n  * InvoiceItem\n\
          \  * ChargeMetrics\n  * InvoiceItemChargeMetrics\n  \n  The default value\
          \ is InvoiceItem.\n\n* If you specify the REST API minor version to 207.0\
          \ or later in the request header, the following values are supported in\
          \ the **previewType** field:\n\n  - LegalDoc\n  - ChargeMetrics\n  - LegalDocChargeMetrics\n\
          \n  The default value is LegalDoc.\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions)\
          \ for more information.\n"
        type: string
      serviceActivationDate:
        description: |
          The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.

          Default value is dependent on the value of other fields. See **Notes** section for more details.
        format: date
        type: string
      subscribeToRatePlans:
        description: 'Container for one or more rate plans for this subscription.

          '
        items:
          $ref: '#/definitions/POSTSrpCreateType'
        type: array
      targetDate:
        description: |
          Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      termStartDate:
        description: 'The date on which the subscription term begins, as yyyy-mm-dd.
          If this is a renewal subscription, this date is different from the subscription
          start date.

          '
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
    required:
    - termType
    - contractEffectiveDate
    - subscribeToRatePlans
    type: object
  POSTSubscriptionResponseType:
    properties:
      contractedMrr:
        description: 'Monthly recurring revenue of the subscription.

          '
        format: decimal
        type: string
      invoiceId:
        description: 'Invoice ID, if an invoice is generated during the subscription
          process.

          '
        type: string
      paidAmount:
        description: 'Payment amount, if a payment is collected.

          '
        format: decimal
        type: string
      paymentId:
        description: 'Payment ID, if a payment is collected.

          '
        type: string
      subscriptionId:
        description: ''
        type: string
      subscriptionNumber:
        description: ''
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      totalContractedValue:
        description: 'Total contracted value of the subscription.

          '
        format: decimal
        type: string
    type: object
  POSTSubscriptionType:
    example:
      accountKey: A00001115
      autoRenew: true
      collect: false
      contractEffectiveDate: 2015-02-1
      initialTerm: '12'
      initialTermPeriodType: Week
      invoice: true
      invoiceTargetDate: '2015-12-31'
      myCustomField__c: test
      notes: Test POST subscription from z-ruby-sdk
      renewalTerm: '3'
      renewalTermPeriodType: Week
      subscribeToRatePlans:
      - chargeOverrides:
        - billCycleDay: '5'
          billCycleType: SpecificDayofMonth
          billingPeriodAlignment: AlignToCharge
          billingTiming: IN_ARREARS
          description: This is rate plan charge description
          myCustomField__c: test
          number: TestCharge
          price: 12.01
          productRatePlanChargeId: ff8080811ca15d19011cddad8c953b53
          triggerDate: '2015-09-01'
          triggerEvent: SpecificDate
        productRatePlanId: ff8080811ca15d19011cdda9b0ad3b51
      termType: TERMED
    properties:
      CpqBundleJsonId__QT:
        description: ''
        type: string
      OpportunityCloseDate__QT:
        description: ''
        type: string
      OpportunityName__QT:
        description: ''
        type: string
      QuoteBusinessType__QT:
        description: ''
        type: string
      QuoteNumber__QT:
        description: ''
        type: string
      QuoteType__QT:
        description: ''
        type: string
      accountKey:
        description: 'Customer account number or ID

          '
        type: string
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\n**Prerequisite:** `invoice` must be `true`. \n\n\
          **Note:** If you are using the field `invoiceCollect` rather than the field\
          \ invoice, the `invoiceCollect` value must be `true`.\n\nTo view the credit\
          \ balance adjustment, retrieve the details of the invoice using the Get\
          \ Invoices.\n"
        type: boolean
      autoRenew:
        description: 'If `true`, this subscription automatically renews at the end
          of the subscription term. Default is `false`.

          '
        type: boolean
      collect:
        description: "Collects an automatic payment for a subscription. The collection\
          \ generated in this operation is only for this subscription, not for the\
          \ entire customer account.\nIf the value is `true`, the automatic payment\
          \ is collected. If the value is `false`, no action is taken.\n\nThe default\
          \ value is `true`.\n\n**Prerequisite:** The invoice field must be `true`.\
          \ \n\n**Note:** This field is in Zuora REST API version control. Supported\
          \ minor versions are 196.0 or later. To use this field in the method, you\
          \ must set the `zuora-version` field to the minor version number in the\
          \ request header.\n"
        type: boolean
      contractEffectiveDate:
        description: 'Effective contract date for this subscription, as yyyy-mm-dd

          '
        format: date
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      customerAcceptanceDate:
        description: |
          The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.

          Default value is dependent on the value of other fields. See **Notes** section for more details.
        format: date
        type: string
      initialTerm:
        description: 'The length of the period for the first subscription term. Default
          is `0`. If `termType` is `TERMED`, then this field is required, and the
          value must be greater than `0`. If `termType` is `EVERGREEN`, this field
          is ignored.

          '
        format: int64
        type: integer
      initialTermPeriodType:
        description: |
          The period type for the first subscription term.

          This field is used with the `InitialTerm` field to specify the initial subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken. The default value is `true`. \n\nThis\
          \ field is in Zuora REST API version control. Supported minor versions are\
          \ `196.0` or later. To use this field in the method, you must set the zuora-version\
          \ parameter to the minor version number in the request header. \n"
        type: boolean
      invoiceCollect:
        description: |
          **Note:** This field has been replaced by the invoice field and the collect field. invoiceCollect is available only for backward compatibility.

          If `true` (default), an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.

          This field is in Zuora REST API version control. Supported minor versions are `186.0`, `187.0`, `188.0`, `189.0`, and `196.0`.
        type: boolean
      invoiceOwnerAccountKey:
        description: |
          Invoice owner account number or ID.

          **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
        type: string
      invoiceSeparately:
        description: "Separates a single subscription from other subscriptions and\
          \ invoices the charge independently. \n\nIf the value is `true`, the subscription\
          \ is billed separately from other subscriptions. If the value is `false`,\
          \ the subscription is included with other subscriptions in the account invoice.\n\
          \nThe default value is `false`.\n\nPrerequisite: The default subscription\
          \ setting Enable Subscriptions to be Invoiced Separately must be set to\
          \ Yes.\n"
        type: boolean
      invoiceTargetDate:
        description: 'Date through which to calculate charges if an invoice is generated,
          as yyyy-mm-dd. Default is current date.

          '
        format: date
        type: string
      notes:
        description: 'String of up to 500 characters.

          '
        type: string
      renewalSetting:
        description: |
          Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.

          Values:

          * `RENEW_WITH_SPECIFIC_TERM` (default)
          * `RENEW_TO_EVERGREEN`
        type: string
      renewalTerm:
        description: 'The length of the period for the subscription renewal term.
          Default is `0`.

          '
        format: int64
        type: integer
      renewalTermPeriodType:
        description: |
          The period type for the subscription renewal term.

          This field is used with the `renewalTerm` field to specify the subscription renewal term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      serviceActivationDate:
        description: |
          The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.

          Default value is dependent on the value of other fields. See **Notes** section for more details.
        format: date
        type: string
      subscribeToRatePlans:
        description: 'Container for one or more rate plans for this subscription.

          '
        items:
          $ref: '#/definitions/POSTSrpCreateType'
        type: array
      subscriptionNumber:
        description: |
          Subscription Number. The value can be up to 1000 characters.

          If you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.

          If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.
        type: string
      termStartDate:
        description: 'The date on which the subscription term begins, as yyyy-mm-dd.
          If this is a renewal subscription, this date is different from the subscription
          start date.

          '
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
    required:
    - accountKey
    - contractEffectiveDate
    - subscribeToRatePlans
    - termType
    type: object
  POSTTierType:
    properties:
      endingUnit:
        description: 'End number of a range of units for the tier.

          '
        format: decimal
        type: string
      price:
        description: 'Price of the tier if the charge is a flat fee, or the price
          of each unit in the tier if the charge model is tiered pricing.

          '
        format: decimal
        type: string
      priceFormat:
        description: |
          Indicates if pricing is a flat fee or is per unit.

          Values:

          * `FlatFee`
          * `PerUnit`
        type: string
      startingUnit:
        description: 'Starting number of a range of units for the tier.

          '
        format: decimal
        type: string
      tier:
        description: 'Unique number that identifies the tier that the price applies
          to.

          '
        format: int64
        type: integer
    required:
    - tier
    - price
    title: tiers
    type: object
  POSTUsageResponseType:
    properties:
      checkImportStatus:
        description: 'URL for checking the status of the import operation.  Possible
          status values at this URL are:`Pending`, `Processing`, `Completed`, `Canceled`,
          `Failed`.  Only a status of Completed indicates that the file contents were
          imported successfully.

          '
        type: string
      size:
        description: 'The size of the uploaded file in bytes.

          '
        format: int64
        type: integer
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  PUTAccountType:
    example:
      additionalEmailAddresses:
      - test3@test.com
      - test4@test.com
      paymentGateway: TestGateway
    properties:
      additionalEmailAddresses:
        description: |
          A list of additional email addresses to receive emailed invoices. Use a comma to separate each email address.

          **Note:** Invoices are emailed to the email addresses specified in this field only when the `invoiceDeliveryPrefsEmail` field is `true`.
        items:
          type: string
        type: array
      autoPay:
        description: 'Specifies whether future payments are to be automatically billed
          when they are due. Possible values are: `true`, `false`.

          '
        type: boolean
      batch:
        description: 'The alias name given to a batch. A string of 50 characters or
          less.

          '
        type: string
      billToContact:
        description: 'Container for bill-to contact information for this account.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country; must be a valid country name or abbreviation. If
              using Zuora Tax, you must specify a country in the sold-to contact to
              calculate tax. A bill-to contact may be used if no sold-to contact is
              provided.

              '
            type: string
          county:
            description: 'County; 32 characters or less. May optionally be used by
              Zuora Tax to calculate county tax.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State; must be a valid state or province name or 2-character
              abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a
              state (in the US) or province (in Canada) in this field for the sold-to
              contact to calculate tax, and that a bill-to contact may be used if
              no sold-to contact is provided.

              '
            type: string
          taxRegion:
            description: 'If using Zuora Tax, a region string as optionally defined
              in your tax rules. Not required.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        required:
        - firstName
        - lastName
        type: object
      communicationProfileId:
        description: 'The ID of a communication profile.

          '
        type: string
      crmId:
        description: 'CRM account ID for the account, up to 100 characters.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      invoiceDeliveryPrefsEmail:
        description: "Whether the customer wants to receive invoices through email.\
          \ \n\nThe default value is `false`.\n"
        type: boolean
      invoiceDeliveryPrefsPrint:
        description: |
          Whether the customer wants to receive printed invoices, such as through postal mail.

          The default value is `false`.
        type: boolean
      invoiceTemplateId:
        description: 'Invoice template ID, configured in Billing Settings in the Zuora
          UI.

          '
        type: string
      name:
        description: 'Account name, up to 255 characters.

          '
        type: string
      notes:
        description: 'A string of up to 65,535 characters.

          '
        type: string
      paymentGateway:
        description: 'The name of the payment gateway instance. If null or left unassigned,
          the Account will use the Default Gateway.

          '
        type: string
      soldToContact:
        description: 'Container for optional sold-to contact.

          '
        properties:
          address1:
            description: 'First address line, 255 characters or less.

              '
            type: string
          address2:
            description: 'Second address line, 255 characters or less.

              '
            type: string
          city:
            description: 'City, 40 characters or less.

              '
            type: string
          country:
            description: 'Country; must be a valid country name or abbreviation. If
              using Zuora Tax, you must specify a country in the sold-to contact to
              calculate tax. A bill-to contact may be used if no sold-to contact is
              provided.

              '
            type: string
          county:
            description: 'County; 32 characters or less. May optionally be used by
              Zuora Tax to calculate county tax.

              '
            type: string
          customField__c:
            description: 'Any custom fields defined for this object. The custom field
              name is case-sensitive.

              '
            type: string
          fax:
            description: 'Fax phone number, 40 characters or less.

              '
            type: string
          firstName:
            description: 'First name, 100 characters or less.

              '
            type: string
          homePhone:
            description: 'Home phone number, 40 characters or less.

              '
            type: string
          lastName:
            description: 'Last name, 100 characters or less.

              '
            type: string
          mobilePhone:
            description: 'Mobile phone number, 40 characters or less.

              '
            type: string
          nickname:
            description: 'Nickname for this contact

              '
            type: string
          otherPhone:
            description: 'Other phone number, 40 characters or less.

              '
            type: string
          otherPhoneType:
            description: 'Possible values are: `Work`, `Mobile`, `Home`, `Other`.

              '
            type: string
          personalEmail:
            description: 'Personal email address, 80 characters or less.

              '
            type: string
          state:
            description: 'State; must be a valid state or province name or 2-character
              abbreviation. If using Zuora Tax, be aware that Zuora Tax  requires
              a state (in the US) or province (in Canada) in this field for the sold-to
              contact to calculate tax, and that a bill-to contact may be used if
              no sold-to contact is provided.

              '
            type: string
          taxRegion:
            description: 'If using Zuora Tax, a region string as optionally defined
              in your tax rules. Not required.

              '
            type: string
          workEmail:
            description: 'Work email address, 80 characters or less.

              '
            type: string
          workPhone:
            description: 'Work phone number, 40 characters or less.

              '
            type: string
          zipCode:
            description: 'Zip code, 20 characters or less.

              '
            type: string
        required:
        - firstName
        - lastName
        type: object
      tagging:
        description: ''
        type: string
      taxInfo:
        description: 'Container for tax exempt information, used to establish the
          tax exempt status of a customer account.

          '
        properties:
          VATId:
            description: "EU Value Added Tax ID. \n\n**Note:** This feature is in\
              \ Limited Availability. If you wish to have access to the feature, submit\
              \ a request at [Zuora Global Support](https://support.zuora.com).\n"
            type: string
          companyCode:
            description: "Unique code that identifies a company account in Avalara.\
              \ Use this field to calculate taxes based on origin and sold-to addresses\
              \ in Avalara.\n\n**Note:** This feature is in Limited Availability.\
              \ If you wish to have access to the feature, submit a request at [Zuora\
              \ Global Support](https://support.zuora.com). \n"
            type: string
          exemptCertificateId:
            description: 'ID of the customer tax exemption certificate. Requires Zuora
              Tax.

              '
            type: string
          exemptCertificateType:
            description: 'Type of tax exemption certificate that the customer holds.
              Requires Zuora Tax.

              '
            type: string
          exemptDescription:
            description: 'Description of the tax exemption certificate that the customer
              holds. Requires Zuora Tax.

              '
            type: string
          exemptEffectiveDate:
            description: |
              Date when the customer tax exemption starts. Requires Zuora Tax.

              Format: `yyyy-mm-dd`. Defaults to the current date.
            format: date
            type: string
          exemptExpirationDate:
            description: |
              Date when the customer tax exemption expires. Requires Zuora Tax.

              Format: `yyyy-mm-dd`. Defaults to the current date.
            format: date
            type: string
          exemptIssuingJurisdiction:
            description: 'Jurisdiction in which the customer tax exemption certificate
              was issued.

              '
            type: string
          exemptStatus:
            description: |
              Status of the account tax exemption. Requires Zuora Tax.

              Required if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.

              Values: `Yes`, `No`, `pendingVerification`.
            type: string
        type: object
    type: object
  PUTAccountingCodeType:
    example:
      name: CASH
      type: Cash
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      glAccountName:
        description: |
          Name of the account in your general ledger.

          Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
        type: string
      glAccountNumber:
        description: |
          Account number in your general ledger.

          Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
        type: string
      name:
        description: |
          Name of the accounting code.

          Accounting code name must be unique. Maximum of 100 characters.
        type: string
      notes:
        description: 'Maximum of 2,000 characters.

          '
        type: string
      type:
        description: "Accounting code type. \n\nValid values are as follows:\n* `AccountsReceivable`\n\
          * `Cash`\n* `OtherAssets`\n* `CustomerCashOnAccount`\n* `DeferredRevenue`\n\
          * `SalesTaxPayable`\n* `OtherLiabilities`\n* `SalesRevenue`\n* `SalesDiscounts`\n\
          * `OtherRevenue`\n* `OtherEquity`\n* `BadDebt`\n* `OtherExpenses`\n    \
          \      \nYou cannot change the type of an accounting code from `AccountsReceivable`\
          \ to a different type.\n"
        type: string
    type: object
  PUTAccountingPeriodType:
    example:
      endDate: '2016-01-31'
      fiscalYear: 2016
      name: Jan 2016
      startDate: '2016-01-01'
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      endDate:
        description: 'The end date of the accounting period in yyyy-mm-dd format,
          for example, "2016-02-19".

          '
        format: date
        type: string
      fiscalYear:
        description: 'Fiscal year of the accounting period in yyyy format, for example,
          "2016".

          '
        type: string
      fiscal_quarter:
        description: ''
        format: int64
        type: integer
      name:
        description: |
          Name of the accounting period.

          Accounting period name must be unique. Maximum of 100 characters.
        type: string
      notes:
        description: |
          Notes about the accounting period.

          Maximum of 255 characters.
        type: string
      startDate:
        description: 'The start date of the accounting period in yyyy-mm-dd format,
          for example, "2016-02-19".

          '
        format: date
        type: string
    type: object
  PUTAllocateManuallyType:
    example:
      cf_phases__c: Phase 1
      cf_project__c: project A
      eventType: Revenue Distributed
      eventTypeSystemId: RevenueDistributed__z
      notes: Manually distribute revenue for Phase 1
      revenueDistributions:
      - accountingPeriodName: Jan'2013
        newAmount: '500'
      - accountingPeriodName: Feb'2013
        newAmount: '600'
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      eventType:
        description: |
          Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
          * Invoice Posted
          * Invoice Item Adjustment Created
          * Invoice Canceled
          * Invoice Item Adjustment Canceled
          * Revenue Distributed

          You can create revenue event types from **Settings > Finance > Revenue Event Types**.
        type: string
      eventTypeSystemId:
        description: |
          System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.

          Cannot be duplicated.
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      revenueDistributions:
        description: 'An array of revenue distributions. Represents how you want to
          distribute revenue for this revenue schedule. You can distribute revenue
          into a maximum of 250 accounting periods with one revenue schedule.

          '
        items:
          $ref: '#/definitions/POSTDistributionItemType'
        type: array
    type: object
  PUTAttachmentType:
    example: |-
      curl
      -H "filename":"Image123.png" \
      -H "description":"Updated Image" \
      -H "Accept:application:json" \
      -X PUT https://api.zuora.com/rest/v1/attachments/8a8083e1545b706a015473153e4743f
    properties:
      description:
        description: 'Description of the attachment.

          '
        type: string
      fileName:
        description: 'File name of the attachment. The value should not contain the
          file extension. Only the file name without the extension can be edited.

          '
        type: string
    type: object
  PUTEventRIDetailType:
    example:
      revenueItems:
      - accountingPeriodName: Oct'2014
        cf_phases__c: Scoping Phase
        cf_project__c: Security
      - accountingPeriodName: Nov'2014
        cf_phases__c: Design Phase
        cf_project__c: Security
    properties:
      revenueItems:
        description: |
          Revenue items are listed in ascending order by the accounting period start date.

          Include at least one custom field.
        items:
          $ref: '#/definitions/EventRevenueItemType'
        type: array
    required:
    - revenueItems
    type: object
  PUTJournalEntryItemType:
    properties:
      accountingCodeName:
        description: "Name of the accounting code.\n\nIf the Journal Entry Item has\
          \ a blank accounting code, enter the empty string (\u201C\u201D). \n"
        type: string
      accountingCodeType:
        description: "Accounting code type. The accounting code types are:\n  * `AccountsReceivable`\n\
          \  *  `Cash`\n  *  `OtherAssets`\n  *  `CustomerCashOnAccount `\n  * `DeferredRevenue`\n\
          \  * `SalesTaxPayable`\n  * `OtherLiabilities`\n  * `SalesRevenue`\n  *\
          \ `SalesDiscounts`\n  * `OtherRevenue` \n  * `OtherEquity`\n  * `BadDebt`\
          \  \n  * `OtherExpenses`\n      \n"
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      type:
        description: 'Type of journal entry item. An enum with the value `Credit`
          or `Debit`.

          '
        type: string
    required:
    - accountingCodeName
    - type
    title: journalEntryItems
    type: object
  PUTPaymentMethodResponseType:
    properties:
      paymentMethodId:
        description: 'ID of the updated payment method.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  PUTPaymentMethodType:
    example:
      cardHolderName: Leo
      expirationMonth: 8
      expirationYear: 2015
      securityCode: '111'
    properties:
      addressLine1:
        description: 'First address line, 255 characters or less.

          '
        type: string
      addressLine2:
        description: 'Second address line, 255 characters or less.

          '
        type: string
      cardHolderName:
        description: 'The full name as it appears on the card, e.g., "John J Smith",
          50 characters or less.

          '
        type: string
      city:
        description: 'City, 40 characters or less.

          '
        type: string
      country:
        description: 'Country; must be a valid country name or abbreviation.

          '
        type: string
      defaultPaymentMethod:
        description: 'Specify "true" to make this card the default payment method;
          otherwise, omit this parameter to keep the current default payment method.

          '
        type: boolean
      email:
        description: 'Card holder''s email address, 80 characters or less.

          '
        type: string
      expirationMonth:
        description: 'Two-digit expiration month (01-12).

          '
        type: string
      expirationYear:
        description: 'Four-digit expiration year.

          '
        type: string
      phone:
        description: 'Phone number, 40 characters or less.

          '
        type: string
      securityCode:
        description: |+
          The CVV or CVV2 security code for the credit card or debit card. Only required if changing expirationMonth, expirationYear, or cardHolderName. To ensure PCI compliance, this value isn't stored and can't be queried.

        type: string
      state:
        description: 'State; must be a valid state name or 2-character abbreviation.

          '
        type: string
      zipCode:
        description: 'Zip code, 20 characters or less.

          '
        type: string
    type: object
  PUTRSBasicInfoType:
    example:
      cf_phases__c: Phase 1
      notes: change recognition term
      referenceId: Reference ID
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      referenceId:
        description: "Reference ID is used only in the custom unlimited rule to create\
          \ a revenue schedule. In this scenario, the revenue schedule is not linked\
          \ to an invoice item or invoice item adjustment.\n\nUse this field only\
          \ when the revenue schedule is not linked to an invoice item or invoice\
          \ item adjustment, such as for revenue schedules based on the Custom - Unlimited\
          \ recognition model. \n"
        type: string
    type: object
  PUTRSTermType:
    example:
      cf_phases__c: Phase 2
      distributionType: Daily distribution
      eventType: Revenue Distributed
      eventTypeSystemId: RevenueDistributed__z
      notes: manual distribute revenue by usage
      recognitionEnd: '2015-12-31'
      recognitionStart: 2015-12-1
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      distributionType:
        description: "How you want to distribute the revenue. The distribution types\
          \ are: \n* Daily Distribution: Distributes revenue evenly across each day\
          \ between the recognitionStart and recognitionEnd dates.\n* Monthly Distribution\
          \ (Back Load): Back loads the revenue so you distribute the monthly amount\
          \ in the partial month at the end only.\n* Monthly Distribution (Front Load):\
          \ Front loads the revenue so you distribute the monthly amount in the partial\
          \ month at the beginning only.\n* Monthly Distribution (Proration by Days):\
          \ Splits the revenue amount between the two partial months.\n\n**Note:**\
          \ To use any of the Monthly Distribution options, you must have the \"Monthly\
          \ recognition over time\" model enabled in **Settings > Finance > Manage\
          \ Revenue Recognition Models**. \n"
        type: string
      eventType:
        description: |
          Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
          * Invoice Posted
          * Invoice Item Adjustment Created
          * Invoice Canceled
          * Invoice Item Adjustment Canceled
          * Revenue Distributed
        type: string
      eventTypeSystemId:
        description: 'System ID of the revenue event type. Each eventType has a unique
          system ID. You can configure your revenue event type system IDs by navigating
          to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.

          '
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      recognitionEnd:
        description: "The end date of a recognition period in `YYYY-MM-DD` format.\
          \ \n\nThe maximum difference of the `recognitionStart` and `recognitionEnd`\
          \ date fields is equal to 250 multiplied by the length of an accounting\
          \ period.\n"
        format: date
        type: string
      recognitionStart:
        description: |
          The start date of a recognition period in `YYYY-MM-DD` format.

          If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
        format: date
        type: string
    required:
    - recognitionEnd
    - recognitionStart
    type: object
  PUTRenewSubscriptionResponseType:
    properties:
      invoiceId:
        description: 'Invoice ID, if one is generated.

          '
        type: string
      paidAmount:
        description: 'Payment amount, if payment is collected.

          '
        format: decimal
        type: string
      paymentId:
        description: 'Payment ID, if payment is collected.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      termEndDate:
        description: 'Date the new subscription term ends, as yyyy-mm-dd.

          '
        format: date
        type: string
      termStartDate:
        description: 'Date the new subscription term begins, as yyyy-mm-dd.

          '
        format: date
        type: string
      totalDeltaMrr:
        description: 'Change in the subscription monthly recurring revenue as a result
          of the update. For a renewal, this is the MRR of the subscription in the
          new term.

          '
        format: decimal
        type: string
      totalDeltaTcv:
        description: 'Change in the total contracted value of the subscription as
          a result of the update. For a renewal, this is the TCV of the subscription
          in the new term.

          '
        format: decimal
        type: string
    type: object
  PUTRenewSubscriptionType:
    example:
      collect: false
      invoice: true
    properties:
      OpportunityCloseDate_QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName_QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n          \nThis\
          \ field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType_QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal, or Churn.\
          \ This field is populated when the subscription originates from Zuora Quotes.\n\
          \          \nThis field is used only for reporting subscription metrics.\
          \ \n\n"
        type: string
      QuoteNumber_QT:
        description: "The unique identifier of the Quote. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n          \nThis\
          \ field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteType_QT:
        description: "The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is populated when\
          \ the subscription originates from Zuora Quotes.\n          \nThis field\
          \ is used only for reporting subscription metrics. \n\n"
        type: string
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\n**Prerequisite:** `invoice` must be `true`. \n\n\
          **Note:** If you are using the field `invoiceCollect` rather than the field\
          \ `invoice`, the `invoiceCollect` value must be `true`.\n\nTo view the credit\
          \ balance adjustment, retrieve the details of the invoice using the Get\
          \ Invoices method.\n"
        type: boolean
      collect:
        description: "Collects an automatic payment for a subscription. The collection\
          \ generated in this operation is only for this subscription, not for the\
          \ entire customer account.\n\nIf the value is `true`, the automatic payment\
          \ is collected. If the value is `false`, no action is taken.\n\nThe default\
          \ value is `false`.\n\n**Prerequisite:** `invoice` must be `true`. \n\n\
          **Note:** This field is in Zuora REST API version control. Supported minor\
          \ versions are 196.0 or later. To use this field in the method, you must\
          \ set the `zuora-version` field to the minor version number in the request\
          \ header. \n"
        type: string
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken.\n\nThe default value is `false`. \n\n\
          **Note:** This field is in Zuora REST API version control. Supported minor\
          \ versions are 196.0 or later. To use this field in the method, you must\
          \ set the `zuora-version` field to the minor version number in the request\
          \ header. \n"
        type: string
      invoiceCollect:
        description: |
          **Note:** This field has been replaced by the invoice field and the collect field. invoiceCollect is available only for backward compatibility.

          If `true` (default), an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.

          This field is in Zuora REST API version control. Supported minor versions are `186.0`, `187.0`, `188.0`, `189.0`, and `196.0`.
        type: boolean
      invoiceTargetDate:
        description: 'Date through which to calculate charges if generating an invoice,
          in yyyy-mm-dd format. Default is current date.

          '
        format: date
        type: string
    type: object
  PUTRevenueScheduleResponseType:
    properties:
      revenueEventNumber:
        description: 'The revenue event number created when a revenue event occurs.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
    type: object
  PUTScAddType:
    properties:
      applyDiscountTo:
        description: |
          Specifies the type of charges that you want a specific discount to apply to.

          Values:

          * `ONETIME`
          * `RECURRING`
          * `USAGE`
          * `ONETIMERECURRING`
          * `ONETIMEUSAGE`
          * `RECURRINGUSAGE`
          * `ONETIMERECURRINGUSAGE`

          Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:

          * Recurring
        type: string
      billCycleDay:
        description: |
          Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.

          Values: `1`-`31`

          Available for the following charge types:

          * Recurring
          * Usage-based
        type: string
      billCycleType:
        description: |
          Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayOfMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayOfWeek`, set the `weeklyBillCycleDay` field.

          Values:

          * `DefaultFromCustomer`
          * `SpecificDayOfMonth`
          * `SubscriptionStartDay`
          * `ChargeTriggerDay`
          * `SpecificDayOfWeek`

          Available for the following charge types:

          * Recurring
          * Usage-based
        type: string
      billingPeriod:
        description: |
          Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).

          Values:

          * `Month`
          * `Quarter`
          * `Semi_Annual`
          * `Annual`
          * `Eighteen_Months`
          * `Two_Years`
          * `Three_Years`
          * `Five_Years`
          * `Specific_Months`
          * `Subscription_Term`
          * `Week`
          * `Specific_Weeks`

          Available for the following charge types:

          * Recurring
          * Usage-based
        type: string
      billingPeriodAlignment:
        description: |
          Aligns charges within the same subscription if multiple charges begin on different dates.

          Values:

          * `AlignToCharge`
          * `AlignToSubscriptionStart`
          * `AlignToTermStart`

          Available for the following charge types:

          * Recurring
          * Usage-based
        type: string
      billingTiming:
        description: |
          Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.

          Values:

          * `IN_ADVANCE` (default)
          * `IN_ARREARS`
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Description of the charge.

          '
        type: string
      discountAmount:
        description: |
          Specifies the amount of fixed-amount discount.

          Available for the following charge type for the Discount-Fixed Amount charge model:

          * Recurring
        format: decimal
        type: string
      discountLevel:
        description: |
          Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.

          Values:

          * `rateplan`
          * `subscription`
          * `account`

          Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:

          * Recurring
        type: string
      discountPercentage:
        description: "Specifies the percentage of a percentage discount. \n\nAvailable\
          \ for the following charge type for the Discount-Percentage charge model:\n\
          \n* Recurring\n"
        format: decimal
        type: string
      endDateCondition:
        description: |
          Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.

          Values:

          * `Subscription_End`
          * `Fixed_Period`
          * `Specific_End_Date`
        type: string
      includedUnits:
        description: |
          Specifies the number of units in the base set of units for this charge. Must be >=`0`.

          Available for the following charge types for the Overage charge model:

          * Recurring
          * Usage-based
        format: decimal
        type: string
      listPriceBase:
        description: |
          The list price base for the product rate plan charge.

          Values:

          * `Per_Billing_Period`
          * `Per_Month`
          * `Per_Week`

          Available for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:

          * Recurring
        type: string
      number:
        description: 'Unique number that identifies the charge. System-generated if
          not provided.

          '
        type: string
      numberOfPeriods:
        description: |
          Specifies the number of periods to use when calculating charges in an overage smoothing charge model.

          Available for the following charge type for the Overage and Tiered with Overage charge models:

          * Usage-based
        format: int64
        type: integer
      overagePrice:
        description: "Price for units over the allowed amount. \n\nAvailable for the\
          \ following charge type for the Overage and Tiered with Overage charge models:\n\
          \n* Usage-based\n"
        format: decimal
        type: string
      overageUnusedUnitsCreditOption:
        description: |
          Determines whether to credit the customer with unused units of usage.

          Values:

          * `NoCredit`
          * `CreditBySpecificRate`

          Available for the following charge type for the Overage and Tiered with Overage charge models:

          * Usage-based
        type: string
      price:
        description: |
          Price for units in the subscription rate plan.

          Supports all charge types for the Flat Fee and Per Unit charge models
        format: decimal
        type: string
      priceChangeOption:
        description: |
          Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.

          Values:

          * `NoChange` (default)
          * `SpecificPercentageValue`
          * `UseLatestProductCatalogPricing`

          Available for the following charge types:

          * Recurring
          * Usage-based
          * Not available for the Fixed-Amount Discount charge model.
        type: string
      priceIncreasePercentage:
        description: |
          Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.

          Decimal between -100 and 100.

          Available for the following charge types:

          * Recurring
          * Usage-based

          Not available for the Fixed-Amount Discount charge model.
        format: decimal
        type: string
      productRatePlanChargeId:
        description: ''
        type: string
      quantity:
        description: |
          Number of units. Must be >=`0`.

          Available for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:

          * One-time
          * Recurring
        format: decimal
        type: string
      ratingGroup:
        description: "Specifies a rating group based on which usage records are rated.\n\
          \n**Note:** This feature is in **Limited Availability**. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
          \nValues:\n\n* `ByBillingPeriod` (default): The rating is based on all the\
          \ usages in a billing period.       \n* `ByUsageStartDate`: The rating is\
          \ based on all the usages on the same usage start date. \n* `ByUsageRecord`:\
          \ The rating is based on each usage record.\n* `ByUsageUpload`: The rating\
          \ is based on all the usages in a uploaded usage file (.xls or .csv).\n\n\
          The `ByBillingPeriod` value can be applied for all charge models.\nThe `ByUsageStartDate`,\
          \ `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per\
          \ unit, volume pricing, and tiered pricing charge models.\nUse this field\
          \ only for Usage charges. One-Time Charges and Recurring Charges return\
          \ `NULL`.\n"
        type: string
      specificBillingPeriod:
        description: |
          Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.

          Available for the following charge types:

          * Recurring
          * Usage-based
        format: int64
        type: integer
      specificEndDate:
        description: |
          Defines when the charge ends after the charge trigger date.

          This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.

          If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
        format: date
        type: string
      tiers:
        description: |
          Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:

          * One-time
          * Recurring
          * Usage-based
        items:
          $ref: '#/definitions/POSTTierType'
        type: array
      triggerDate:
        description: 'Specifies when to start billing the customer for the charge.
          Required if the `triggerEvent` field is set to `USD`.

          '
        format: date
        type: string
      triggerEvent:
        description: |
          Specifies when to start billing the customer for the charge.

          Values:

          * `UCE`
          * `USA`
          * `UCA`
          * `USD`
        type: string
      unusedUnitsCreditRates:
        description: |
          Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.

          Available for the following charge type for the Overage and Tiered with Overage charge models:

          * Usage-based
        format: decimal
        type: string
      upToPeriods:
        description: "The period type used to define when the charge ends. \n\nValues:\n\
          \n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\nYou\
          \ must use this field together with the `upToPeriods` field to specify the\
          \ time period.\n\nThis field is applicable only when the `endDateCondition`\
          \ field is set to `Fixed_Period`. \n"
        format: int64
        type: integer
      upToPeriodsType:
        description: "The period type used to define when the charge ends. \n\nValues:\n\
          \n* `Billing_Periods`\n* `Days`\n* `Weeks`\n* `Months`\n* `Years`\n\nYou\
          \ must use this field together with the `upToPeriods` field to specify the\
          \ time period.\n\nThis field is applicable only when the `endDateCondition`\
          \ field is set to `Fixed_Period`. \n"
        type: string
    required:
    - productRatePlanChargeId
    title: chargeOverrides
    type: object
  PUTScUpdateType:
    properties:
      billingPeriodAlignment:
        description: |
          Aligns charges within the same subscription if multiple charges begin on different dates.

          Values:

          * `AlignToCharge`
          * `AlignToSubscriptionStart`
          * `AlignToTermStart`

          Available for the following charge types:

          * Recurring
          * Usage-based
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      description:
        description: 'Description of the charge.

          '
        type: string
      includedUnits:
        description: |
          Specifies the number of units in the base set of units for this charge. Must be >=0.

          Available for the following charge types for the Overage charge model:

          * `Recurring`
          * `Usage-based`
        format: decimal
        type: string
      overagePrice:
        description: "Price for units over the allowed amount. \n\nAvailable for the\
          \ following charge type for the Overage and Tiered with Overage charge models:\n\
          \n* Usage-based\n"
        format: decimal
        type: string
      price:
        description: |
          Price for units in the subscription rate plan.

          Supports all charge types for the Flat Fee and Per Unit charge models
        format: decimal
        type: string
      priceChangeOption:
        description: |
          Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.

          Values:

          * `NoChange` (default)
          * `SpecificPercentageValue`
          * `UseLatestProductCatalogPricing`

          Available for the following charge types:

          * Recurring
          * Usage-based

          Not available for the Fixed-Amount Discount charge model.
        type: string
      priceIncreasePercentage:
        description: |
          Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.

          Decimal between `-100` and `100`.

          Available for the following charge types:

          * Recurring
          * Usage-based

          Not available for the Fixed-Amount Discount charge model.
        format: decimal
        type: string
      quantity:
        description: 'Quantity of units; must be greater than zero.

          '
        format: decimal
        type: string
      ratePlanChargeId:
        description: 'ID of a rate-plan charge for this subscription.

          '
        type: string
      tiers:
        description: |
          Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:

          * One-time
          * Recurring
          * Usage-based
        items:
          $ref: '#/definitions/POSTTierType'
        type: array
      triggerDate:
        description: |
          Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to USD.

          `triggerDate` cannot be updated for the following using the REST update subscription call:

          * One-time charge type
          * Discount-Fixed Amount charge model
          * Discount-Percentage charge model
        format: date
        type: string
      triggerEvent:
        description: |
          Specifies when to start billing the customer for the charge.

          Values:

          * `UCE`
          * `USA`
          * `UCA`
          * `USD`

          This is the date when charge changes in the REST request become effective.

          `triggerEvent` cannot be updated for the following using the REST update subscription call:

          * One-time charge type
          * Discount-Fixed Amount charge model
          * Discount-Percentage charge model
        type: string
    required:
    - ratePlanChargeId
    title: chargeUpdateDetails
    type: object
  PUTScheduleRIDetailType:
    example:
      revenueItems:
      - accountingPeriodName: Oct'2014
        cf_phases__c: Scoping Phase
        cf_project__c: Security
      - accountingPeriodName: Nov'2014
        cf_phases__c: Design Phase
        cf_project__c: Security
    properties:
      revenueItems:
        description: |
          Revenue items are listed in ascending order by the accounting period start date.

          Include at least one custom field.
        items:
          $ref: '#/definitions/RevenueScheduleItemType'
        type: array
    required:
    - revenueItems
    type: object
  PUTSpecificDateAllocationType:
    example:
      amount: '1000.00'
      distributeOn: '2016-02-03'
      distributionType: specific date (delta fixed amount)
      eventNumber__c: phase 2
      eventType: Revenue Distributed
      eventTypeSystemId: RevenueDistributed__z
      notes: service delivered and accepted by customer
    properties:
      amount:
        description: 'The revenue schedule amount, which is the sum of all revenue
          items. This field cannot be null and must be formatted based on the currency,
          such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are
          using the proper formatting otherwise, the response will fail and this error
          message is returned: `Allocation amount with wrong decimal places.`

          '
        format: decimal
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      distributeOn:
        description: |
          The recognition date on which to distribute revenue for milestone-based recognition.

          Type: date in `YYYY-MM-DD` format.
        format: date
        type: string
      distributionType:
        description: |
          How to distribute the revenue for milestone-based recognition.

          Possible values are:
          * specific date (delta fixed amount)
          * specific date (delta percent total)
          * specific date (delta percent undistributed)
        type: string
      eventType:
        description: |
          Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI. The default revenue event types are:
          * Invoice Posted
          * Invoice Item Adjustment Created
          * Invoice Canceled
          * Invoice Item Adjustment Canceled
          * Revenue Distributed
        type: string
      eventTypeSystemId:
        description: 'System ID of the revenue event type. Each eventType has a unique
          system ID. You can configure your revenue event type system IDs by navigating
          to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.

          '
        type: string
      notes:
        description: 'Additional information about this record.

          '
        type: string
      percentage:
        description: |
          Percentage of the total recognition amount or total undistributed to distribute.

          Required if distributionType is either:
          * specific date (delta percent total)
          * specific date (delta percent undistributed)
        format: decimal
        type: string
    required:
    - distributionType
    - distributeOn
    type: object
  PUTSrpAddType:
    properties:
      chargeOverrides:
        description: 'This optional container is used to override the quantity of
          one or more product rate plan charges for this subscription.

          '
        items:
          $ref: '#/definitions/PUTScAddType'
        type: array
      contractEffectiveDate:
        description: |
          The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.

          If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.
        format: date
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      customerAcceptanceDate:
        description: |
          The date when the customer accepts the contract in yyyy-mm-dd format.

          If this field is not set:

          * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
          * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
      productRatePlanId:
        description: 'ID of a product rate plan for this subscription

          '
        type: string
      serviceActivationDate:
        description: |
          The date when the new product in the subscription is activated in yyyy-mm-dd format.

          You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
    required:
    - productRatePlanId
    - contractEffectiveDate
    title: add
    type: object
  PUTSrpRemoveType:
    properties:
      contractEffectiveDate:
        description: 'Effective date of the new subscription, as yyyy-mm-dd.

          '
        format: date
        type: string
      customerAcceptanceDate:
        description: |
          The date when the customer accepts the contract in yyyy-mm-dd format.

          If this field is not set:

          * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
          * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
      ratePlanId:
        description: 'ID of a rate-plan charge for this subscription

          '
        type: string
      serviceActivationDate:
        description: |
          The date when the remove amendment is activated in yyyy-mm-dd format.

          You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
    required:
    - contractEffectiveDate
    - ratePlanId
    title: remove
    type: object
  PUTSrpUpdateType:
    properties:
      chargeUpdateDetails:
        description: "Container for one or more product rate plan charges. \n"
        items:
          $ref: '#/definitions/PUTScUpdateType'
        type: array
      contractEffectiveDate:
        description: |
          The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.

          If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.
        format: date
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      customerAcceptanceDate:
        description: |
          The date when the customer accepts the contract in yyyy-mm-dd format.

          If this field is not set:

          * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
          * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
      ratePlanId:
        description: 'ID of a rate plan for this subscription.

          '
        type: string
      serviceActivationDate:
        description: |
          The date when the update amendment is activated in yyyy-mm-dd format.

          You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.

          The billing trigger dates must follow this rule:

          contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
        format: date
        type: string
      specificUpdateDate:
        description: |
          The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.

          Required only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription.
        format: date
        type: string
    required:
    - ratePlanId
    - contractEffectiveDate
    title: update
    type: object
  PUTSubscriptionPreviewInvoiceItemsType:
    properties:
      chargeAmount:
        description: 'The amount of the charge. This amount doesn''t include taxes
          unless the charge''s tax mode is inclusive.

          '
        format: decimal
        type: string
      chargeDescription:
        description: 'Description of the charge.

          '
        type: string
      chargeName:
        description: 'Name of the charge

          '
        type: string
      productName:
        description: 'Name of the product associated with this item.

          '
        type: string
      productRatePlanChargeId:
        description: ''
        type: string
      quantity:
        description: 'Quantity of this item.

          '
        format: decimal
        type: string
      serviceEndDate:
        description: 'End date of the service period for this item, i.e., the last
          day of the period, as yyyy-mm-dd.

          '
        format: date
        type: string
      serviceStartDate:
        description: 'Service start date as yyyy-mm-dd. If the charge is a one-time
          fee, this is the date of that charge.

          '
        format: date
        type: string
      unitOfMeasure:
        description: ''
        type: string
    title: invoiceItems
    type: object
  PUTSubscriptionResponseType:
    properties:
      amount:
        description: 'Invoice amount. Preview mode only.

          '
        format: decimal
        type: string
      amountWithoutTax:
        description: 'Invoice amount minus tax. Preview mode only.

          '
        format: decimal
        type: string
      chargeMetrics:
        description: 'Container for charge metrics.

          '
        properties:
          dmrr:
            description: 'Change in total contract value.

              '
            type: string
          dtcv:
            description: 'Change in monthly recurring revenue.

              '
            type: string
          mrr:
            description: 'Monthly recurring revenue.

              '
            type: string
          number:
            description: 'The charge number of the subscription. Only available for
              update subscription.

              '
            type: string
          originRatePlanId:
            description: 'The origin rate plan ID. Only available for update subscription.

              '
            type: string
          originalId:
            description: 'The original rate plan charge ID. Only available for update
              subscription.

              '
            type: string
          productRatePlanChargeId:
            description: ''
            type: string
          productRatePlanId:
            description: ''
            type: string
          tcv:
            description: 'Total contract value.

              '
            type: string
        type: object
      invoice:
        description: "Container for invoices.\n\n\n **Note:** This field is only available\
          \ if you set the Zuora REST API minor version to 207.0 or later in the request\
          \ header. Also, the response structure is changed and the following invoice\
          \ related response fields are moved to this **invoice** container:\n  \n\
          \   * amount\n   * amountWithoutTax\n   * taxAmount\n   * invoiceItems\n\
          \   * targetDate\n   * chargeMetrics\n"
        type: object
      invoiceId:
        description: 'Invoice ID, if an invoice is generated during the update.

          '
        type: string
      invoiceItems:
        description: 'Container for invoice items.

          '
        items:
          $ref: '#/definitions/PUTSubscriptionPreviewInvoiceItemsType'
        type: array
      invoiceTargetDate:
        description: |
          Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.

          **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      paidAmount:
        description: 'Payment amount, if a payment is collected

          '
        format: decimal
        type: string
      paymentId:
        description: 'Payment ID, if a payment is collected.

          '
        type: string
      previewChargeMetricsResponse:
        description: ''
        type: string
      subscriptionId:
        description: 'The ID of the resulting new subscription.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      targetDate:
        description: |
          Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.

          **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      taxAmount:
        description: 'Tax amount on the invoice.

          '
        format: decimal
        type: string
      totalDeltaMrr:
        description: 'Change in the subscription monthly recurring revenue as a result
          of the update.

          '
        format: decimal
        type: string
      totalDeltaTcv:
        description: 'Change in the total contracted value of the subscription as
          a result of the update.

          '
        format: decimal
        type: string
    type: object
  PUTSubscriptionResumeResponseType:
    properties:
      invoiceId:
        description: 'Invoice ID, if an invoice is generated during the subscription
          process.

          '
        type: string
      paidAmount:
        description: 'Payment amount, if a payment is collected.

          '
        format: decimal
        type: string
      paymentId:
        description: 'Payment ID, if a payment is collected.

          '
        type: string
      resumeDate:
        description: 'The date when subscription resumption takes effect, as yyyy-mm-dd.

          '
        format: date
        type: string
      subscriptionId:
        description: 'The subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      termEndDate:
        description: 'The date when the new subscription term ends, as yyyy-mm-dd.

          '
        format: date
        type: string
      totalDeltaTcv:
        description: 'Change in the total contracted value of the subscription as
          a result of the update.

          '
        format: decimal
        type: string
    type: object
  PUTSubscriptionResumeType:
    example:
      collect: false
      contractEffectiveDate: '2019-02-01'
      extendsTerm: true
      invoice: true
      resumePolicy: SpecificDate
      resumeSpecificDate: '2019-10-01'
    properties:
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\nPrerequisite: `invoice` must be `true`. \n\nTo\
          \ view the credit balance adjustment, retrieve the details of the invoice\
          \ using the Get Invoices method.\n"
        type: boolean
      collect:
        description: |
          Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.

          If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.

          The default value is false.

          This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.

          Prerequisite: `invoice` must be `true`.
        type: boolean
      contractEffectiveDate:
        description: 'The date when the customer notifies you that they want to resume
          their subscription.

          '
        format: date
        type: string
      extendsTerm:
        description: |
          Whether to extend the subscription term by the length of time the suspension is in effect.

          Values: `true`, `false`.
        type: boolean
      invoice:
        description: |
          Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.

          If the value is `true`, an invoice is created. If the value is `false`, no action is taken.

          The default value is `false`.

          This field is in Zuora REST API version control. Supported minor versions are 196.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
        type: boolean
      invoiceCollect:
        description: "**Note:** This field has been replaced by the `invoice` field\
          \ and the `collect` field. `invoiceCollect` is available only for backward\
          \ compatibility.\n\nIf `true`, an invoice is generated and payment collected\
          \ automatically during the subscription process. If `false` (default), no\
          \ invoicing or payment takes place.  The invoice generated in this operation\
          \ is only for this subscription, not for the entire customer account.\n\n\
          This field is in Zuora REST API version control. Supported minor versions\
          \ are 186.0, 187.0, 188.0, 189.0, and 196.0. "
        type: boolean
      invoiceTargetDate:
        description: 'If an invoice is to be generated, the date through which to
          calculate the charges, as yyyy-mm-dd.

          '
        format: date
        type: string
      resumePeriods:
        description: |
          The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.

          **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
        type: string
      resumePeriodsType:
        description: |
          The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriods` field to specify the period.

          Values: `Day`, `Week`, `Month`, `Year`

          **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
        type: string
      resumePolicy:
        description: |
          Resume methods. Specify a way to resume a subscription.

          Values:

          * `Today`: The subscription resumption takes effect on today's date.

          * `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.

          * `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.

          * `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
        type: string
      resumeSpecificDate:
        description: |
          A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.

          **Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.

          The value should not be earlier than the subscription suspension date.
        format: date
        type: string
    required:
    - resumePolicy
    type: object
  PUTSubscriptionSuspendResponseType:
    properties:
      invoiceId:
        description: 'Invoice ID, if an invoice is generated during the subscription
          process.

          '
        type: string
      paidAmount:
        description: 'Payment amount, if a payment is collected.

          '
        format: decimal
        type: string
      paymentId:
        description: 'Payment ID, if a payment is collected.

          '
        type: string
      resumeDate:
        description: 'The date when subscription resumption takes effect, in the format
          yyyy-mm-dd.

          '
        format: date
        type: string
      subscriptionId:
        description: 'The subscription ID.

          '
        type: string
      success:
        description: 'Returns `true` if the request was processed successfully.

          '
        type: boolean
      suspendDate:
        description: 'The date when subscription suspension takes effect, in the format
          yyyy-mm-dd.

          '
        format: date
        type: string
      termEndDate:
        description: 'The date when the new subscription term ends, in the format
          yyyy-mm-dd.

          '
        format: date
        type: string
      totalDeltaTcv:
        description: 'Change in the total contracted value of the subscription as
          a result of the update.

          '
        format: decimal
        type: string
    type: object
  PUTSubscriptionSuspendType:
    example:
      collect: false
      contractEffectiveDate: '2019-02-01'
      extendsTerm: true
      invoice: true
      resume: true
      resumePolicy: SpecificDate
      resumeSpecificDate: '2019-06-01'
      suspendPeriods: 10
      suspendPeriodsType: Day
      suspendPolicy: FixedPeriodsFromToday
    properties:
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\nPrerequisite: `invoice` must be `true`. \n\nTo\
          \ view the credit balance adjustment, retrieve the details of the invoice\
          \ using the Get Invoices method.\n"
        type: boolean
      collect:
        description: "Collects an automatic payment for a subscription. The collection\
          \ generated in this operation is only for this subscription, not for the\
          \ entire customer account.\n\nIf the value is `true`, the automatic payment\
          \ is collected. If the value is `false`, no action is taken.\n\nThe default\
          \ value is `false`.\n\nPrerequisite: `invoice` must be `true`. \n\n**Note:**\
          \ This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` field to the minor version number in the request \n"
        type: boolean
      contractEffectiveDate:
        description: 'The date when the customer notifies you that they want to amend
          their subscription.

          '
        format: date
        type: string
      extendsTerm:
        description: 'Whether to extend the subscription term by the length of time
          the suspension is in effect. Values: `true`, `false`.

          '
        type: boolean
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken.\nThe default value is `false`. \n\n**Note:**\
          \ This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` field to the minor version number in the request header.\n"
        type: boolean
      invoiceCollect:
        description: |
          **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.

          This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0.
        type: boolean
      invoiceTargetDate:
        description: 'If an invoice is to be generated, the date through which to
          calculate the charges, as yyyy-mm-dd.

          '
        format: date
        type: string
      resume:
        description: 'Whether to set when to resume a subscription when creating a
          suspend amendment. Values: `true`, `false`.

          '
        type: boolean
      resumePeriods:
        description: |
          The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.

          **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
        type: string
      resumePeriodsType:
        description: |
          The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the resumePeriods field to specify the period.

          Values: `Day`, `Week`, `Month`, `Year`

          **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
        type: string
      resumePolicy:
        description: |
          Resume methods. Specify a way to resume a subscription. Values:

          * `Today`: The subscription resumption takes effect on today's date.

          * `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.

          * `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.

          * `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
        type: string
      resumeSpecificDate:
        description: |
          A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.

          **Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.

          The value should not be earlier than the subscription suspension date.
        format: date
        type: string
      suspendPeriods:
        description: |
          The length of the period used to specify when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the `suspendPeriodsType` field to specify the period.

          **Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.
        type: string
      suspendPeriodsType:
        description: |
          The period type used to define when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the suspendPeriods field to specify the period.

          Type: string (enum)

          Values: `Day`, `Week`, `Month`, `Year`

          **Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.
        type: string
      suspendPolicy:
        description: "Suspend methods. Specify a way to suspend a subscription. \n\
          \nValue:\n\n* `Today`: The subscription suspension takes effect on today's\
          \ date.\n* `EndOfLastInvoicePeriod`: The subscription suspension takes effect\
          \ at the end of the last invoice period. The suspend date defaults to a\
          \ date that is one day after the last invoiced period. You can choose this\
          \ option to avoid any negative invoices (credits) issued back to the customer\
          \ after the subscription suspension. \n* `SpecificDate`: The subscription\
          \ suspension takes effect on a specific date. You must define the specific\
          \ date in the `suspendSpecificDate` field.\n* `FixedPeriodsFromToday`: The\
          \ subscription suspension takes effect after a specified period based on\
          \ today's date. You must specify the `suspendPeriods` and `suspendPeriodsType`\
          \ fields to define the period.\n"
        type: string
      suspendSpecificDate:
        description: |
          A specific date when the subscription suspension takes effect, in the format yyyy-mm-dd.

          **Note:** This field is only applicable only when the suspendPolicy field is set to SpecificDate.

          The value should not be earlier than the subscription contract effective date, later than the subscription term end date, or within a period for which the customer has been invoiced.
        format: date
        type: string
    required:
    - suspendPolicy
    type: object
  PUTSubscriptionType:
    example:
      autoRenew: false
      collect: false
      currentTerm: '10'
      currentTermPeriodType: Month
      invoice: true
      myCustomField__c: test
      notes: Test UPDATE subscription from z-ruby-sdk
      renewalSetting: RENEW_WITH_SPECIFIC_TERM
      renewalTerm: '4'
      renewalTermPeriodType: Month
      termType: TERMED
      update:
      - chargeUpdateDetails:
        - quantity: 12
          ratePlanChargeId: 2c92c8f83dcbd8b1013dcce0eb510075
        contractEffectiveDate: '2013-04-28'
        ratePlanId: 2c92c8f83dcbd8b1013dcce0ea7e006f
    properties:
      CpqBundleJsonId__QT:
        description: ''
        type: string
      OpportunityCloseDate__QT:
        description: "The closing date of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      OpportunityName__QT:
        description: "The unique identifier of the Opportunity. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n\nThis field is used\
          \ only for reporting subscription metrics. \n\n"
        type: string
      QuoteBusinessType__QT:
        description: "The specific identifier for the type of business transaction\
          \ the Quote represents such as `New`, `Upsell`, `Downsell`, `Renewal`, or\
          \ `Churn`. This field is populated when the subscription originates from\
          \ Zuora Quotes.\n          \nThis field is used only for reporting subscription\
          \ metrics. \n\n"
        type: string
      QuoteNumber__QT:
        description: "The unique identifier of the Quote. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n          \nThis\
          \ field is used only for reporting subscription metrics. \n\n"
        type: string
      QuoteType__QT:
        description: "The Quote type that represents the subscription lifecycle stage\
          \ such as `New`, `Amendment`, `Renew`, or `Cancel`. This field is populated\
          \ when the subscription originates from Zuora Quotes.\n          \nThis\
          \ field is used only for reporting subscription metrics. \n\n"
        type: string
      add:
        description: 'Container for adding one or more rate plans.

          '
        items:
          $ref: '#/definitions/PUTSrpAddType'
        type: array
      applyCreditBalance:
        description: "Applies a credit balance to an invoice.\n\nIf the value is `true`,\
          \ the credit balance is applied to the invoice. If the value is `false`,\
          \ no action is taken.\n\n**Prerequisite:** `invoice` must be true. \n\n\
          **Note:** If you are using the field `invoiceCollect` rather than the field\
          \ `invoice`, the `invoiceCollect` value must be true.\n\nTo view the credit\
          \ balance adjustment, retrieve the details of the invoice using the Get\
          \ Invoices method.\n"
        type: boolean
      autoRenew:
        description: 'If `true`, this subscription automatically renews at the end
          of the subscription term. Default is `false`.

          '
        type: boolean
      currentTerm:
        description: 'The length of the period for the current subscription term.
          If `termType` is `TERMED`, this field is required and must be greater than
          `0`. If `termType` is `EVERGREEN`, this value is ignored. Default is `0`.

          '
        format: int64
        type: integer
      currentTermPeriodType:
        description: |
          The period type for the current subscription term.

          This field is used with the `CurrentTerm` field to specify the current subscription term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      includeExistingDraftDocItems:
        description: |
          Specifies whether to include draft invoice items in subscription previews.
          Values are:

          * `true` (default). Includes draft invoice items in the preview result.
          * `false`. Excludes draft invoice items in the preview result.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        type: boolean
      includeExistingDraftInvoiceItems:
        description: |
          Specifies whether to include draft invoice items in subscription previews.
          Values are:

          * `true` (default). Includes draft invoice items in the preview result.
          * `false`. Excludes draft invoice items in the preview result.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        type: boolean
      invoice:
        description: "Creates an invoice for a subscription. The invoice generated\
          \ in this operation is only for this subscription, not for the entire customer\
          \ account.\n\nIf the value is `true`, an invoice is created. If the value\
          \ is `false`, no action is taken.\n\nThe default value is `false`. \n\n\
          This field is in Zuora REST API version control. Supported minor versions\
          \ are 196.0 or later. To use this field in the method, you must set the\
          \ `zuora-version` parameter to the minor version number in the request header.\n"
        type: boolean
      invoiceCollect:
        description: "**Note:** This field has been replaced by the `invoice` field\
          \ and the `collect` field. `invoiceCollect` is available only for backward\
          \ compatibility.\n\nIf `true`, an invoice is generated and payment collected\
          \ automatically during the subscription process. If `false` (default), no\
          \ invoicing or payment takes place.  The invoice generated in this operation\
          \ is only for this subscription, not for the entire customer account.\n\n\
          This field is in Zuora REST API version control. Supported minor versions\
          \ are 186.0, 187.0, 188.0, 189.0, and 196.0. "
        type: boolean
      invoiceSeparately:
        description: "Separates a single subscription from other subscriptions and\
          \ invoices the charge independently. \n\nIf the value is `true`, the subscription\
          \ is billed separately from other subscriptions. If the value is `false`,\
          \ the subscription is included with other subscriptions in the account invoice.\n\
          \nThe default value is `false`.\nPrerequisite: The default subscription\
          \ setting Enable Subscriptions to be Invoiced Separately must be set to\
          \ Yes.\n"
        type: boolean
      invoiceTargetDate:
        description: "Date through which to calculate charges if an invoice is generated,\
          \ as yyyy-mm-dd. Default is current date.\n\n**Note:** This field is in\
          \ Zuora REST API version control. Supported minor versions are 186.0, 187.0,\
          \ 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions)\
          \ for more information. "
        format: date
        type: string
      notes:
        description: 'String of up to 500 characters.

          '
        type: string
      preview:
        description: 'If `true` the update is made in preview mode. The default setting
          is `false`.

          '
        type: boolean
      previewType:
        description: "The type of preview you will receive. \n\nThis field is in Zuora\
          \ REST API version control. The supported values of this field depend on\
          \ the REST API minor version you specified in the request header.\n\n\n\
          * If you do not specify the REST API minor version or specify the minor\
          \ version number to one of following values in the request header:\n \n\
          \  * 186.0\n  * 187.0\n  * 188.0\n  * 189.0\n  * 196.0 \n  \n  The following\
          \ values are supported in the **previewType** field:\n\n  * InvoiceItem\n\
          \  * ChargeMetrics\n  * InvoiceItemChargeMetrics\n  \n  The default value\
          \ is InvoiceItem.\n\n* If you specify the REST API minor version to 207.0\
          \ or later in the request header, the following values are supported in\
          \ the **previewType** field:\n\n  - LegalDoc\n  - ChargeMetrics\n  - LegalDocChargeMetrics\n\
          \n  The default value is LegalDoc.\n\nSee [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions)\
          \ for more information.\n"
        type: string
      remove:
        description: 'Container for removing one or more rate plans.

          '
        items:
          $ref: '#/definitions/PUTSrpRemoveType'
        type: array
      renewalSetting:
        description: "Specifies whether a termed subscription will remain `TERMED`\
          \ or change to `EVERGREEN` when it is renewed. \n\nValues are:\n\n* `RENEW_WITH_SPECIFIC_TERM`\
          \ (default)\n* `RENEW_TO_EVERGREEN`\n"
        type: string
      renewalTerm:
        description: 'The length of the period for the subscription renewal term.
          Default is `0`.

          '
        format: int64
        type: integer
      renewalTermPeriodType:
        description: |2

          The period type for the subscription renewal term.

          This field is used with the `renewalTerm` field to specify the subscription renewal term.

          Values are:

          * `Month` (default)
          * `Year`
          * `Day`
          * `Week`
        type: string
      targetDate:
        description: |
          Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.

          **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later. To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-reference/#section/API-Versions) for more information.
        format: date
        type: string
      termStartDate:
        description: "Date the subscription term begins, as yyyy-mm-dd. If this is\
          \ a renewal subscription, this date is different from the subscription start\
          \ date. \n"
        format: date
        type: string
      termType:
        description: 'Possible values are: `TERMED`, `EVERGREEN`.

          '
        type: string
      update:
        description: 'Container for updating one or more rate plans.

          '
        items:
          $ref: '#/definitions/PUTSrpUpdateType'
        type: array
    type: object
  PUT_BasicSummaryJournalEntryType:
    example:
      cf_issueNumberc: '1000001'
      journalEntryItems:
      - accountingCodeName: Accounts Receivable
        cf_phasesc: Phase 1
        type: Credit
      - accountingCodeName: ''
        cf_phases__c: Phase 1
        type: Debit
      notes: Transfer to accounting system
      transferredToAccounting: 'Yes'
    properties:
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
      journalEntryItems:
        description: 'Key name that represents the list of journal entry items.

          '
        items:
          $ref: '#/definitions/PUTJournalEntryItemType'
        type: array
      notes:
        description: |
          Additional information about this record.

          ***Character limit:*** 2,000
        type: string
      transferredToAccounting:
        description: "Status shows whether the journal entry has been transferred\
          \ to an accounting system. The possible values are `No`, `Processing`, `Yes`,\
          \ `Error`, `Ignore`.\n  \nThis field cannot be changed after the summary\
          \ journal entry has been canceled.\n  \n**Note:** The Zuora Finance ***Override\
          \ Transferred to Accounting*** permission is required to change `transferredToAccounting`\
          \ from `Yes` to any other value.\n"
        type: string
    type: object
  ProxyActionamendRequest:
    example:
      requests:
      - AmendOptions:
          GenerateInvoice: false
          InvoiceProcessingOptions: {}
          ProcessPayments: false
        Amendments:
        - ContractEffectiveDate: '2016-10-20'
          CurrentTerm: 3
          CurrentTermPeriodType: Day
          CustomerAcceptanceDate: '2016-10-20'
          Description: AM7j4i2rsxb9
          EffectiveDate: '2016-10-20'
          Name: AM7j4i2rsxb9
          RatePlanData:
            RatePlan:
              ProductRatePlanId: 2c93808457d787030157e02e250e1e9a
            RatePlanChargeData:
            - RatePlanCharge:
                ProductRatePlanChargeId: 2c93808457d787030157e02e26701e9d
          RenewalSetting: RENEW_TO_EVERGREEN
          RenewalTerm: 2
          RenewalTermPeriodType: Day
          ServiceActivationDate: '2016-10-20'
          Status: Completed
          SubscriptionId: 2c93808457d787030157e02e23911e8d
          TermStartDate: '2016-10-20'
          TermType: TERMED
          Type: NewProduct
        PreviewOptions:
          EnablePreviewMode: false
    properties:
      requests:
        description: ''
        items:
          $ref: '#/definitions/AmendRequest'
        type: array
    type: object
  ProxyActionamendResponse:
    properties:
      results:
        description: ''
        items:
          $ref: '#/definitions/AmendResult'
        type: array
    type: object
  ProxyActioncreateRequest:
    example:
      objects:
      - AccountingCode: Accounts Receivable
        AdjustmentDate: '2016-10-20'
        Amount: 1.2
        Comment: this is comments
        InvoiceId: 2c93808457d787030157e03248c75142
        InvoiceNumber: INV00000001
        ReferenceId: refid-1476935174845
        SourceId: 2c93808457d787030157e03248c95144
        SourceType: InvoiceDetail
        Type: Credit
      type: InvoiceItemAdjustment
    properties:
      objects:
        description: ''
        items:
          $ref: '#/definitions/zObject'
        type: array
      type:
        description: ''
        type: string
    type: object
  ProxyActioncreateResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/SaveResult'
        type: array
    type: object
  ProxyActiondeleteRequest:
    example:
      ids:
      - 2c93808457d787030157e031fcd34e19
      type: ProductRatePlanCharge
    properties:
      ids:
        description: 'A list of one or more IDs for the objects you want to delete.

          '
        items:
          type: string
        type: array
      type:
        description: 'The type of object that you are deleting.

          '
        type: string
    type: object
  ProxyActiondeleteResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/DeleteResult'
        type: array
    type: object
  ProxyActionexecuteRequest:
    example:
      ids:
      - 2c93808457d787030157e031d5844c53
      synchronous: false
      type: InvoiceSplit
    properties:
      ids:
        description: 'The ID of the object. **Values:** a valid InvoiceSplit object
          ID.

          '
        items:
          type: string
        type: array
      synchronous:
        description: 'Indicates if the call is synchronous or asynchronous. **Values:**
          `false`

          '
        type: boolean
      type:
        description: 'Specifies the type of executed item. **Values:** `invoicesplit`

          '
        type: string
    type: object
  ProxyActionexecuteResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/ExecuteResult'
        type: array
    type: object
  ProxyActiongenerateRequest:
    example:
      objects:
      - AccountId: 2c93808457d787030157e0306be53a75
        InvoiceDate: '2016-10-20'
        TargetDate: '2016-10-20'
      type: Invoice
    properties:
      objects:
        description: ''
        items:
          $ref: '#/definitions/zObject'
        type: array
      type:
        description: ''
        type: string
    type: object
  ProxyActiongenerateResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/SaveResult'
        type: array
    type: object
  ProxyActionqueryMoreRequest:
    properties:
      queryLocator:
        description: ''
        type: string
    type: object
  ProxyActionqueryMoreResponse:
    properties:
      result:
        $ref: '#/definitions/QueryResult'
    type: object
  ProxyActionqueryRequest:
    example:
      queryString: select AccountId, AccountingCode, AdjustmentDate, AdjustmentNumber,
        Amount, CancelledById, CancelledDate, Comment, CreatedById, CreatedDate, InvoiceId,
        InvoiceItemName, InvoiceNumber, ReferenceId, ServiceEndDate, ServiceStartDate,
        SourceId, SourceType, Status, TransferredToAccounting, Type, UpdatedById,
        UpdatedDate, ReasonCode from InvoiceItemAdjustment where Id = '2c93808457d787030157e0324aea5158'
    properties:
      queryString:
        description: 'ZOQL expression that specifies the object to query, the fields
          to retrieve, and any filters.

          '
        type: string
    type: object
  ProxyActionqueryResponse:
    properties:
      result:
        $ref: '#/definitions/QueryResult'
    type: object
  ProxyActionsubscribeRequest:
    example:
      subscribes:
      - Account:
          AccountNumber: AN_1476935174239
          AutoPay: false
          Batch: Batch1
          BillCycleDay: 1
          Currency: USD
          Name: AC_1476935174239
          PaymentTerm: Due Upon Receipt
          Status: Draft
        BillToContact:
          Address1: 312 2nd Ave W
          City: Seattle
          Country: United States
          FirstName: FN1476935174239
          LastName: LN1476935174239
          PersonalEmail: person@test.com
          PostalCode: '98119'
          State: Washington
          WorkEmail: work@test.com
        PaymentMethod:
          CreditCardAddress1: 312 2nd Ave W
          CreditCardCity: Seattle
          CreditCardCountry: United States
          CreditCardExpirationMonth: 12
          CreditCardExpirationYear: 2020
          CreditCardHolderName: Somebody
          CreditCardNumber: '4111111111111111'
          CreditCardPostalCode: '98119'
          CreditCardState: Washington
          CreditCardType: Visa
          Type: CreditCard
        PreviewOptions:
          EnablePreviewMode: false
          NumberOfPeriods: 3
        SubscribeOptions:
          GenerateInvoice: true
          ProcessPayments: false
          SubscribeInvoiceProcessingOptions: {}
        SubscriptionData:
          RatePlanData:
          - RatePlan:
              ProductRatePlanId: 2c93808457d787030157e0324735512b
            RatePlanChargeData:
            - RatePlanCharge:
                ProductRatePlanChargeId: 2c93808457d787030157e03247c2512d
          Subscription:
            AutoRenew: false
            ContractAcceptanceDate: '2016-10-20'
            ContractEffectiveDate: '2016-10-20'
            InitialTerm: 12
            Name: S_1476935174239
            Notes: this is notes
            RenewalTerm: 12
            ServiceActivationDate: '2016-10-20'
            TermStartDate: '2016-10-20'
            TermType: TERMED
    properties:
      subscribes:
        description: ''
        items:
          $ref: '#/definitions/SubscribeRequest'
        type: array
    type: object
  ProxyActionsubscribeResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/SubscribeResult'
        type: array
    type: object
  ProxyActionupdateRequest:
    example:
      objects:
      - AccountNumber: AN_1476935163869
        AutoPay: true
        Batch: Batch1
        BillCycleDay: 1
        BillToId: 2c93808457d787030157e03220684fac
        CrmId: crmid
        Currency: USD
        DefaultPaymentMethodId: 2c93808457d787030157e03220ec4fad
        Id: 2c93808457d787030157e0321fdf4fab
        InvoiceTemplateId: 2c93808457d787030157e03208864f97
        Name: AC_1476935163869
        Notes: this is notes
        PaymentTerm: Due Upon Receipt
        SoldToId: 2c93808457d787030157e03220684fac
        Status: Active
      type: Account
    properties:
      objects:
        description: ''
        items:
          $ref: '#/definitions/zObject_update'
        type: array
    type: object
  ProxyActionupdateResponse:
    properties:
      result:
        description: ''
        items:
          $ref: '#/definitions/SaveResult'
        type: array
    type: object
  ProxyBadRequestResponse:
    properties:
      Errors:
        items:
          properties:
            Code:
              description: ''
              type: string
            Message:
              description: ''
              type: string
          type: object
        type: array
      Success:
        description: ''
        type: boolean
    type: object
  ProxyCreateAccount:
    example:
      AccountNumber: AN_1476935163869
      AutoPay: false
      Batch: Batch1
      BillCycleDay: 1
      CrmId: crmid
      Currency: USD
      InvoiceTemplateId: 2c93808457d787030157e03208864f97
      Name: AC_1476935163869
      Notes: this is notes
      PaymentTerm: Due Upon Receipt
      Status: Draft
    properties:
      AccountNumber:
        description: |
          Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:

          - null to auto-generate
          - a string of 50 characters or fewer that doesn't begin with the default account number prefix
        type: string
      AdditionalEmailAddresses:
        description: 'List of additional email addresses to receive emailed invoices.
          **Character limit**: 120 **Values**: comma-separated list of email addresses '
        type: string
      AllowInvoiceEdit:
        description: " Indicates if associated invoices can be edited.\n**Character\
          \ limit**: 5 **Values**: `true`, `false` (default if left null) "
        type: boolean
      AutoPay:
        description: " Indicates if future payments are automatically collected when\
          \ they're due during a Payment Run.\n**Character limit**: 5 **Values**:\
          \ `true`, `false` (default) "
        type: boolean
      Balance:
        description: 'Current outstanding balance for the account. **Character limit**:
          16 **Values**: automatically generated '
        format: double
        type: number
      Batch:
        description: " Organizes your customer accounts into groups to optimize your\
          \ billing and payment operations. Required if use the Subscribe call\n**Character\
          \ limit**: 20 **Values**:any system-defined batch (`Batch1` - `Batch50 `or\
          \ by name). "
        type: string
      BcdSettingOption:
        description: 'Billing cycle day setting option. **Character limit**: 9 **Values**:
          `AutoSet`, `ManualSet` '
        type: string
      BillCycleDay:
        description: 'Billing cycle day (BCD) on which bill runs generate invoices
          for the account. **Character limit**: 2 **Values**: any activated system-defined
          bill cycle day (`1` - `31`) '
        format: int32
        type: integer
      BillToId:
        description: 'ID of the person to bill for the account. **Character limit**:
          32 **Values**: a valid contact ID for the account '
        type: string
      CommunicationProfileId:
        description: 'Associates the account with a specified communication profile.
          **Character limit**: 32 **Values**: a valid communication profile ID '
        type: string
      CreditBalance:
        description: 'Total credit balance for the account. **Character limit**: 16
          **Values**: automatically generated '
        format: double
        type: number
      CrmId:
        description: 'CRM account ID for the account. A CRM is a customer relationship
          management system, such as Salesforce.com. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      Currency:
        description: ' Currency that the customer is billed in. '
        type: string
      CustomerServiceRepName:
        description: 'Name of the account''s customer service representative, if applicable.
          **Character limit**: 50 **Values**: a string of 50 characters or fewer '
        type: string
      DefaultPaymentMethodId:
        description: 'ID of the default payment method for the account. This field
          is required if the AutoPay field is set to `true`. **Character limit**:
          32 **Values**: a valid ID for an existing payment method '
        type: string
      InvoiceDeliveryPrefsEmail:
        description: 'Indicates if the customer wants to receive invoices through
          email.  **Character limit**: 5 **Values**: `true`, `false` (default if left
          null) '
        type: boolean
      InvoiceDeliveryPrefsPrint:
        description: 'Indicates if the customer wants to receive printed invoices,
          such as through postal mail. **Character limit**: 5 **Values**: `true`,
          `false` (default if left null) '
        type: boolean
      InvoiceTemplateId:
        description: 'The ID of the invoice template. Each customer account can use
          a specific invoice template for invoice generation. **Character limit**:
          32 **Values**: a valid template ID configured in Zuora Billing Settings '
        type: string
      Name:
        description: 'Name of the account as displayed in the Zuora UI. **Character
          limit**: 255 **Values**: a string of 255 characters or fewer '
        type: string
      Notes:
        description: ' Comments about the account. **Character limit**: 65,535 **Values**:
          a string of 65,535 characters '
        type: string
      ParentId:
        description: 'Identifier of the parent customer account for this Account object.
          Use this field if you have customer hierarchy enabled. **Character limit**:
          32 **Values**: a valid account ID '
        type: string
      PaymentGateway:
        description: |
          Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:

          - a valid configured gateway name
          - Null to inherit the default value set in Zuora Payment Settings
        type: string
      PaymentTerm:
        description: 'Indicates when the customer pays for subscriptions. **Character
          limit**: 100 **Values**: a valid, active payment term defined in the web-based
          UI administrative settings '
        type: string
      PurchaseOrderNumber:
        description: 'The number of the purchase order associated with this account.
          Purchase order information generally comes from customers. **Character limit**:
          100 **Values**: a string of 100 characters or fewer '
        type: string
      SalesRepName:
        description: 'The name of the sales representative associated with this account,
          if applicable. **Character limit**: 50 **Values**: a string of 50 characters
          or fewer '
        type: string
      SoldToId:
        description: 'ID of the person who bought the subscription associated with
          the account. **Character limit**: 32 **Values**: a valid contact ID for
          the account '
        type: string
      Status:
        description: |
          Status of the account in the system. **Character limit**: 8 **Values**: one of the following:

          - leave null if you're using The Subscribe call
          - if you're using Create:
          - `Draft`
          - `Active`
          - `Canceled`
        type: string
      TaxCompanyCode:
        description: " Unique code that identifies a company account in Avalara. Use\
          \ this field to calculate taxes based on origin and sold-to addresses in\
          \ Avalara.\nThis feature is in **Limited Availability**. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
          \n**Character limit**: 50 **Values**: a valid company code "
        type: string
      TaxExemptCertificateID:
        description: 'ID of your customer''s tax exemption certificate. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptCertificateType:
        description: 'Type of the tax exemption certificate that your customer holds.  **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptDescription:
        description: 'Description of the tax exemption certificate that your customer
          holds. **Character limit**: 500 **Values**: a string of 500 characters or
          fewer '
        type: string
      TaxExemptEffectiveDate:
        description: 'Date when the the customer''s tax exemption starts. **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptExpirationDate:
        description: 'Date when the customer''s tax exemption certificate expires  **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptIssuingJurisdiction:
        description: 'Indicates the jurisdiction in which the customer''s tax exemption
          certificate was issued. **Character limit**: 32 **Values**: a string of
          32 characters or fewer '
        type: string
      TaxExemptStatus:
        description: |2
           Status of the account's tax exemption. Required if you use Zuora Tax.
          **Character limit**: 19 **Values**: one of the following:

          - `Yes`
          - `No`
          - `PendingVerification`
        type: string
      TotalInvoiceBalance:
        description: 'Total balance of the account''s invoices. **Character limit**:
          16 **Values**: a valid currency value '
        format: double
        type: number
      VATId:
        description: " EU Value Added Tax ID.\nThis feature is in **Limited Availability**.\
          \ If you wish to have access to the feature, submit a request at [Zuora\
          \ Global Support](http://support.zuora.com/).\n\n**Character limit**: 25\
          \ **Values**: a valid Value Added Tax ID "
        type: string
    required:
    - Balance
    - BcdSettingOption
    - BillCycleDay
    - CreditBalance
    - Currency
    - Name
    - Status
    - TotalInvoiceBalance
    type: object
  ProxyCreateAmendment:
    example:
      ContractEffectiveDate: '2016-10-20'
      CustomerAcceptanceDate: '2016-10-20'
      Description: AMpqvyqhhzpg
      EffectiveDate: '2016-10-20'
      Name: AMpqvyqhhzpg
      RatePlanData:
        RatePlan:
          ProductRatePlanId: 2c93808457d787030157e02ec2202584
        RatePlanChargeData:
        - RatePlanCharge:
            ProductRatePlanChargeId: 2c93808457d787030157e02ec34d2587
      ServiceActivationDate: '2016-10-20'
      SubscriptionId: 2c93808457d787030157e02ec3f9258e
      Type: NewProduct
    properties:
      AutoRenew:
        description: " Determines whether the subscription is automatically renewed,\
          \ or whether it expires at the end of the term and needs to be manually\
          \ renewed. **Required:** For amendment of type TermsAndConditions when changing\
          \ the automatic renewal status of a subscription.\n**Values**: true, false "
        type: boolean
      ContractEffectiveDate:
        description: " The date when the amendment's changes become effective for\
          \ billing purposes.\n**Version notes**: -- "
        format: date
        type: string
      CurrentTerm:
        description: |2
           The length of the period for the current subscription term. This field can be updated when Status is `Draft`.
          **Required**: Only if the value of the Type field is set to `TermsAndConditions` and TermType is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.
          **Character limit**: **Values**: a valid number
        format: int64
        type: integer
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term. **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the CurrentTerm field to specify the current subscription term.
        type: string
      CustomerAcceptanceDate:
        description: " The date when the customer accepts the amendment's changes\
          \ to the subscription. **Required**: Only if the value of the Status field\
          \ is set to PendingAcceptance.\n**Version notes**: -- "
        format: date
        type: string
      Description:
        description: " A description of the amendment.\n**Character limit**: 500 **Values**:\
          \ maximum 500 characters "
        type: string
      EffectiveDate:
        description: " The date when the amendment's changes take effective. This\
          \ field validates that the amendment's changes are within valid ranges of\
          \ products and product rate plans.\n**Required**: For the cancellation amendments.\
          \ Optional for other types of amendments.\n**Version notes**: -- "
        format: date
        type: string
      Name:
        description: " The name of the amendment.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      RenewalSetting:
        description: " Specifies whether a termed subscription will remain termed\
          \ or change to evergreen when it is renewed.\n**Required**: If TermType\
          \ is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN "
        type: string
      RenewalTerm:
        description: " The term of renewal for the amended subscription. This field\
          \ can be updated when Status is `Draft`.\n**Required**: Only if the value\
          \ of the Type field is set to `TermsAndConditions`.\n**Character limit**:\
          \ **Values:** a valid number "
        format: int64
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term. This field can be updated when Status is `Draft`.
          **Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      ServiceActivationDate:
        description: " The date when service is activated.\n**Required**: Only if\
          \ the value of the Status field is set to PendingActivation.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      SpecificUpdateDate:
        description: |2
           The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.
          **Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.
        format: date
        type: string
      Status:
        description: |2
           The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:

          - Draft (default, if left null)
          - Pending Activation
          - Pending Acceptance
          - Completed
        type: string
      SubscriptionId:
        description: " The ID of the subscription that the amendment changes.\n**Character\
          \ limit**: 32 **Values**: a valid subscription ID "
        type: string
      TermStartDate:
        description: " The date when the new terms and conditions take effect.\n**Required**:\
          \ Only if the value of the Type field is set to TermsAndConditions.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      TermType:
        description: " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A\
          \ TERMED subscription has an expiration date, and must be manually renewed.\n\
          - An EVERGREEN subscription doesn't have an expiration date, and must be\
          \ manually ended.\n\n**Required**: Only when as part of an amendment of\
          \ type TermsAndConditions &#65279;to change the term type of a subscription.\
          \ Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN "
        type: string
      Type:
        description: |2
           The type of amendment.
          **Character limit**: 18 **Values**: one of the following:

          - Cancellation
          - NewProduct
          - OwnerTransfer
          - RemoveProduct
          - Renewal
          - UpdateProduct
          - TermsAndConditions
          - SuspendSubscription (This value is in **Limited Availability**.)
          - ResumeSubscription (This value is in **Limited Availability**.)
        type: string
    required:
    - RenewalSetting
    type: object
  ProxyCreateBillRun:
    example:
      AutoEmail: 'false'
      AutoPost: 'false'
      AutoRenewal: 'false'
      Batch: Batch1
      BillCycleDay: '2'
      ChargeTypeToExclued: OneTime, Usage
      InvoiceDate: '2017-02-04'
      NoEmailForZeroAmountInvoice: 'false'
      TargetDate: '2017-02-04'
    properties:
      AccountId:
        description: |
          ID of the account used for single account bill run.

          This field is only used for creating ad hoc bill run for a single customer account.

          **Character limit:** 32
        type: string
      AutoEmail:
        default: false
        description: |
          Determines whether to auto send email or not by this bill run once the bill run completes.

          **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
        type: boolean
      AutoPost:
        default: false
        description: |
          Determines whether to auto post bill run or not once the bill run completes.

          **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
        type: boolean
      AutoRenewal:
        default: false
        description: 'Determines whether to auto renew subscription or not by this
          bill run once the bill run completes.

          '
        type: boolean
      Batch:
        description: "Batch of accounts for this bill run. \n\nThis field is only\
          \ used for creating ad hoc bill run for multiple customer accounts.\n\n\
          **Character limit:** 20\n\n**Values:** AllBatches or Batchn where n is a\
          \ number between 1 and 50.\n"
        type: string
      BillCycleDay:
        description: |
          The day of the bill cycle.

          This field is only used for creating ad hoc bill run for multiple customer accounts.

          **Character limit:** 32

          **Values:** `AllBillCycleDays` or 01 - 31.
        type: string
      ChargeTypeToExclude:
        description: "Charge type or types to be excluded, separated with comma.\n\
          \n**Possible Values:** `OneTime`, `Recurring`, `Usage`, or a combination\
          \ of these values. \n\n**Character limit:** 50\n"
        type: string
      InvoiceDate:
        description: |
          Invoice date for this bill run.

          **Character limit:** 29
        format: date
        type: string
      NoEmailForZeroAmountInvoice:
        default: false
        description: 'Determines whether to suppress email for invoices with zero
          total or not for this bill run once the bill run completes. (Do not email
          invoices with 0 Invoice Total).

          '
        type: boolean
      TargetDate:
        description: |
          Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.

          **Character limit:** 29
        format: date
        type: string
    required:
    - InvoiceDate
    - TargetDate
    type: object
  ProxyCreateContact:
    example:
      AccountId: 2c93808457d787030157e0321fdf4fab
      Address1: 312 2nd Ave W
      City: Seattle
      Country: United States
      Description: desc
      Fax: '123456'
      FirstName: FN1476935164020
      HomePhone: '86123456789'
      LastName: LN1476935164020
      MobilePhone: '8613312345678'
      NickName: this is nick name
      OtherPhone: '11111111111111111'
      OtherPhoneType: Work
      PersonalEmail: person@test.com
      PostalCode: '98119'
      State: Washington
      TaxRegion: CA
      WorkEmail: work@test.com
    properties:
      AccountId:
        description: " The Zuora account ID associated with this contact. This field\
          \ is not required when you use the Subscribe call. This field is required\
          \ for all other calls.\n**Character limit: **32 **Values: **a valid account\
          \ ID "
        type: string
      Address1:
        description: " The first line of the contact's address, which is often a street\
          \ address or business name.\n**Character limit**: 255 **Values**: a string\
          \ of 255 characters or fewer "
        type: string
      Address2:
        description: " The second line of the contact's address.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      City:
        description: " The city of the contact's address.\n**Character limit**: 40\
          \ **Values: **a string of 40 characters or fewer "
        type: string
      Country:
        description: ' The country of the contact''s address. '
        type: string
      County:
        description: " The country. May optionally be used by Zuora Tax to calculate\
          \ county tax.\n**Character limit**: 32 **Values**: a string of 32 characters\
          \ or fewer "
        type: string
      Description:
        description: " A description for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      Fax:
        description: " The contact's fax number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      FirstName:
        description: " The contact's first name.\n**Character limit**: 100 **Values**:\
          \ a string of the contact's first name "
        type: string
      HomePhone:
        description: " The contact's home phone number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      LastName:
        description: " The contact's last name.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      MobilePhone:
        description: " The contact's mobile phone number.\n**Character limit**: 40\
          \ **Values**: a string of 40 characters or fewer "
        type: string
      NickName:
        description: " A nickname for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      OtherPhone:
        description: " An additional phone number for the contact.\n**Character limit**:\
          \ 40 **Values**: a string of 40 characters or fewer "
        type: string
      OtherPhoneType:
        description: 'The type of the `OtherPhone`. **Character limit**: 20 **Values**:
          `Work`, `Mobile`, `Home`, `Other` '
        type: string
      PersonalEmail:
        description: " The contact's personal email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      PostalCode:
        description: " The zip code for the contact's address.\n**Character limit:**\
          \ 20 **Values: **a string of 20 characters or fewer "
        type: string
      State:
        description: ' The state or province of the contact''s address. '
        type: string
      TaxRegion:
        description: 'If using Zuora Tax rules '
        type: string
      WorkEmail:
        description: " The contact's business email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      WorkPhone:
        description: " The contact's business phone number.\n**Character limit**:\
          \ 40 **notes**: -- **Values**: a string of 40 characters or fewer "
        type: string
    required:
    - AccountId
    - FirstName
    - LastName
    type: object
  ProxyCreateExport:
    example:
      Format: csv
      Name: test_Export_1476935164445
      Query: select * from account
      Status: Processing
      Zip: true
    properties:
      ConvertToCurrencies:
        description: " The currencies that you want to convert transaction amounts\
          \ into. You can specify any number of currencies. Specify the currencies\
          \ using their Foreign Currency Conversion enabled to use this field.\n**Character\
          \ limit**: **Values**: a list of valid currency codes "
        type: string
      Encrypted:
        description: " Exports a secure version of encrypted data source fields. such\
          \ as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod\
          \ data souce objects.\n**Character limit**: 5 **Values:** true, false "
        type: boolean
      FileId:
        description: " The ID of the file generated by an export query. This fiel\
          \ is automatically generated when an Export object is created. Use this\
          \ file ID when you download the export file.\n**Character limit**: 32 **Values**:\
          \ automatically generated "
        type: string
      Format:
        description: " The format that you want the export file to use.\n**Character\
          \ limit**: 4 **Values**: csv, html "
        type: string
      Name:
        description: " The name of the export.\n**Character limit**: 255 **Values**:\
          \ a string of 255 characters or fewer "
        type: string
      Query:
        description: optional
        type: string
      Size:
        description: " The number of records or rows exported. This field value is\
          \ null until the export status is Completed.\n**Character limit**: **Values**:\
          \ automatically generated "
        format: int32
        type: integer
      Status:
        description: |2
           The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:

          - Pending
          - Processing
          - Completed
          - Canceled
          - Failed
        type: string
      StatusReason:
        description: " The reason for the given status. Use this information to help\
          \ ascertain why an export failed.\n**Character limi**t: 255 **Values**:\
          \ automatically generated "
        type: string
      Zip:
        description: " Indicates if you want the resulting export file to be compressed\
          \ into a zip file.\n**Character limit**: **Values**: true, false (default) "
        type: boolean
    required:
    - Format
    - Query
    - Size
    - Zip
    type: object
  ProxyCreateInvoice:
    example:
      AccountId: 2c93808457d787030157e031d2704c28
      InvoiceDate: '2016-10-20'
      TargetDate: '2016-10-20'
    properties:
      AccountId:
        description: ''
        type: string
      AdjustmentAmount:
        description: ' The amount of the invoice adjustments associated with the invoice.
          **Character limi**t: 16 **Values**: a valid currency amount '
        format: double
        type: number
      Body:
        description: ' Required '
        type: string
      CreditBalanceAdjustmentAmount:
        description: |2+
           The currency amount of the adjustment applied to the customer's credit balance.
          **Character limit**: 16 **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.


        format: double
        type: number
      IncludesOneTime:
        description: " Specifies whether the invoice includes one-time charges. You\
          \ can use this field only with the Generate call for the Invoice object.\n\
          **Character limit**: 5 **Values**: automatically generated from one of the\
          \ following: `True` (default), `False` "
        type: boolean
      IncludesRecurring:
        description: " Specifies whether the invoice includes recurring charges. You\
          \ can use this field only with the Generate call for the Invoice object.\n\
          **Character limit**: 5 **Values**: automatically generated from one of the\
          \ following: `True` (default), `False` "
        type: boolean
      IncludesUsage:
        description: " Specifies whether the invoice includes usage charges. You can\
          \ use this field only with the Generate call for the Invoice object.\n**Character\
          \ limit**: 5 **Values**: automatically generated from one of the following:\
          \ `True `(default), `False` "
        type: boolean
      InvoiceDate:
        description: " Specifies the date on which to generate the invoice.\n**Character\
          \ limit**: 29 **Version notes**: -- "
        format: date
        type: string
      PaymentAmount:
        description: " The amount of payments applied to the invoice.\n**Character\
          \ limit**: 16 **Value**s: automatically generated "
        format: double
        type: number
      RefundAmount:
        description: " Specifies the amount of a refund that was applied against an\
          \ earlier payment on the invoice.\n**Character limit**: 16 **Values**: automatically\
          \ generated "
        format: double
        type: number
      TargetDate:
        description: " This date is used to determine which charges are to be billed.\
          \ All charges that are to be billed on this date or prior will be included\
          \ in this bill run.\n**Character limit**: 29 **Version notes**: -- "
        format: date
        type: string
      TaxAmount:
        description: " The total amount of the taxes applied to the invoice.\n**Character\
          \ limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      TaxExemptAmount:
        description: " The total amount of the invoice that is exempt from taxation.\n\
          **Character limit**: 16 **Values**: automatically generated "
        format: double
        type: number
    required:
    - AccountId
    - AdjustmentAmount
    - Body
    - CreditBalanceAdjustmentAmount
    - PaymentAmount
    - RefundAmount
    - TaxAmount
    - TaxExemptAmount
    type: object
  ProxyCreateInvoiceAdjustment:
    example:
      AccountingCode: Accounts Receivable
      AdjustmentDate: '2016-10-20'
      Amount: 1.2
      Comments: this is comments
      InvoiceId: 2c93808457d787030157e030d10f3f64
      InvoiceNumber: INV00000001
      ReferenceId: refid-1476935078657
      Type: Credit
    properties:
      AccountId:
        description: " The ID of the account that owns the invoice.\n**Character limit**:\
          \ 32 **Values**: inherited from Account.ID for the invoice owner "
        type: string
      AccountingCode:
        description: 'The accounting code for the invoice adjustment. '
        type: string
      AdjustmentDate:
        description: " The date when the invoice adjustment is applied. This date\
          \ must be the same as the invoice's date or later.\n**Character limit**:\
          \ 29 **Values**: Leave null to automatically generate the current date "
        format: date
        type: string
      AdjustmentNumber:
        description: " A unique string to identify an individual invoice adjustment.\n\
          **Character limit**: 255 **Values**: automatically generated "
        type: string
      Amount:
        description: " The amount of the invoice adjustment.\n**Character limit**:\
          \ 16 **Values**: a valid currency amount "
        format: double
        type: number
      Comments:
        description: " Use this field to record comments about the invoice adjustment.\n\
          **Character limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      CustomerName:
        description: " The name of the account that owns the associated invoice.\n\
          **Character limit**: 50 **Values**: inherited from Account.Name "
        type: string
      CustomerNumber:
        description: " The unique account number of the customer's account.\n**Character\
          \ limit**: 70 **Values**: inherited from Account.AccountNumber "
        type: string
      ImpactAmount:
        description: " The amount that changes the balance of the associated invoice.\n\
          **Character limit**: 16 **Values**: automatically calculated "
        format: double
        type: number
      InvoiceId:
        description: " The ID of the invoice associated with the adjustment. This\
          \ field is required if you don't specify a value for the `InvoiceNumber`\
          \ field.\n**Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      InvoiceNumber:
        description: " The unique identification number for the associated invoice.\
          \ This field is required if you don't specify a value for the `InvoiceId`\
          \ field.\n**Character limit**: 32 **Values**: a valid invoice number "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      ReferenceId:
        description: " A code to reference an object external to Zuora. For example,\
          \ you can use this field to reference a case number in an external system.\n\
          **Character limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      Status:
        description: " The status of the invoice adjustment. This field is required\
          \ in the Query call, but is automatically generated in other calls.\n**Character\
          \ limit**: 9 **Values**: `Canceled`, `Processed` "
        type: string
      Type:
        description: " Indicates whether the adjustment credits or debits the invoice\
          \ amount.\n**Character limit**: 6 **Values**: `Credit`, `Charge` "
        type: string
    required:
    - AccountId
    - AdjustmentNumber
    - Amount
    - CustomerName
    - CustomerNumber
    - ImpactAmount
    - Status
    - Type
    type: object
  ProxyCreateInvoicePayment:
    example:
      Amount: 10
      InvoiceId: 2c93808457d787030157e02deadb1b6d
      PaymentId: 2c93808457d787030157e02de5fc1b57
    properties:
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency amount "
        format: double
        type: number
      InvoiceId:
        description: " The unique ID of the invoice associated with this invoice payment.\n\
          **Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      PaymentId:
        description: " The unique ID of the payment associated with this invoice payment.\n\
          **Character limit**: 32 **V****alues**: a valid payment ID "
        type: string
    required:
    - Amount
    - InvoiceId
    type: object
  ProxyCreateOrModifyResponse:
    properties:
      Id:
        description: ''
        type: string
      Success:
        description: ''
        type: boolean
    type: object
  ProxyCreatePayment:
    example:
      AccountId: 2c93808457d787030157e03190e748ea
      Amount: 2
      AppliedCreditBalanceAmount: 0
      AppliedInvoiceAmount: 2
      EffectiveDate: '2016-10-20'
      InvoiceId: 2c93808457d787030157e03195604902
      PaymentMethodId: 2c93808457d787030157e03196d1490e
      Status: Processed
      Type: Electronic
    properties:
      AccountId:
        description: " The unique account ID for the customer that the payment is\
          \ for.\n**Character limit**: 32 **Values**: a valid account ID "
        type: string
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency value "
        format: double
        type: number
      AppliedCreditBalanceAmount:
        description: " The amount of the payment to apply to a credit balance. This\
          \ field is required in the Create call when the `AppliedInvoiceAmount` field\
          \ value is null.\n**Character limit**: 16 **Values**: a valid currency value "
        format: double
        type: number
      AuthTransactionId:
        description: " The authorization transaction ID from the payment gateway.\
          \ Use this field for electronic payments, such as credit cards.\n**Character\
          \ limit**: 50 **Values**: a string of 50 characters or fewer "
        type: string
      Comment:
        description: " Additional information related to the payment.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      EffectiveDate:
        description: " The date when the payment takes effect, in `yyyy-mm-dd` format.\n\
          **Character limit**: 29 "
        format: date
        type: string
      Gateway:
        description: ' Name of the gateway instance that processes the payment. When
          creating a Payment, this must be a valid gateway instance name and this
          gateway must support the specific payment method. If not specified, the
          default gateway on the Account will be used. '
        type: string
      GatewayOrderId:
        description: " A merchant-specified natural key value that can be passed to\
          \ the electronic payment gateway when a payment is created. If not specified,\
          \ the PaymentNumber will be passed in instead.\n**Character limit**: 70\
          \ **Values**: a string of 70 characters or fewer "
        type: string
      GatewayResponse:
        description: " The message returned from the payment gateway for the payment.\
          \ This message is gateway-dependent.\n**Character limit**: 500 **Values**:\
          \ automatically generated "
        type: string
      GatewayResponseCode:
        description: " The code returned from the payment gateway for the payment.\
          \ This code is gateway-dependent.\n**Character limit**: 20 **Values**: automatically\
          \ generated "
        type: string
      GatewayState:
        description: " The status of the payment in the gateway; use for reconciliation.\n\
          **Character limit**: 19 **Values**: automatically generated "
        type: string
      PaymentMethodId:
        description: " The ID of the payment method used for the payment. Required\
          \ for Create.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      PaymentNumber:
        description: " The unique identification number of a payment. For example:\
          \ P-00000028.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      ReferenceId:
        description: " The transaction ID returned by the payment gateway. Use this\
          \ field to reconcile payments between your gateway and Z-Payments.\n**Character\
          \ limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      SoftDescriptor:
        description: ' A payment gateway-specific field that maps to Zuora for the
          gateways, Orbital, Vantiv and Verifi. **Character limit**: 35 **Values**:
          `[SDMerchantName]*[SDProductionInfo]` '
        type: string
      SoftDescriptorPhone:
        description: ' A payment gateway-specific field that maps to Zuora for the
          gateways, Orbital, Vantiv and Verifi. **Character limit**: 20 **Values**:
          `[SDPhone]` '
        type: string
      Status:
        description: " The status of the payment in Zuora. The value depends on the\
          \ type of payment.\n**Character limit**: 11 **Values**: one of the following:\n\
          \n-  Electronic payments: `Processed`, `Error`, `Voided`\n\n-  External\
          \ payments: `Processed`, `Canceled`\n\n* Update of status can change value\
          \ from `Processed` to `Canceled` when the payment type is external. "
        type: string
      Type:
        description: " Indicates if the payment is external or electronic.\n**Character\
          \ limit**: 10 **Values**: `External`, `Electronic` "
        type: string
    required:
    - AccountId
    - Amount
    - AppliedCreditBalanceAmount
    - EffectiveDate
    - GatewayResponse
    - GatewayResponseCode
    - GatewayState
    - PaymentNumber
    - Status
    - Type
    type: object
  ProxyCreatePaymentMethod:
    example:
      AccountId: 2c93808457d787030157e0321fdf4fab
      CreditCardAddress1: 312 2nd Ave W
      CreditCardCity: Seattle
      CreditCardCountry: United States
      CreditCardExpirationMonth: 12
      CreditCardExpirationYear: 2020
      CreditCardHolderName: Somebody
      CreditCardNumber: '4111111111111111'
      CreditCardPostalCode: '98119'
      CreditCardState: Washington
      CreditCardType: Visa
      MaxConsecutivePaymentFailures: 10
      PaymentRetryWindow: 3
      Type: CreditCard
    properties:
      AccountId:
        description: ' The ID of the customer account associated with this payment
          method. This field is not required for the account ID. '
        type: string
      AchAbaCode:
        description: " The nine-digit routing number or ABA number used by banks.\
          \ Use this field for ACH payment methods.\n**Character limit**: 9 **Values**:\
          \ a string of 9 characters or fewer "
        type: string
      AchAccountName:
        description: " The name of the account holder, which can be either a person\
          \ or a company. Use this field for ACH payment methods.\n**Character limit**:\
          \ 70 **Values**: a string of 70 characters or fewer "
        type: string
      AchAccountType:
        description: |2
           The type of bank account associated with the ACH payment. Use this field for ACH payment methods.
          **Character limit**: 16 **Values**:

          - `BusinessChecking`
          - `Checking`
          - `Saving`
        type: string
      AchAddress1:
        description: " Line 1 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchAddress2:
        description: " Line 2 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchBankName:
        description: " The name of the bank where the ACH payment account is held.\
          \ Use this field for ACH payment methods.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      BankBranchCode:
        description: " The branch code of the bank used for direct debit. Use this\
          \ field for direct debit payment methods.\n**Character limit**: 10 **Values**:\
          \  string of 10 characters or fewer "
        type: string
      BankCheckDigit:
        description: 'The check digit in the international bank account number, which
          confirms the validity of the account. Use this field for direct debit payment
          methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer '
        type: string
      BankCity:
        description: " The city of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:70 **Values**:  string of\
          \ 70 characters or fewer "
        type: string
      BankCode:
        description: " The sort code or number that identifies the bank. This is also\
          \ known as the sort code. This field is required for direct debit payment\
          \ methods.\n**Character limit**: 18 **Values**:  string of 18 characters\
          \ or fewer "
        type: string
      BankName:
        description: " The name of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      BankPostalCode:
        description: " The zip code or postal code of the direct debit bank. Use this\
          \ field for direct debit payment methods.\n**Character limit**:20 **Values**:\
          \  string of 20 characters or fewer "
        type: string
      BankStreetName:
        description: " The name of the street of the direct debit bank. Use this field\
          \ for direct debit payment methods.\n**Character limit**:60 **Values**:\
          \  string of 60 characters or fewer "
        type: string
      BankStreetNumber:
        description: " The number of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:10 **Values**:  string of\
          \ 10 characters or fewer "
        type: string
      BankTransferAccountName:
        description: " The name on the direct debit bank account. Use this field for\
          \ direct debit payment methods.\n**Character limit**: 60 **Values**:  string\
          \ of 60 characters or fewer "
        type: string
      BankTransferAccountType:
        description: " The type of the customer's bank account. Use this field for\
          \ direct debit payment methods.\n**Character limit**: 11 **Values**: `DirectDebit` "
        type: string
      BankTransferType:
        description: |2
           Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user. Use this field is used for direct debit payment methods.
          **Character limit**: 20 **Values**:

          - `AutomatischIncasso` (NL)
          - `LastschriftDE` (Germany)
          - `LastschriftAT` (Austria)
          - `DemandeDePrelevement` (FR)
          - `DirectDebitUK` (UK)
          - `Domicil` (Belgium)
          - `LastschriftCH` (CH)
          - `RID` (Italy)
          - `OrdenDeDomiciliacion` (Spain)
        type: string
      BusinessIdentificationCode:
        description: " The business identification code for Swiss direct payment methods\
          \ that use the Global Collect payment gateway. Use this field only for direct\
          \ debit payments in Switzerland with Global Collect.\n**Character limit**:\
          \ 11 **Values**: string of 11 characters or fewer "
        type: string
      City:
        description: " The city of the customer's address. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      Country:
        description: " The two-letter country code of the customer's address. Use\
          \ this field for direct debit payment methods.\n**Character limit**: 2 **Values**:\
          \ a valid country code "
        type: string
      CreditCardAddress1:
        description: " The first line of the card holder's address, which is often\
          \ a street address or business name. Use this field for credit card and\
          \ direct debit payment methods.\n**Character limit**: 255 **Values**: a\
          \ string of 255 characters or fewer "
        type: string
      CreditCardAddress2:
        description: " The second line of the card holder's address. Use this field\
          \ for credit card and direct debit payment methods.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreditCardCity:
        description: ' The city of the card holder''s address. Use this field for
          credit card and direct debit payment methods **Character limit**: 40 **Values**:
          a string of 40 characters or fewer '
        type: string
      CreditCardCountry:
        description: ' The country of the card holder''s address. '
        type: string
      CreditCardExpirationMonth:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 2 **Values**: a two-digit number, 01 - 12 "
        format: int32
        type: integer
      CreditCardExpirationYear:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 4 **Values**: a four-digit number "
        format: int32
        type: integer
      CreditCardHolderName:
        description: " The full name of the card holder. Use this field for credit\
          \ card and direct debit payment methods.\n**Character limit**: 50 **Values**:\
          \ a string of 50 characters or fewer "
        type: string
      CreditCardPostalCode:
        description: " The billing address's zip code. This field is required only\
          \ when you define a debit card or credit card payment.\n**Character limit**:\
          \ 20 **Values**: a string of 20 characters or fewer "
        type: string
      CreditCardState:
        description: ' The billing address''s state. Use this field is if the `CreditCardCountry`
          value is either Canada or the US. State names must be spelled in full. '
        type: string
      CreditCardType:
        description: " The type of credit card or debit card. This field is required\
          \ only when you define a debit card or credit card payment.\n**Character\
          \ limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` "
        type: string
      DeviceSessionId:
        description: " The session ID of the user when the `PaymentMethod` was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: "
        type: string
      Email:
        description: " An email address for the payment method in addition to the\
          \ bill to contact email address.\n**Character limit**: 80 **Values**: a\
          \ string of 80 characters or fewer "
        type: string
      ExistingMandate:
        description: " Indicates if the customer has an existing mandate or a new\
          \ mandate. A mandate is a signed authorization for UK and NL customers.\
          \ When you are migrating mandates from another system, be sure to set this\
          \ field correctly. If you indicate that a new mandate is an existing mandate\
          \ or vice-versa, then transactions fail. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No` "
        type: string
      FirstName:
        description: " The customer's first name. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 30 **Values**: a string\
          \ of 30 characters or fewer "
        type: string
      IBAN:
        description: " The International Bank Account Number. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 42 **Values**:\
          \ a string of 42 characters or fewer "
        type: string
      IPAddress:
        description: " The IP address of the user when the payment method was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently PayPal, CyberSource, Authorize.Net, and Verifi support this\
          \ field.\n**Character limit**: 15 **Values**: a string of 15 characters\
          \ or fewer "
        type: string
      LastName:
        description: " The customer's last name. This field is used only for the direct\
          \ debit payment method.\n**Character limit**: 70 **Values**: a string of\
          \ 70 characters or fewer "
        type: string
      LastTransactionDateTime:
        description: " The date of the most recent transaction.\n**Character limit**:\
          \ 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      LastTransactionStatus:
        description: " The status of the most recent transaction.\n**Character limit**:\
          \ 39 **Values**: automatically generated "
        type: string
      MandateCreationDate:
        description: " The date when the mandate was created, in `yyyy-mm-dd` format.\
          \ A mandate is a signed authorization for UK and NL customers. This field\
          \ is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MandateID:
        description: " The ID of the mandate. A mandate is a signed authorization\
          \ for UK and NL customers. This field is used only for the direct debit\
          \ payment method.\n**Character limit**: 36 **Values**: a string of 36 characters\
          \ or fewer "
        type: string
      MandateReceived:
        description: " Indicates if  the mandate was received. A mandate is a signed\
          \ authorization for UK and NL customers. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No `(case-sensitive) "
        type: string
      MandateUpdateDate:
        description: " The date when the mandate was last updated, in `yyyy-mm-dd`\
          \ format. A mandate is a signed authorization for UK and NL customers. This\
          \ field is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MaxConsecutivePaymentFailures:
        description: " Specifies the number of allowable consecutive failures Zuora\
          \ attempts with the payment method before stopping.\n**Values**: a valid\
          \ number "
        type: integer
      PaymentRetryWindow:
        description: " The retry interval setting, which prevents making a payment\
          \ attempt if the last failed attempt was within the last specified number\
          \ of hours. This field is required if the `UseDefaultRetryRule` field value\
          \ is set to `false`.\n**Character limit**: 4 **Values**: a whole number\
          \ between 1 and 1000, exclusive "
        type: integer
      PaypalBaid:
        description: " The PayPal billing agreement ID, which is a contract between\
          \ two PayPal accounts. Typically, the selling party initiates a request\
          \ to create a BAID, and sends it to buying party for acceptance. The seller\
          \ can keep track of the BAID and use it for future charges against the buyer.\
          \ This field is required when defining a PayPal payment method.\n**Character\
          \ limit**: 64 **Values**: a string of 64 characters or fewer "
        type: string
      PaypalEmail:
        description: " The email address associated with the account holder's PayPal\
          \ account or of the PayPal account of the person paying for the service.\
          \ This field is required only when you define a PayPal payment method.\n\
          **Character limit**: 80 **Values**: a string of 80 characters or fewer "
        type: string
      PaypalPreapprovalKey:
        description: " PayPal's Adaptive Payments API key. Zuora does not create this\
          \ key, nor does it call PayPal to generate it. You must use PayPal's Adaptive\
          \ Payments' API to generate this key, and then pass it to Zuora. Zuora uses\
          \ this key to authorize future payments to PayPal's Adaptive Payments API.\
          \ This field is required when you use PayPal Adaptive Payments gateway.\n\
          **Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval\
          \ key "
        type: string
      PaypalType:
        description: " Specifies the PayPal gateway: PayFlow Pro (Express Checkout)\
          \ or Adaptive Payments. This field is required when you use PayPal Adaptive\
          \ Payments or Payflow Pro (Express Checkout) gateways.\n**Character limit**:\
          \ 32 **Values**: `ExpressCheckout`, `AdaptivePayments` "
        type: string
      Phone:
        description: " The phone number that the account holder registered with the\
          \ bank. This field is used for credit card validation when passing to a\
          \ gateway.\n**Character limit**: 40 **Values**: a string of 40 characters\
          \ or fewer "
        type: string
      PostalCode:
        description: " The zip code of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 20 **Values**:\
          \ a string of 20 characters or fewer "
        type: string
      SecondTokenId:
        description: ' A gateway unique identifier that replaces sensitive payment
          method data. SecondTokenId is conditionally required only when TokenID is
          being used to represent a gateway customer profile. SecondTokenId is used
          in the CC Reference Transaction payment method. **Character limit**: 64
          **Values**: a string of 64 characters or fewer '
        type: string
      State:
        description: " The state of the customer's address. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      StreetName:
        description: " The street name of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      StreetNumber:
        description: " The street number of the customer's address. This field is\
          \ used only for the direct debit payment method.\n**Character limit**: 30\
          \ **Values**: a string of 30 characters or fewer "
        type: string
      TokenId:
        description: " A gateway unique identifier that replaces sensitive payment\
          \ method data or represents a gateway's unique customer profile. When TokenId\
          \ is used to represent a customer profile, then SecondTokenId is conditionally\
          \ required for representing the underlying tokenized payment method. TokenId\
          \ is required for the CC Reference Transaction payment method.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      TotalNumberOfErrorPayments:
        description: " The number of error payments that used this payment method.\n\
          **Character limit**: **Values**: automatically generated "
        format: int32
        type: integer
      TotalNumberOfProcessedPayments:
        description: " The number of successful payments that used this payment method.\n\
          **Character limit**: **Values**: automatically generated "
        format: int32
        type: integer
      Type:
        description: ' Create Query Update Delete Filter '
        type: string
      UseDefaultRetryRule:
        description: " Determines whether to use the default retry rules configured\
          \ in the Zuora Payments settings. Set this to `true` to use the default\
          \ retry rules. Set this to `false` to set the specific rules for this payment\
          \ method. If you set this value to `false`, then the fields, `PaymentRetryWindow`\
          \ and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**:\
          \ 5 **Values**: `t``rue`, `false` "
        type: boolean
    required:
    - TotalNumberOfErrorPayments
    - TotalNumberOfProcessedPayments
    - Type
    - UseDefaultRetryRule
    type: object
  ProxyCreateProduct:
    example:
      Description: Create product via API
      EffectiveEndDate: '2066-10-20'
      EffectiveStartDate: '1966-10-20'
      Name: P_1476935173677
      SKU: API-SKU1476935173677
    properties:
      AllowFeatureChanges:
        description: " Controls whether to allow your users to add or remove features\
          \ while creating or amending a subscription.\n**Character** **limit**: n/a\n\
          **Values**: true, false (default) "
        type: boolean
      Category:
        description: |2
           Category of the product. Used by Zuora Quotes Guided Product Selector.
          **Character** **limit**: 100
          **Values**: One of the following:

          - Base Products
          - Add On Services
          - Miscellaneous Products
        type: string
      Description:
        description: ' A descriptionof the product. **Character limit**: 500 **Values**:
          a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: 'The date when the product expires and can''t be subscribed to
          anymore, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      EffectiveStartDate:
        description: 'The date when the product becomes available and can be subscribed
          to, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      Name:
        description: 'The name of the product. This information is displayed in the
          product catalog pages in the web-based UI. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      SKU:
        description: |
          The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:

          - leave null for automatic generated
          - an alphanumeric string of 50 characters or fewer
        type: string
    required:
    - EffectiveEndDate
    - EffectiveStartDate
    - Name
    type: object
  ProxyCreateProductRatePlan:
    example:
      Description: Test create product rateplan via API
      EffectiveEndDate: '2066-10-20'
      EffectiveStartDate: '1966-10-20'
      Name: ProductRatePlan1476935173957
      ProductId: 2c93808457d787030157e03246ae5129
    properties:
      Description:
        description: 'A description of the product rate plan. **Character limit**:
          500 **Values**: a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: " The date when the product rate plan expires and can't be subscribed\
          \ to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      EffectiveStartDate:
        description: " The date when the product rate plan becomes available and can\
          \ be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      Name:
        description: 'The name of the product rate plan. The name doesn''t have to
          be unique in a Product Catalog, but the name has to be unique within a product.
          **Character limit**: 100 **Values**: a string of 100 characters or fewer '
        type: string
      ProductId:
        description: 'The ID of the product that contains the product rate plan. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
    required:
    - Name
    type: object
  ProxyCreateRefund:
    example:
      AccountId: 2c93808457d787030157e03190e748ea
      Amount: 1.1
      Comment: this is comments
      PaymentId: 2c93808457d787030157e03197714910
      ReasonCode: Standard Refund
      RefundInvoicePaymentData:
        RefundInvoicePayment:
        - InvoiceId: 2c93808457d787030157e03195604902
          RefundAmount: 1.1
      SoftDescriptor: thisSD
      SoftDescriptorPhone: a@a.com
      SourceType: Payment
      Type: Electronic
    properties:
      AccountId:
        description: " The ID of the account associated with this refund. Specify\
          \ a value for this field only if you're creating an electronic non-referenced\
          \ refund. Don't specify a value for any other type of refund; Zuora associates\
          \ the refund automatically with the account from the associated payment.\n\
          **Character limit**: 32 **Values**: a valid account ID "
        type: string
      Amount:
        description: " The amount of the refund. The amount can't exceed the amount\
          \ of the associated payment. If the original payment was applied to a single\
          \ invoice, then you can create a partial refund. However, if the payment\
          \ was applies to multiple invoices, then you can only make a partial refund\
          \ through the web-based UI, not through the API.\n**Character limit**: 16\
          \ **Values**: a valid currency amount "
        format: double
        type: number
      Comment:
        description: " Use this field to record comments about the refund.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      GatewayState:
        description: " The status of the payment in the gateway.\n**Character limit**:\
          \ 19 **Values**: automatically generated "
        type: string
      MethodType:
        description: |2
           Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:

          - `ACH`
          - `Cash`
          - `Check`
          - `CreditCard`
          - `Other`
          - `PayPal`
          - `WireTransfer`
          - `DebitCard`
          - `CreditCardReferenceTransaction`
        type: string
      PaymentMethodId:
        description: " The unique ID of the payment method that the customer used\
          \ to make the payment. Specify a value for this field only if you're creating\
          \ an electronic non-referenced refund.\n**Character limit**: 32 **V****alues**:\
          \ a valid payment method ID "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      RefundDate:
        description: " The date of the refund, in `yyyy-mm-dd` format. The date of\
          \ the refund cannot be before the payment date. Specify this field only\
          \ for external refunds. Zuora automatically generates this field for electronic\
          \ refunds.\n**Character limit**: 29 "
        format: date
        type: string
      SoftDescriptor:
        description: |2
           A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:

          - 3-byte company identifier &quot;*&quot; 18-byte descriptor
          - 7-byte company identifier &quot;*&quot; 14-byte descriptor
          - 12-byte company identifier &quot;*&quot; 9-byte descriptor
        type: string
      SoftDescriptorPhone:
        description: |2
           A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:

          - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`
          - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate
          - Email address
        type: string
      SourceType:
        description: |2
           Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.
          **Character limit**: 13 **Values**:

          - `Payment`
          - `CreditBalance`
        type: string
      Type:
        description: |2
           Specifies if the refund is electronic or external.
          **Character limit**: 10 **Values**:

          - `Electronic`
          - External
        type: string
    required:
    - GatewayState
    - Type
    type: object
  ProxyCreateTaxationItem:
    example:
      AccountingCode: Usage Revenue
      ExemptAmount: 50
      InvoiceItemId: 2c93808457d787030157e0306cd43a88
      Jurisdiction: test
      LocationCode: code - 001
      Name: test
      TaxAmount: 3
      TaxCode: taxcode
      TaxCodeDescription: description
      TaxDate: '2016-10-20'
      TaxMode: TaxExclusive
      TaxRate: 3
      TaxRateDescription: test
      TaxRateType: FlatFee
    properties:
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      ExemptAmount:
        description: " The amount of taxes or VAT for which the customer has an exemption.\n\
          **Character limit**: 16 **Values**: a decimal value "
        format: double
        type: number
      InvoiceItemId:
        description: " The ID of the specific invoice item that the taxation information\
          \ applies to.\n**Character limit**: 32 **Values**: a valid invoice item\
          \ ID "
        type: string
      Jurisdiction:
        description: " The jurisdiction that applies the tax or VAT. This value is\
          \ typically a state, province, county, or city.\n**Character limit**: 32\
          \ **Values**: a string of 32 characterrs or fewer "
        type: string
      LocationCode:
        description: " The identifier for the location based on the value of the `TaxCode`\
          \ field.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      Name:
        description: " The name of the tax rate, such as sales tax or GST. This name\
          \ is displayed on invoices.\n**Character limit**: 128 **Values**: a string\
          \ of 128 characters or fewer "
        type: string
      TaxAmount:
        description: " The amount of the tax applied to the charge.\n**Character limit**:\
          \ 16 **Values**: a decimal value "
        format: double
        type: number
      TaxCode:
        description: " The tax code identifies which tax rules and tax rates to apply\
          \ to a specific charge.\n**Character limit**: 32 **Values**: a string of\
          \ 32 characters or fewer "
        type: string
      TaxCodeDescription:
        description: " The description for the tax code.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxDate:
        description: " The date that the tax is applied to the charge, in `yyyy-mm-dd`\
          \ format.\n**Character limit**: 29 "
        format: date
        type: string
      TaxRate:
        description: " The tax rate applied to the charge.\n**Character limit**: 16\
          \ **Values**: a valid decimal value "
        format: double
        type: number
      TaxRateDescription:
        description: " The description of the tax rate.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxRateType:
        description: " The type of the tax rate applied to the charge.\n**Character\
          \ limit**: 10 **Values**: `Percentage`, `FlatFee` "
        type: string
    required:
    - ExemptAmount
    - TaxAmount
    - TaxRate
    type: object
  ProxyCreateUnitOfMeasure:
    example:
      Active: true
      DecimalPlaces: 9
      DisplayedAs: name_display_name_1476935033519
      RoundingMode: UP
      UomName: name_1476935033519
    properties:
      Active:
        description: " Indicates if the UOM is available for new product rate plans.\
          \ The default value is `true`.\n**Character limit**: 5 **Values**: `true`,\
          \ `false ` "
        type: boolean
      DecimalPlaces:
        description: 'The number of digits to the right of the decimal point that
          you want to measure for the unit. To use whole numbers only, set this value
          to 0. You can''t change this value after this `UOM` is used in any product,
          subscription, or usage. **Character limit**: 1 **Values**: an integer between
          0 and 9, exclusive '
        format: int64
        type: integer
      DisplayedAs:
        description: 'The name of the UOM that you want displayed on invoices. The
          default value is the `UomName` field value. **Character limit**: 50 **Values**:
          A string of 50 characters or fewer '
        type: string
      RoundingMode:
        description: " Specifies whether to round the UOM value up or down when the\
          \ value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n\
          **Character limit**: 4 **Values**: `Up`, `Down` "
        type: string
      UomName:
        description: " The name of the UOM, such as license or GB. This name is displayed\
          \ in query results and in the web-based UI labels. If you want a different\
          \ name to be displayed on invoices, then use the `DisplayedAs` field to\
          \ provide the invoice label.\n**Character limit**: 50 **Values**: a string\
          \ of 50 characters or fewer "
        type: string
    required:
    - UomName
    type: object
  ProxyCreateUsage:
    example:
      AccountId: 2c93808457d787030157e02e07991cfc
      AccountNumber: AN_1476934895501
      ChargeId: 2c93808457d787030157e02e07cc1d04
      ChargeNumber: C-00000001
      Description: this is desc
      EndDateTime: '2016-11-20T04:41:36.000+01:00'
      Quantity: 9.9
      StartDateTime: '2016-10-20T05:41:36.000+02:00'
      SubscriptionId: 2c93808457d787030157e02e07b11cff
      SubscriptionNumber: S_1476934895501
      UOM: Each
    properties:
      AccountId:
        description: " The ID of the account associated with the usage data. This\
          \ field is required if no value is specified for the `AccountNumber` field.\n\
          **Character limit**: 32 **Values**: a valid account ID. "
        type: string
      AccountNumber:
        description: " The number of the account associated with the usage data. This\
          \ field is required if no value is specified for the `AccountId` field.\n\
          **Character limit**: 50 **Values**: a valid account number. "
        type: string
      ChargeId:
        description: ' The OrginalId of the rate plan charge related to the usage
          record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32
          **Values**: a valid rate plan charge OriginalID. '
        type: string
      EndDateTime:
        description: " The end date and time of a range of time when usage is tracked.\
          \ Use this field for reporting; this field doesn't affect usage calculation.\n\
          **Character limit**: 29 **Values**: a valid date and time value. "
        format: date-time
        type: string
      Quantity:
        description: " Indicates the number of units used.\n**Character limit**: 16\
          \ **Values**: a valid decimal amount equal to or greater than 0 "
        format: double
        type: number
      RbeStatus:
        description: " Indicates if the rating and billing engine (RBE) processed\
          \ usage data for an invoice.\n**Character limit**: 9 **Values**: automatically\
          \ generated to be one of the following values: `Importing`, `Pending`, `Processed` "
        type: string
      StartDateTime:
        description: " The start date and time of a range of time when usage is tracked.\
          \ Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`,\
          \ the `StartDateTime` field does affect usage calculation.\n**Character\
          \ limit**: 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      SubmissionDateTime:
        description: " The date when usage was submitted.\n**Character limit**: 29\
          \ **Values**: automatically generated "
        format: date-time
        type: string
      SubscriptionId:
        description: " The ID of the subscription that contains the fees related to\
          \ the usage data.\n**Character limit**: 32 **Values**: a valid subscription\
          \ ID "
        type: string
      UOM:
        description: " Specifies the units to measure usage. Units of measure are\
          \ configured in the web-based UI. Your values depend on your configuration\
          \ in **Billing Settings**.\n**Character limit**: **Values**: a valid unit\
          \ of measure "
        type: string
    type: object
  ProxyDeleteResponse:
    properties:
      id:
        description: ''
        type: string
      success:
        description: ''
        type: boolean
    type: object
  ProxyGetAccount:
    properties:
      AccountNumber:
        description: |
          Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:

          - null to auto-generate
          - a string of 50 characters or fewer that doesn't begin with the default account number prefix
        type: string
      AdditionalEmailAddresses:
        description: 'List of additional email addresses to receive emailed invoices.
          **Character limit**: 120 **Values**: comma-separated list of email addresses '
        type: string
      AllowInvoiceEdit:
        description: " Indicates if associated invoices can be edited.\n**Character\
          \ limit**: 5 **Values**: `true`, `false` (default if left null) "
        type: boolean
      AutoPay:
        description: " Indicates if future payments are automatically collected when\
          \ they're due during a Payment Run.\n**Character limit**: 5 **Values**:\
          \ `true`, `false` (default) "
        type: boolean
      Balance:
        description: 'Current outstanding balance for the account. **Character limit**:
          16 **Values**: automatically generated '
        format: double
        type: number
      Batch:
        description: " Organizes your customer accounts into groups to optimize your\
          \ billing and payment operations. Required if you use the Subscribe call\n\
          **Character limit**: 20 **Values**:any system-defined batch (`Batch1` -\
          \ `Batch50 `or by name). "
        type: string
      BcdSettingOption:
        description: 'Billing cycle day setting option. **Character limit**: 9 **Values**:
          `AutoSet`, `ManualSet` '
        type: string
      BillCycleDay:
        description: 'Billing cycle day (BCD) on which bill runs generate invoices
          for the account. **Character limit**: 2 **Values**: any activated system-defined
          bill cycle day (`1` - `31`) '
        format: int32
        type: integer
      BillToId:
        description: 'ID of the person to bill for the account. **Character limit**:
          32 **Values**: a valid contact ID for the account '
        type: string
      CommunicationProfileId:
        description: 'Associates the account with a specified communication profile.
          **Character limit**: 32 **Values**: a valid communication profile ID '
        type: string
      CreatedById:
        description: 'ID of the Zuora user who created the Account object. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'Date when the Account object was created. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
      CreditBalance:
        description: 'Total credit balance for the account. **Character limit**: 16
          **Values**: automatically generated '
        format: double
        type: number
      CrmId:
        description: 'CRM account ID for the account. A CRM is a customer relationship
          management system, such as Salesforce.com. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      Currency:
        description: ' Currency that the customer is billed in. '
        type: string
      CustomerServiceRepName:
        description: 'Name of the account''s customer service representative, if applicable.
          **Character limit**: 50 **Values**: a string of 50 characters or fewer '
        type: string
      DefaultPaymentMethodId:
        description: 'ID of the default payment method for the account. This field
          is required if the AutoPay field is set to `true`. **Character limit**:
          32 **Values**: a valid ID for an existing payment method '
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceDeliveryPrefsEmail:
        description: 'Indicates if the customer wants to receive invoices through
          email.  **Character limit**: 5 **Values**: `true`, `false` (default if left
          null) '
        type: boolean
      InvoiceDeliveryPrefsPrint:
        description: 'Indicates if the customer wants to receive printed invoices,
          such as through postal mail. **Character limit**: 5 **Values**: `true`,
          `false` (default if left null) '
        type: boolean
      InvoiceTemplateId:
        description: 'The ID of the invoice template. Each customer account can use
          a specific invoice template for invoice generation. **Character limit**:
          32 **Values**: a valid template ID configured in Zuora Billing Settings '
        type: string
      LastInvoiceDate:
        description: " The date when the previous invoice was generated for the account.\
          \ The field value is null if no invoice has ever been generated for the\
          \ account.\n**Character limit**: 29 **Values**: automatically generated "
        format: date
        type: string
      Name:
        description: 'Name of the account as displayed in the Zuora UI. **Character
          limit**: 255 **Values**: a string of 255 characters or fewer '
        type: string
      Notes:
        description: ' Comments about the account. **Character limit**: 65,535 **Values**:
          a string of 65,535 characters '
        type: string
      ParentId:
        description: 'Identifier of the parent customer account for this Account object.
          Use this field if you have customer hierarchy enabled. **Character limit**:
          32 **Values**: a valid account ID '
        type: string
      PaymentGateway:
        description: |
          Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:

          - a valid configured gateway name
          - Null to inherit the default value set in Payment Settings
        type: string
      PaymentTerm:
        description: 'Indicates when the customer pays for subscriptions. **Character
          limit**: 100 **Values**: a valid, active payment term defined in the web-based
          UI administrative settings '
        type: string
      PurchaseOrderNumber:
        description: 'The number of the purchase order associated with this account.
          Purchase order information generally comes from customers. **Character limit**:
          100 **Values**: a string of 100 characters or fewer '
        type: string
      SalesRepName:
        description: 'The name of the sales representative associated with this account,
          if applicable. **Character limit**: 50 **Values**: a string of 50 characters
          or fewer '
        type: string
      SoldToId:
        description: 'ID of the person who bought the subscription associated with
          the account. **Character limit**: 32 **Values**: a valid contact ID for
          the account '
        type: string
      Status:
        description: |
          Status of the account in the system. **Character limit**: 8 **Values**: one of the following:

          - leave null if you're using the Subscribe call
          - if you're using `create()`:
          - `Draft`
          - `Active`
          - `Canceled`
        type: string
      TaxCompanyCode:
        description: " Unique code that identifies a company account in Avalara. Use\
          \ this field to calculate taxes based on origin and sold-to addresses in\
          \ Avalara.\nThis feature is in **Limited Availability**. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
          \n**Character limit**: 50 **Values**: a valid company code "
        type: string
      TaxExemptCertificateID:
        description: 'ID of your customer''s tax exemption certificate. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptCertificateType:
        description: 'Type of the tax exemption certificate that your customer holds.  **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptDescription:
        description: 'Description of the tax exemption certificate that your customer
          holds. **Character limit**: 500 **Values**: a string of 500 characters or
          fewer '
        type: string
      TaxExemptEffectiveDate:
        description: 'Date when the the customer''s tax exemption starts. **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptExpirationDate:
        description: 'Date when the customer''s tax exemption certificate expires  **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptIssuingJurisdiction:
        description: 'Indicates the jurisdiction in which the customer''s tax exemption
          certificate was issued. **Character limit**: 32 **Values**: a string of
          32 characters or fewer '
        type: string
      TaxExemptStatus:
        description: |2
           Status of the account's tax exemption. Required if you use Zuora Tax.
          **Character limit**: 19 **Values**: one of the following:

          - `Yes`
          - `No`
          - `PendingVerification`
        type: string
      TotalInvoiceBalance:
        description: 'Total balance of the account''s invoices. **Character limit**:
          16 **Values**: a valid currency value '
        format: double
        type: number
      UpdatedById:
        description: 'ID of the user who last updated the account. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'Date when the account was last updated. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
      VATId:
        description: " EU Value Added Tax ID.\nThis feature is in **Limited Availability**.\
          \ If you wish to have access to the feature, submit a request at [Zuora\
          \ Global Support](http://support.zuora.com/).\n\n**Character limit**: 25\
          \ **Values**: a valid Value Added Tax ID "
        type: string
    type: object
  ProxyGetAmendment:
    properties:
      AutoRenew:
        description: " Determines whether the subscription is automatically renewed,\
          \ or whether it expires at the end of the term and needs to be manually\
          \ renewed. **Required:** For amendment of type TermsAndConditions when changing\
          \ the automatic renewal status of a subscription.\n**Values**: true, false "
        type: boolean
      Code:
        description: |2
           A unique alphanumeric string that identifies the amendment.
          **Character limit**: 50 **Values**: one of the following:

          - `null` generates a value automatically
          - A string
        type: string
      ContractEffectiveDate:
        description: " The date when the amendment's changes become effective for\
          \ billing purposes.\n**Version notes**: -- "
        format: date
        type: string
      CreatedById:
        description: " The user ID of the person who created the amendment.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the amendment was created.\n**Values**: automatically\
          \ generated "
        format: date-time
        type: string
      CurrentTerm:
        description: " The length of the period for the current subscription term.\
          \ This field can be updated when Status is `Draft`.\n**Required**: Only\
          \ if the value of the Type field is set to `TermsAndConditions` and TermType\
          \ is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.\n\
          **Character limit**: **Values**: a valid number "
        format: int64
        type: integer
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term. **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the CurrentTerm field to specify the current subscription term.
        type: string
      CustomerAcceptanceDate:
        description: " The date when the customer accepts the amendment's changes\
          \ to the subscription. **Required**: Only if the value of the Status field\
          \ is set to PendingAcceptance.\n**Version notes**: -- "
        format: date
        type: string
      Description:
        description: " A description of the amendment.\n**Character limit**: 500 **Values**:\
          \ maximum 500 characters "
        type: string
      EffectiveDate:
        description: " The date when the amendment's changes take effective. This\
          \ field validates that the amendment's changes are within valid ranges of\
          \ products and product rate plans.\n**Required**: For the cancellation amendments.\
          \ Optional for other types of amendments.\n**Version notes**: -- "
        format: date
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: " The name of the amendment.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      RenewalSetting:
        description: " Specifies whether a termed subscription will remain termed\
          \ or change to evergreen when it is renewed.\n**Required**: If TermType\
          \ is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN "
        type: string
      RenewalTerm:
        description: " The term of renewal for the amended subscription. This field\
          \ can be updated when Status is `Draft`.\n**Required**: Only if the value\
          \ of the Type field is set to `TermsAndConditions`.\n**Character limit**:\
          \ **Values:** a valid number "
        format: int64
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term. This field can be updated when Status is `Draft`.
          **Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      ServiceActivationDate:
        description: " The date when service is activated.\n**Required**: Only if\
          \ the value of the Status field is set to PendingActivation.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      SpecificUpdateDate:
        description: " The date when the UpdateProduct amendment takes effect. This\
          \ field is only applicable if there is already a future-dated UpdateProduct\
          \ amendment on the subscription.\n**Required**: Only for the UpdateProduct\
          \ amendments if there is already a future-dated UpdateProduct amendment\
          \ on the subscription.\n**Version notes**: -- "
        format: date
        type: string
      Status:
        description: |2
           The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:

          - Draft (default, if left null)
          - Pending Activation
          - Pending Acceptance
          - Completed
        type: string
      SubscriptionId:
        description: " The ID of the subscription that the amendment changes.\n**Character\
          \ limit**: 32 **Values**: a valid subscription ID "
        type: string
      TermStartDate:
        description: " The date when the new terms and conditions take effect.\n**Required**:\
          \ Only if the value of the Type field is set to TermsAndConditions.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      TermType:
        description: " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A\
          \ TERMED subscription has an expiration date, and must be manually renewed.\n\
          - An EVERGREEN subscription doesn't have an expiration date, and must be\
          \ manually ended.\n\n**Required**: Only when as part of an amendment of\
          \ type TermsAndConditions &#65279;to change the term type of a subscription.\
          \ Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN "
        type: string
      Type:
        description: |2
           The type of amendment.
          **Character limit**: 18 **Values**: one of the following:

          - Cancellation
          - NewProduct
          - OwnerTransfer
          - RemoveProduct
          - Renewal
          - UpdateProduct
          - TermsAndConditions
          - SuspendSubscription (This value is in **Limited Availability**.)
          - ResumeSubscription (This value is in **Limited Availability**.)
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the amendment.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the amendment was last updated.\n**Values**:\
          \ automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetBillRun:
    properties:
      AccountId:
        description: |
          ID of the account used for single account bill run.

          **Character limit:** 32
        type: string
      AutoEmail:
        description: |
          Determines whether to auto send email or not once the bill run completes.

          **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
        type: boolean
      AutoPost:
        description: |
          Determines whether to auto post bill run or not once the bill run completes.

          **Note:** You must enable the [Support Bill Run Auto-Post Billing](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules) rule to pass this field.
        type: boolean
      AutoRenewal:
        description: 'Determines whether to auto renew subscription or not by this
          bill run once the bill run completes.

          '
        type: boolean
      Batch:
        description: "Batch of accounts for this bill run. \n\n**Character limit:**\
          \ 20\n\n**Values:** AllBatches or Batchn where n is a number between 1 and\
          \ 50.\n"
        type: string
      BillCycleDay:
        description: |
          The day of the bill cycle.

          **Character limit:** 32

          **Values:** `AllBillCycleDays` or 01 - 31.
        type: string
      BillRunNumber:
        description: |
          Number of the bill run.

          **Character limit:** 50

          **Values:** automatically generated
        type: string
      CreatedById:
        description: "The user ID of the person who created the bill run.\n\n**Character\
          \ limit:** 32\n\n**Values:** automatically generated         \n"
        type: string
      CreatedDate:
        description: "The date and time when the bill run was created.\n\n**Character\
          \ limit:** 29\n\n**Values:** automatically generated           \n"
        format: date-time
        type: string
      ExecutedDate:
        description: 'The date and time when the bill run was executed.

          '
        format: date-time
        type: string
      Id:
        description: |
          ID of the object.

          **Character limit:** 32

          **Values:** automatically generated
        type: string
      InvoiceDate:
        description: |
          Invoice date for this bill run.

          **Character limit:** 29
        format: date
        type: string
      InvoicesEmailed:
        description: "Indicates whether the invoice has been sent or not. \n\n**Values:**\
          \ automatically generated           \n"
        type: boolean
      LastEmailSentTime:
        description: |
          The last time emails were sent for this bill run.

          **Character limit:** 29

          **Values:** automatically generated
        format: date-time
        type: string
      NoEmailForZeroAmountInvoice:
        description: 'Determines whether to suppress email for invoices with zero
          total or not for this bill run once the bill run completes. (Do not email
          invoices with 0 Invoice Total).

          '
        type: boolean
      NumberOfAccounts:
        description: |
          The number of accounts processed by this bill run.

          **Values:** automatically generated
        format: int64
        type: integer
      NumberOfInvoices:
        description: |
          The number of invoices generated by this  run.

          **Values:** automatically generated
        format: int64
        type: integer
      Status:
        description: "The status  for this bill run. See [Status Types](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs#Status_Types)\
          \ for more information.\n\n**Character limit:** 20\n\n**Values:** \n\n \
          \ * `Pending`\n  * `Processing`\n  * `Completed`\n  * `Error`\n  * `Canceled`\n\
          \  * `Posted`\n"
        type: string
      TargetDate:
        description: |
          Target date for this bill run. See [Create Bill Run](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs) for more information.

          **Character limit:** 29
        format: date
        type: string
      UpdatedById:
        description: "The user ID of the person who last updated the bill run.\n\n\
          **Character limit:** 32\n\n**Values:** automatically generated         \n"
        type: string
      UpdatedDate:
        description: "The date and time when the bill run was last updated.\n\n**Character\
          \ limit:** 29\n\n**Values:** automatically generated \n"
        format: date-time
        type: string
    type: object
  ProxyGetCommunicationProfile:
    properties:
      CreatedById:
        description: ''
        type: string
      CreatedDate:
        description: ''
        format: date-time
        type: string
      Description:
        description: ''
        type: string
      Id:
        description: Object identifier.
        type: string
      ProfileName:
        description: ''
        type: string
      UpdatedById:
        description: ''
        type: string
      UpdatedDate:
        description: ''
        format: date-time
        type: string
    type: object
  ProxyGetContact:
    properties:
      AccountId:
        description: " The Zuora account ID associated with this contact. This field\
          \ is not required when you use the Subscribe call. This field is required\
          \ for all other calls.\n**Character limit: **32 **Values: **a valid account\
          \ ID "
        type: string
      Address1:
        description: " The first line of the contact's address, which is often a street\
          \ address or business name.\n**Character limit**: 255 **Values**: a string\
          \ of 255 characters or fewer "
        type: string
      Address2:
        description: " The second line of the contact's address.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      City:
        description: " The city of the contact's address.\n**Character limit**: 40\
          \ **Values: **a string of 40 characters or fewer "
        type: string
      Country:
        description: ' The country of the contact''s address. '
        type: string
      County:
        description: " The country. May optionally be used by Zuora Tax to calculate\
          \ county tax.\n**Character limit**: 32 **Values**: a string of 32 characters\
          \ or fewer "
        type: string
      CreatedById:
        description: 'The ID of the Zuora user who created the contact. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'The date when the contact was created. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
      Description:
        description: " A description for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      Fax:
        description: " The contact's fax number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      FirstName:
        description: " The contact's first name.\n**Character limit**: 100 **Values**:\
          \ a string of the contact's first name "
        type: string
      HomePhone:
        description: " The contact's home phone number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      Id:
        description: Object identifier.
        type: string
      LastName:
        description: " The contact's last name.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      MobilePhone:
        description: " The contact's mobile phone number.\n**Character limit**: 40\
          \ **Values**: a string of 40 characters or fewer "
        type: string
      NickName:
        description: " A nickname for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      OtherPhone:
        description: " An additional phone number for the contact.\n**Character limit**:\
          \ 40 **Values**: a string of 40 characters or fewer "
        type: string
      OtherPhoneType:
        description: 'The type of the `OtherPhone`. **Character limit**: 20 **Values**:
          `Work`, `Mobile`, `Home`, `Other` '
        type: string
      PersonalEmail:
        description: " The contact's personal email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      PostalCode:
        description: " The zip code for the contact's address.\n**Character limit:**\
          \ 20 **Values: **a string of 20 characters or fewer "
        type: string
      State:
        description: ' The state or province of the contact''s address. '
        type: string
      TaxRegion:
        description: 'If using Zuora Tax rules '
        type: string
      UpdatedById:
        description: " The ID of the user who lasted updated the contact.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the contact was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      WorkEmail:
        description: " The contact's business email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      WorkPhone:
        description: " The contact's business phone number.\n**Character limit**:\
          \ 40 **notes**: -- **Values**: a string of 40 characters or fewer "
        type: string
    type: object
  ProxyGetCreditBalanceAdjustment:
    properties:
      AccountId:
        description: |2
           The account ID of the credit balance's account. Zuora generates this value from the source transaction.
          **Character limit**: 32 **V****alues**: automatically generated from:

          - CreditBalanceAdjustment.SourceTransactionId or
          - CreditBalanceAdjustment.SourceTransactionNumber
        type: string
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      AdjustmentDate:
        description: " The date when the credit balance adjustment is applied.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date
        type: string
      Amount:
        description: " The amount of the adjustment.\n**Character limit**: 16 **Values**:\
          \ a valid currency amount "
        format: double
        type: number
      CancelledOn:
        description: " The date when the credit balance adjustment was canceled.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Comment:
        description: " Use this field to record comments about the credit balance\
          \ adjustment.\n**Character limit**: 255 **Values**: a string of 255 characters\
          \ or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the credit balance adjustment.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the credit balance adjustmentwas generated.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      IntegrationId__NS:
        description: ''
        type: string
      IntegrationStatus__NS:
        description: ''
        type: string
      Number:
        description: " A unique identifier for the credit balance adjustment. Zuora\
          \ generates this number in the format, <em>CBA-xxxxxxxx</em>, such as CBA-00375919.\n\
          **Character limit**: 255 **Values**: automatically generated "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      ReferenceId:
        description: " The ID of the payment that the credit balance adjustment is\
          \ for.\n**Character limit**: 32 **Values**: a string of 60 characters or\
          \ fewer "
        type: string
      SourceTransactionId:
        description: |2
           The ID of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.
          **Character limit**: 32 **Values**: one of the following:

          - InvoiceId
          - PaymentId
          - RefundId
        type: string
      SourceTransactionNumber:
        description: |2
           The number of the object that the credit balance adjustment is applied to. You must specify a value for either the `SourceTransactionId` field or the `SourceTransactionNumber` field.
          **Character limit**: 50 **Values**: one of the following:

          - InvoiceNumber
          - PaymentNumber
          - RefundNumber
        type: string
      SourceTransactionType:
        description: |2
           The source of the credit balance adjustment.
          **Character limit**: **Values**: automatically generated; one of the following:

          - Invoice
          - Payment
          - Refund
        type: string
      Status:
        description: |2
           The status of the credit balance adjustment.
          **Character limit**: 9 **Values**: automatically generated; one of the following:

          - Processed
          - Canceled
        type: string
      SyncDate__NS:
        description: ''
        type: string
      TransferredToAccounting:
        description: |2
           Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as NetSuite.
          **Character limit**: **Values**: one of the following:

          - Processing
          - Yes
          - Error
          - Ignore
        type: string
      Type:
        description: Create Query Filter
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the credit balance adjustment.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the credit balance adjustment was last updated.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetExport:
    properties:
      ConvertToCurrencies:
        description: " The currencies that you want to convert transaction amounts\
          \ into. You can specify any number of currencies. Specify the currencies\
          \ using their Foreign Currency Conversion enabled to use this field.\n**Character\
          \ limit**: **Values**: a list of valid currency codes "
        type: string
      CreatedById:
        description: " The user ID of the person who created the export.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the import was created.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Encrypted:
        description: " Exports a secure version of encrypted data source fields. such\
          \ as the AchAccountNumber field of the PaymentMethod object and the DefaultPaymentMethod\
          \ data souce objects.\n**Character limit**: 5 **Values:** true, false "
        type: boolean
      FileId:
        description: " The ID of the file generated by an export query. This fiel\
          \ is automatically generated when an Export object is created. Use this\
          \ file ID when you download the export file.\n**Character limit**: 32 **Values**:\
          \ automatically generated "
        type: string
      Format:
        description: " The format that you want the export file to use.\n**Character\
          \ limit**: 4 **Values**: csv, html "
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: " The name of the export.\n**Character limit**: 255 **Values**:\
          \ a string of 255 characters or fewer "
        type: string
      Query:
        description: optional
        type: string
      Size:
        description: " The number of records or rows exported. This field value is\
          \ null until the export status is Completed.\n**Character limit**: **Values**:\
          \ automatically generated "
        format: int32
        type: integer
      Status:
        description: |2
           The status of the export. Type: string (enum) **Character limit**: 10 **Values**: automatically generated to be one of the following values:

          - Pending
          - Processing
          - Completed
          - Canceled
          - Failed
        type: string
      StatusReason:
        description: " The reason for the given status. Use this information to help\
          \ ascertain why an export failed.\n**Character limi**t: 255 **Values**:\
          \ automatically generated "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the export.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the expotr was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Zip:
        description: " Indicates if you want the resulting export file to be compressed\
          \ into a zip file.\n**Character limit**: **Values**: true, false (default) "
        type: boolean
    type: object
  ProxyGetFeature:
    properties:
      CreatedById:
        description: ' Internal Zuora ID of the user who created the feature **Character
          limit**: 32 '
        type: string
      CreatedDate:
        description: ' Date and time when the feature was created **Character limit**:
          29 '
        format: date-time
        type: string
      Description:
        description: ' Description of the feature **Character limit**: 1000 '
        type: string
      FeatureCode:
        description: ' Unique code of the feature **Character limit**: 255 '
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: ' Name of the feature **Character limit**: 255 '
        type: string
      Status:
        description: ' Status of the feature, Active or Inactive **Character limit**:
          8 '
        type: string
      UpdatedById:
        description: ' Internal Zuora ID of the user who last updated the feature
          **Character limit**: 32 '
        type: string
      UpdatedDate:
        description: ' Date and time when the feature was last updated **Character
          limit**: 29 '
        format: date-time
        type: string
    type: object
  ProxyGetImport:
    properties:
      CreatedById:
        description: " The user ID of the person who created the import.\n\n**Character\
          \ limit**: 32\n\n**Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the import was created.\n\n**Character limit**:\
          \ 29\n\n**Values**: automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      ImportType:
        description: " The type of item imported.\n\n**Character limit**: 7\n\n**Values**:\
          \ Usage "
        type: string
      ImportedCount:
        description: "The number of records successfully imported.\n\n**Values**:\
          \ automatically generated "
        format: int32
        type: integer
      Md5:
        description: " A check to validate the import file's integrity.\n\n**Character\
          \ limit:** 32\n\n**System-generated:** no\n\n**Values**: a string of 32\
          \ characters or fewer "
        type: string
      Name:
        description: |2
           A descriptive name for the import.

          **Character limit:** 100

          **Values:** one of the following:

          - a string of 100 characters or fewer
          - if NULL default is: `import <ImportType_value>`
        type: string
      OriginalResourceUrl:
        description: " The URL for your import file, which contains your records for\
          \ upload. When you upload the file, Zuora assigns it to this address.\n\n\
          **Values:** automatic dynamically-generated URL "
        type: string
      ResultResourceUrl:
        description: " The URL for the import result file, which is a zipped CSV file.\n\
          \n**Values**: automatic dynamically-generated URL "
        type: string
      Status:
        description: |
          The status of the import process.

          **Values**: automatically generated using one of the following values:

          - Pending
          - Processing
          - Completed
          - Failed
        type: string
      StatusReason:
        description: " The reason for the system-generated status. Use this information\
          \ if the import fails.\n\n**Character limit**: 2000\n\n**Values**: automatically\
          \ generated error message "
        type: string
      TotalCount:
        description: " The number of records in the import file.\n\n**Character limit**:\n\
          \n**Values**: automatically generated "
        format: int32
        type: integer
      UpdatedById:
        description: " The ID of the user who last updated the import.\n\n**Character\
          \ limit**: 32\n\n**Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the import was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoice:
    properties:
      AccountId:
        description: ''
        type: string
      AdjustmentAmount:
        description: ' The amount of the invoice adjustments associated with the invoice.
          **Character limi**t: 16 **Values**: a valid currency amount '
        format: double
        type: number
      Amount:
        description: " The sum of all charges and taxes associated with the invoice.\n\
          **Character limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      AmountWithoutTax:
        description: " The sum of all charges associated with the invoice. Taxes are\
          \ excluded from this value.\n**Character limit**: 16 **Values**: automatically\
          \ generated "
        format: double
        type: number
      Balance:
        description: " The remaining balance of the invoice after all payments, adjustments,\
          \ and refunds are applied.\n**Character limit**: 16 **Values**: automatically\
          \ generated "
        format: double
        type: number
      Body:
        description: ' Required '
        type: string
      Comments:
        description: " Additional information related to the invoice that a Zuora\
          \ user added to the invoice.\n**Character limit**: 255 **Values:** a string\
          \ of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice. If a bill\
          \ run generated the invoice, then the value is the user ID of person who\
          \ created the bill run.\n**Character limit**: 32 **Values**: automatically\
          \ generated "
        type: string
      CreatedDate:
        description: " The date when the invoice was generated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      CreditBalanceAdjustmentAmount:
        description: |2+
           The currency amount of the adjustment applied to the customer's credit balance.
          **Character limit**: 16 **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.


        format: double
        type: number
      DueDate:
        description: " The date by which the payment for this invoice is due.\n**Character\
          \ limit**: 29 **Version notes**: -- "
        format: date
        type: string
      Id:
        description: Object identifier.
        type: string
      IncludesOneTime:
        description: " Specifies whether the invoice includes one-time charges. You\
          \ can use this field only with the Generate call for the Invoice object.\n\
          **Character limit**: 5 **Values**: automatically generated from one of the\
          \ following: `True` (default), `False` "
        type: boolean
      IncludesRecurring:
        description: " Specifies whether the invoice includes recurring charges. You\
          \ can use this field only with the Generate call for the Invoice object.\n\
          **Character limit**: 5 **Values**: automatically generated from one of the\
          \ following: `True` (default), `False` "
        type: boolean
      IncludesUsage:
        description: " Specifies whether the invoice includes usage charges. You can\
          \ use this field only with the Generate call for the Invoice object.\n**Character\
          \ limit**: 5 **Values**: automatically generated from one of the following:\
          \ `True `(default), `False` "
        type: boolean
      InvoiceDate:
        description: " Specifies the date on which to generate the invoice.\n**Character\
          \ limit**: 29 **Version notes**: -- "
        format: date
        type: string
      InvoiceNumber:
        description: " The unique identification number for the invoice. This number\
          \ is returned as a string.\n**Character limit**: 32 **Values**: automatically\
          \ generated "
        type: string
      LastEmailSentDate:
        description: " The date when the invoice was last emailed.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      PaymentAmount:
        description: " The amount of payments applied to the invoice.\n**Character\
          \ limit**: 16 **Value**s: automatically generated "
        format: double
        type: number
      PostedBy:
        description: " The user ID of the person who moved the invoice to Posted status.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      PostedDate:
        description: " The date when the invoice was posted.\n**Character limit:**\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      RefundAmount:
        description: " Specifies the amount of a refund that was applied against an\
          \ earlier payment on the invoice.\n**Character limit**: 16 **Values**: automatically\
          \ generated "
        format: double
        type: number
      Status:
        description: |2+
           The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.
          **Character limit**: 8 **Values**: one of the following:

          -  Draft (default, automatically set upon invoice creation)

          -  Posted

          -  Canceled

        type: string
      TargetDate:
        description: " This date is used to determine which charges are to be billed.\
          \ All charges that are to be billed on this date or prior will be included\
          \ in this bill run.\n**Character limit**: 29 **Version notes**: -- "
        format: date
        type: string
      TaxAmount:
        description: " The total amount of the taxes applied to the invoice.\n**Character\
          \ limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      TaxExemptAmount:
        description: " The total amount of the invoice that is exempt from taxation.\n\
          **Character limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      TransferredToAccounting:
        description: " Specifies whether or not the invoice was transferred to an\
          \ external accounting system, such as NetSuite.\n**Character limit**: 10\
          \ **Values**: Processing, Yes, Error, Ignore "
        type: string
      UpdatedById:
        description: ''
        type: string
      UpdatedDate:
        description: " The date when the invoice was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoiceAdjustment:
    properties:
      AccountId:
        description: " The ID of the account that owns the invoice.\n**Character limit**:\
          \ 32 **Values**: inherited from Account.ID for the invoice owner "
        type: string
      AccountingCode:
        description: 'The accounting code for the invoice adjustment. '
        type: string
      AdjustmentDate:
        description: " The date when the invoice adjustment is applied. This date\
          \ must be the same as the invoice's date or later.\n**Character limit**:\
          \ 29 **Values**: Leave null to automatically generate the current date "
        format: date
        type: string
      AdjustmentNumber:
        description: " A unique string to identify an individual invoice adjustment.\n\
          **Character limit**: 255 **Values**: automatically generated "
        type: string
      Amount:
        description: " The amount of the invoice adjustment.\n**Character limit**:\
          \ 16 **Values**: a valid currency amount "
        format: double
        type: number
      CancelledById:
        description: " The ID of the Zuora user who canceled the invoice adjustment.\
          \ Zuora generates this read-only field only if the adjustment is canceled.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CancelledOn:
        description: " The date when the invoice adjustment is canceled. Zuora generates\
          \ this read-only field if this adjustment is canceled.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Comments:
        description: " Use this field to record comments about the invoice adjustment.\n\
          **Character limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice adjustment.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date the invoice adjustment was created.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      CustomerName:
        description: " The name of the account that owns the associated invoice.\n\
          \n**Character limit**: 50\n\n**Values**: inherited from `Account.Name`\n\
          \n**Note**: This value changes if `Account.Name` is updated. The values\
          \ of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment` do not\
          \ change when `Account.Name` is updated. "
        type: string
      CustomerNumber:
        description: " The unique account number of the customer's account.\n\n**Character\
          \ limit**: 70\n\n**Values**: inherited from `Account.AccountNumber`\n\n\
          **Note**: This value changes if `Account.AccountNumber` is updated. The\
          \ values of `UpdatedById` and `UpdatedDate` for the `InvoiceAdjustment`\
          \ do not change when `Account.AccountNumber` is updated. "
        type: string
      Id:
        description: Object identifier.
        type: string
      ImpactAmount:
        description: " The amount that changes the balance of the associated invoice.\n\
          **Character limit**: 16 **Values**: automatically calculated "
        format: double
        type: number
      InvoiceId:
        description: " The ID of the invoice associated with the adjustment. This\
          \ field is required if you don't specify a value for the `InvoiceNumber`\
          \ field.\n**Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      InvoiceNumber:
        description: " The unique identification number for the associated invoice.\
          \ This field is required if you don't specify a value for the `InvoiceId`\
          \ field.\n**Character limit**: 32 **Values**: a valid invoice number "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      ReferenceId:
        description: " A code to reference an object external to Zuora. For example,\
          \ you can use this field to reference a case number in an external system.\n\
          **Character limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      Status:
        description: " The status of the invoice adjustment. This field is required\
          \ in the Query call, but is automatically generated in other calls.\n**Character\
          \ limit**: 9 **Values**: `Canceled`, `Processed` "
        type: string
      TransferredToAccounting:
        description: " Indicates the status of the adjustment's transfer to an external\
          \ accounting system, such as NetSuite.\n**Character limit**: 10 **Values**:\
          \ `Processing`, `Yes`, `Error`, `Ignore` "
        type: string
      Type:
        description: " Indicates whether the adjustment credits or debits the invoice\
          \ amount.\n**Character limit**: 6 **Values**: `Credit`, `Charge` "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the invoice.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoiceItem:
    properties:
      AccountingCode:
        description: " The accounting code for the item's charge. Accounting codes\
          \ group transactions that contain similar accounting attributes.\n**Character\
          \ limit**: 100 **Values**: inherited from `RatePlanCharge.AccountingCode` "
        type: string
      AppliedToInvoiceItemId:
        description: " Associates a discount invoice item to a specific invoice item.\n\
          \n**Character limit**: 32\n\n**Values**: inherited from `InvoiceItem.Id`\
          \ for the invoice item that the discount charge is applied to "
        type: string
      ChargeAmount:
        description: " The amount being charged for the invoice item. This amount\
          \ doesn't include taxes regardless if the charge's tax mode is inclusive\
          \ or exclusive.\n**Character limit**: **Values**: automatically calculated\
          \ from multiple fields in multiple objects "
        format: double
        type: number
      ChargeDate:
        description: " The date when the Invoice Item is created .\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      ChargeName:
        description: " The name of the invoice item's charge.\n**Character limi**t:\
          \ 50 **Values: **inherited from `RatePlanCharge.Name` "
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice item.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date the invoice item was created.\n**Character limit:**\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceId:
        description: " The ID of the invoice that's associated with this invoice item.\n\
          **Character limit**: 32 **Values**: inherited from `Invoice.Id` "
        type: string
      ProcessingType:
        description: |2
           Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.
          **Character limit**: **Values: **

          - 0: charge
          - 1: discount
          - 2: prepayment
          - 3: tax
        format: double
        type: number
      ProductDescription:
        description: " A description of the product associated with this invoice item.\n\
          \n**Character limit**: 500\n\n**Values**: inherited from `Product.Description`\n\
          \n**Note**: This value changes if `Product.Description` is updated. The\
          \ values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not\
          \ change when `Product.Description` is updated. "
        type: string
      ProductName:
        description: " The name of the product associated with this invoice item.\n\
          \n**Character limit**: 255\n\n**Values**: inherited from `Product.Name`\n\
          \n**Note**: This value changes if `Product.Name` is updated. The values\
          \ of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change\
          \ when `Product.Name` is updated. "
        type: string
      Quantity:
        description: " The number of units for this invoice item.\n**Values**: inherited\
          \ from `RatePlanCharge.Quantity` "
        format: double
        type: number
      RatePlanChargeId:
        description: " The ID of the rate plan charge that's associated with this\
          \ invoice item.\n**Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id` "
        type: string
      RevRecStartDate:
        description: " The date when revenue recognition is triggered.\n**Character\
          \ limit**: 29 **Values**: generated from `InvoiceItem.RevRecTriggerCondition` "
        format: date
        type: string
      SKU:
        description: " The unique SKU for the product associated with this invoice\
          \ item.\n**Character limit**: 255 **Values**: inherited from `Product.SKU` "
        type: string
      ServiceEndDate:
        description: " The end date of the service period associated with this invoice\
          \ item. Service ends one second before the date in this value.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date
        type: string
      ServiceStartDate:
        description: " The start date of the service period associated with this invoice\
          \ item. If the associated charge is a one-time fee, then this date is the\
          \ date of that charge.\n**Character limit:** 29 **Values**: automatically\
          \ generated "
        format: date
        type: string
      SubscriptionId:
        description: " The ID of the subscription associated with the invoice item.\n\
          **Character limit**: 32 **Values**: inherited from `Subscription.Id` "
        type: string
      TaxAmount:
        description: " The amount of tax applied to the invoice item's charge.\n**Character\
          \ limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge\
          \ object "
        format: double
        type: number
      TaxCode:
        description: " Specifies the tax code for taxation rules.\n**Character limit**:\
          \ 6 **Values**: inherited from `ProductRatePlanCharge.TaxCode` "
        type: string
      TaxExemptAmount:
        description: " The amount of the invoice item's charge that's tax exempt.\n\
          **Character limit**: **Values**: calculated from multiple fields in the\
          \ ProductRatePlanCharge object "
        format: double
        type: number
      TaxMode:
        description: " The tax mode of the invoice item.\n**Character limit**: 12\
          \ **Values**: `TaxExclusive`, `TaxInclusive` "
        type: string
      UOM:
        description: ' Specifies the units to measure usage. **Character limit**:
          **Values**: inherited from `ProductRatePlanCharge.UOM` '
        type: string
      UnitPrice:
        description: " The per-unit price of the invoice item.\n**Character limit**:\
          \ **Values**: calculated from multiple fields in ProductRatePlanCharge and\
          \ ProductRatePlanChargeTier objets "
        format: double
        type: number
      UpdatedById:
        description: " The ID of the user who last updated the invoice item.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice item was last updated.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoiceItemAdjustment:
    properties:
      AccountId:
        description: " The ID of the account that owns the invoice.\n**Values**: inherited\
          \ from `Account.ID` for the invoice owner "
        type: string
      AccountingCode:
        description: " The accounting code for the invoice item. Accounting codes\
          \ group transactions that contain similar accounting attributes.\n**Character\
          \ limit**: 100 **Values**: inherited from `InvoiceItem.AccountingCode` "
        type: string
      AdjustmentDate:
        description: " The date when the invoice item adjustment is applied, in `yyyy-mm-dd`\
          \ format. This date must be the same as the invoice's date or later.\n**Character\
          \ limit**: 29 "
        format: date
        type: string
      AdjustmentNumber:
        description: " A unique string to identify an individual invoice item adjustment.\n\
          **Character limit**: 255 **Values**: automatically generated "
        type: string
      Amount:
        description: ' The amount of the invoice item adjustment. The value of Amount
          must be positive. Use the required parameter Type to either credit or charge
          (debit) this amount on the invoice. **Character limit**: 16 **Values**:
          a valid currency amount '
        format: double
        type: number
      CancelledById:
        description: " The ID of the Zuora user who canceled the invoice item adjustment.\
          \ Zuora generates this read-only field only if the adjustment is canceled.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CancelledDate:
        description: " The date when the invoice item adjustment is canceled. Zuora\
          \ generates this read-only field if this adjustment is canceled.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Comment:
        description: " Use this field to record comments about the invoice item adjustment.\n\
          **Character limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the invoice item.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date the invoice item was created.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      CustomerName:
        description: " The name of the account that owns the associated invoice.\n\
          \n**Character limit**: 50\n\n**Values**: inherited from `Account.Name`\n\
          \n**Note**: This value changes if `Account.Name` is updated. The values\
          \ of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do\
          \ not change when `Account.Name` is updated. "
        type: string
      CustomerNumber:
        description: " The unique account number of the customer's account.\n\n**Character\
          \ limit**: 50\n\n**Values**: inherited from `Account.AccountNumber`\n\n\
          **Note**: This value changes if `Account.AccountNumber` is updated. The\
          \ values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment`\
          \ do not change when `Account.AccountNumber` is updated. "
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceId:
        description: " The ID of the invoice associated with the adjustment. The adjustment\
          \ invoice item is in this invoice. This field is optional if you specify\
          \ a value for the `InvoiceNumber` field.\n**Character limit**: 3 **Values**:\
          \ a valid invoice ID "
        type: string
      InvoiceItemName:
        description: " The name of the invoice item's charge. This field is required\
          \ in the Query call, but is inherited in other calls.\n**Character limit**:\
          \ 255 **Values**: inherited from `InvoiceItem.ChargeName` "
        type: string
      InvoiceNumber:
        description: " The unique identification number for the invoice that contains\
          \ the invoice item. This field is optional if you specify a value for the\
          \ `InvoiceId` field.\n**Character limit**: 32 **Values**: a valid invoice\
          \ number "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      ReferenceId:
        description: " A code to reference an object external to Zuora. For example,\
          \ you can use this field to reference a case number in an external system.\n\
          **Character limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      ServiceEndDate:
        description: " The end date of the service period associated with the invoice\
          \ item. Service ends one second before the date in this value.\n\n**Character\
          \ limit**: 29 "
        format: date
        type: string
      ServiceStartDate:
        description: " The start date of the service period associated with the invoice\
          \ item. Service ends one second before the date in this value.\n\n**Character\
          \ limit**: 29 "
        format: date
        type: string
      SourceId:
        description: " The ID of the item specified in the SourceType field.\n**Character\
          \ limit**: 32 **Values**: a valid invoice item ID or taxation item ID "
        type: string
      SourceType:
        description: " The type of adjustment.\n**Character limit**: 13 **Values**:\
          \ InvoiceDetail, Tax "
        type: string
      Status:
        description: " The status of the invoice item adjustment. This field is required\
          \ in the Query call, but is automatically generated in other calls.\n**Character\
          \ limit**: 9 **Values**: Canceled, Processed "
        type: string
      TransferredToAccounting:
        description: " Indicates the status of the adjustment's transfer to an external\
          \ accounting system, such as NetSuite.\n**Character limit**: 10 **Values**:\
          \ Processing, Yes, Error, Ignore "
        type: string
      Type:
        description: ' Query Filter '
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the invoice item.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice item was last updated.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoicePayment:
    properties:
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency amount "
        format: double
        type: number
      CreatedById:
        description: " The user ID of the person who created the invoice payment.\n\
          **Character limit**: 32 **V****alues**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the invoice payment was generated.\n**Character\
          \ limit**: 29 **V****alues**: automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceId:
        description: " The unique ID of the invoice associated with this invoice payment.\n\
          **Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      PaymentId:
        description: " The unique ID of the payment associated with this invoice payment.\n\
          **Character limit**: 32 **V****alues**: a valid payment ID "
        type: string
      RefundAmount:
        description: 'Specifies the amount of a refund applied against this InvoicePayment.
          **Character limit**: 16 **Values**: automatically generated '
        format: double
        type: number
      UpdatedById:
        description: " The ID of the user who last updated the invoice payment.\n\
          **Character limit**: 32 **V****alues**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice payment was last updated.\n**Character\
          \ limit**: 29 **V****alues**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetInvoiceSplit:
    properties:
      CreatedById:
        description: 'The ID of the Zuora user who created the InvoiceSplit object.
          **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'The date when the InvoiceSplit object was created. **Character
          limit**: 29 **Values**: automatically generated '
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceId:
        description: " The ID of the original invoice that the InvoiceSplit object\
          \ splits. This field becomes read-only after the InvoiceSplit object is\
          \ created.\n**Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      UpdatedById:
        description: 'The ID of the Zuora user who last updated the invoice split.
          **Character limit**: 32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'The date when the invoice split was last updated. **Values**:
          automatically generated '
        format: date-time
        type: string
    type: object
  ProxyGetInvoiceSplitItem:
    properties:
      CreatedById:
        description: " The ID of the Zuora user who created the InvoiceSplitItem object.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the InvoiceSplitItem was created.\n**Values**:\
          \ automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceDate:
        description: " The generation date of the new split invoice, in `yyyy-mm-dd`\
          \ format.\n**Character limit**: 29 "
        format: date
        type: string
      InvoiceId:
        description: " The new invoice after the split.\n**Character limit**: 32 **Values**:\
          \ automatically generated "
        type: string
      InvoiceSplitId:
        description: " The ID of the invoice split associated with the individual\
          \ invoice split item.\n**Character limit**: 32 **Values**: a valid invoice\
          \ split ID "
        type: string
      PaymentTerm:
        description: " Indicates when the customer pays the split invoice.\n**Values**:\
          \ a valid, active payment term "
        type: string
      SplitPercentage:
        description: |2
           Specifies the percentage of the original invoice that you want to be the balance of the split invoice. The total of the SplitPercentage field values for all of the InvoiceSplitItem objects in an InvoiceSplit object must equal 100.
          **Values**:
        format: double
        type: number
      UpdatedById:
        description: " The ID of the Zuora user who last updated the invoice split.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the invoice split was last updated.\n**Values**:\
          \ automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetPayment:
    properties:
      AccountId:
        description: " The unique account ID for the customer that the payment is\
          \ for.\n**Character limit**: 32 **Values**: a valid account ID "
        type: string
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency value "
        format: double
        type: number
      AppliedCreditBalanceAmount:
        description: " The amount of the payment to apply to a credit balance. This\
          \ field is required in the Create call when the `AppliedInvoiceAmount` field\
          \ value is null.\n**Character limit**: 16 **Values**: a valid currency value "
        format: double
        type: number
      AuthTransactionId:
        description: " The authorization transaction ID from the payment gateway.\
          \ Use this field for electronic payments, such as credit cards.\n**Character\
          \ limit**: 50 **Values**: a string of 50 characters or fewer "
        type: string
      BankIdentificationNumber:
        description: " The first six digits of the credit card or debit card used\
          \ for the payment, when applicable.\n**Character limit**: 6 **Values**:\
          \ automatically generated "
        type: string
      CancelledOn:
        description: " The date when the payment was canceled.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Comment:
        description: " Additional information related to the payment.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The user ID of the person who created the `Payment` object.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the Payment object was created in the Zuora system.\n\
          **Character limit**: 29 **Values** automatically generated "
        format: date-time
        type: string
      EffectiveDate:
        description: " The date when the payment takes effect, in `yyyy-mm-dd` format.\n\
          **Character limit**: 29 "
        format: date
        type: string
      Gateway:
        description: ' Name of the gateway instance that processes the payment. When
          creating a Payment, this must be a valid gateway instance name and this
          gateway must support the specific payment method. If not specified, the
          default gateway on the Account will be used. '
        type: string
      GatewayOrderId:
        description: " A merchant-specified natural key value that can be passed to\
          \ the electronic payment gateway when a payment is created. If not specified,\
          \ the PaymentNumber will be passed in instead.\n**Character limit**: 70\
          \ **Values**: a string of 70 characters or fewer "
        type: string
      GatewayResponse:
        description: " The message returned from the payment gateway for the payment.\
          \ This message is gateway-dependent.\n**Character limit**: 500 **Values**:\
          \ automatically generated "
        type: string
      GatewayResponseCode:
        description: " The code returned from the payment gateway for the payment.\
          \ This code is gateway-dependent.\n**Character limit**: 20 **Values**: automatically\
          \ generated "
        type: string
      GatewayState:
        description: " The status of the payment in the gateway; use for reconciliation.\n\
          **Character limit**: 19 **Values**: automatically generated "
        type: string
      Id:
        description: Object identifier.
        type: string
      MarkedForSubmissionOn:
        description: ' The date when a payment was marked and waiting for batch submission
          to the payment process. **Character limit**: 29 **Values**: automatically
          generated '
        format: date-time
        type: string
      PaymentMethodId:
        description: " The ID of the payment method used for the payment. Required\
          \ for Create.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      PaymentMethodSnapshotId:
        description: " The unique ID of the payment method snapshot which is a copy\
          \ of the particular Payment Method used in a transaction.\n**Character limit**:\
          \ 32 **Values**: a valid payment method snapshot ID "
        type: string
      PaymentNumber:
        description: " The unique identification number of a payment. For example:\
          \ P-00000028.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      ReferenceId:
        description: " The transaction ID returned by the payment gateway. Use this\
          \ field to reconcile payments between your gateway and Z-Payments.\n**Character\
          \ limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      RefundAmount:
        description: " The amount of the payment that is refunded. This field is null\
          \ if no refund is made against the payment.\n**Character limit**: 16 **Values**:\
          \ automatically generated "
        format: double
        type: number
      SecondPaymentReferenceId:
        description: " The transaction ID returned by the payment gateway if there\
          \ is an additional transaction for the payment. Use this field to reconcile\
          \ payments between your gateway and Zuora Payments.\n**Character limit**:\
          \ 60 **Values**: a string of 60 characters or fewer "
        type: string
      SettledOn:
        description: " The date when the payment was settled in the payment processor.\
          \ This field is used by the Spectrum gateway only and not applicable to\
          \ other gateways.\n**Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      SoftDescriptor:
        description: ' A payment gateway-specific field that maps to Zuora for the
          gateways, Orbital, Vantiv and Verifi. **Character limit**: 35 **Values**:
          `[SDMerchantName]*[SDProductionInfo]` '
        type: string
      SoftDescriptorPhone:
        description: ' A payment gateway-specific field that maps to Zuora for the
          gateways, Orbital, Vantiv and Verifi. **Character limit**: 20 **Values**:
          `[SDPhone]` '
        type: string
      Source:
        description: " Indicates how the payment was created, whether through API,\
          \ manually, import, or payment run.\n**Character limit**: **Values**: Payment\
          \ Run, Import, Manually, and API "
        type: string
      SourceName:
        description: " Name of the source.\n**Character limit**: **Values**: Payment\
          \ Run number or a file name. "
        type: string
      Status:
        description: " The status of the payment in Zuora. The value depends on the\
          \ type of payment.\n**Character limit**: 11 **Values**: one of the following:\n\
          \n-  Electronic payments: `Processed`, `Error`, `Voided`\n\n-  External\
          \ payments: `Processed`, `Canceled`\n* Update of status can change value\
          \ from `Processed` to `Canceled` when the payment type is external. "
        type: string
      SubmittedOn:
        description: " The date when the payment was submitted.\n**Character limit:**\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      TransferredToAccounting:
        description: " Indicates if the payment was transferred to an external accounting\
          \ system. Use this field for integration with accounting systems, such as\
          \ NetSuite.\n**Character limit**: 11 **Values**: `Processing`, `Yes`, `Error`,\
          \ `Ignore` "
        type: string
      Type:
        description: " Indicates if the payment is external or electronic.\n**Character\
          \ limit**: 10 **Values**: `External`, `Electronic` "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the payment.\n**Character\
          \ limit**: **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the payment was last updated.\n**Character limit**:\
          \ **Values** **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetPaymentMethod:
    properties:
      AccountId:
        description: ' The ID of the customer account associated with this payment
          method. This field is not required for the account ID. '
        type: string
      AchAbaCode:
        description: " The nine-digit routing number or ABA number used by banks.\
          \ Use this field for ACH payment methods.\n**Character limit**: 9 **Values**:\
          \ a string of 9 characters or fewer "
        type: string
      AchAccountName:
        description: " The name of the account holder, which can be either a person\
          \ or a company. Use this field for ACH payment methods.\n**Character limit**:\
          \ 70 **Values**: a string of 70 characters or fewer "
        type: string
      AchAccountNumberMask:
        description: " This is a masked displayable version of the ACH account number,\
          \ used for security purposes. For example: `XXXXXXXXX54321`. Use this field\
          \ for ACH payment methods.\n**Character limit**: 32 **Values**: automatically\
          \ generated "
        type: string
      AchAccountType:
        description: |2
           The type of bank account associated with the ACH payment. Use this field for ACH payment methods.
          **Character limit**: 16 **Values**:

          - `BusinessChecking`
          - `Checking`
          - `Saving`
        type: string
      AchAddress1:
        description: " Line 1 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchAddress2:
        description: " Line 2 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchBankName:
        description: " The name of the bank where the ACH payment account is held.\
          \ Use this field for ACH payment methods.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      Active:
        description: " Specifies whether a payment method is available in Zuora. The\
          \ default value is `false`.\n**Character limit**: 5 **Values**: `true`,\
          \ `false` "
        type: boolean
      BankBranchCode:
        description: " The branch code of the bank used for direct debit. Use this\
          \ field for direct debit payment methods.\n**Character limit**: 10 **Values**:\
          \  string of 10 characters or fewer "
        type: string
      BankCheckDigit:
        description: 'The check digit in the international bank account number, which
          confirms the validity of the account. Use this field for direct debit payment
          methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer '
        type: string
      BankCity:
        description: " The city of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:70 **Values**:  string of\
          \ 70 characters or fewer "
        type: string
      BankCode:
        description: " The sort code or number that identifies the bank. This is also\
          \ known as the sort code. This field is required for direct debit payment\
          \ methods.\n**Character limit**: 18 **Values**:  string of 18 characters\
          \ or fewer "
        type: string
      BankIdentificationNumber:
        description: " The first six digits of the payment method's number, such as\
          \ the credit card number or account number. Banks use this number to identify\
          \ a payment method.\n**Character limit**: 6 **Values**:  string of 6 characters\
          \ or fewer "
        type: string
      BankName:
        description: " The name of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      BankPostalCode:
        description: " The zip code or postal code of the direct debit bank. Use this\
          \ field for direct debit payment methods.\n**Character limit**:20 **Values**:\
          \  string of 20 characters or fewer "
        type: string
      BankStreetName:
        description: " The name of the street of the direct debit bank. Use this field\
          \ for direct debit payment methods.\n**Character limit**:60 **Values**:\
          \  string of 60 characters or fewer "
        type: string
      BankStreetNumber:
        description: " The number of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:10 **Values**:  string of\
          \ 10 characters or fewer "
        type: string
      BankTransferAccountName:
        description: " The name on the direct debit bank account. Use this field for\
          \ direct debit payment methods.\n**Character limit**: 60 **Values**:  string\
          \ of 60 characters or fewer "
        type: string
      BankTransferAccountNumberMask:
        description: " This is a masked displayable version of the ACH account number,\
          \ used for security purposes. For example: `XXXXXXXXX54321`.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      BankTransferAccountType:
        description: " The type of the customer's bank account. Use this field for\
          \ direct debit payment methods.\n**Character limit**: 11 **Values**: `DirectDebit` "
        type: string
      BankTransferType:
        description: |2
           Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user. Use this field is used for direct debit payment methods.
          **Character limit**: 20 **Values**:

          - `AutomatischIncasso` (NL)
          - `LastschriftDE` (Germany)
          - `LastschriftAT` (Austria)
          - `DemandeDePrelevement` (FR)
          - `DirectDebitUK` (UK)
          - `Domicil` (Belgium)
          - `LastschriftCH` (CH)
          - `RID` (Italy)
          - `OrdenDeDomiciliacion` (Spain)
        type: string
      BusinessIdentificationCode:
        description: " The business identification code for Swiss direct payment methods\
          \ that use the Global Collect payment gateway. Use this field only for direct\
          \ debit payments in Switzerland with Global Collect.\n**Character limit**:\
          \ 11 **Values**: string of 11 characters or fewer "
        type: string
      City:
        description: " The city of the customer's address. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      Country:
        description: " The two-letter country code of the customer's address. Use\
          \ this field for direct debit payment methods.\n**Character limit**: 2 **Values**:\
          \ a valid country code "
        type: string
      CreatedById:
        description: " The user ID of the person who created the `PaymentMethod` object\
          \ when there is a login user in the user session. In Hosted Payment Method\
          \ and Zuora Checkout pages, this field is set to 3 as there is no login\
          \ user to initiate a user session.\n**Character limit**: 32 **Values**:\
          \ automatically generated "
        type: string
      CreatedDate:
        description: " The date when the `PaymentMethod` object was created in the\
          \ Zuora system.\n**Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      CreditCardAddress1:
        description: " The first line of the card holder's address, which is often\
          \ a street address or business name. Use this field for credit card and\
          \ direct debit payment methods.\n**Character limit**: 255 **Values**: a\
          \ string of 255 characters or fewer "
        type: string
      CreditCardAddress2:
        description: " The second line of the card holder's address. Use this field\
          \ for credit card and direct debit payment methods.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreditCardCity:
        description: ' The city of the card holder''s address. Use this field for
          credit card and direct debit payment methods **Character limit**: 40 **Values**:
          a string of 40 characters or fewer '
        type: string
      CreditCardCountry:
        description: ' The country of the card holder''s address. '
        type: string
      CreditCardExpirationMonth:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 2 **Values**: a two-digit number, 01 - 12 "
        format: int32
        type: integer
      CreditCardExpirationYear:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 4 **Values**: a four-digit number "
        format: int32
        type: integer
      CreditCardHolderName:
        description: " The full name of the card holder. Use this field for credit\
          \ card and direct debit payment methods.\n**Character limit**: 50 **Values**:\
          \ a string of 50 characters or fewer "
        type: string
      CreditCardMaskNumber:
        description: " A masked version of the credit or debit card number.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreditCardPostalCode:
        description: " The billing address's zip code. This field is required only\
          \ when you define a debit card or credit card payment.\n**Character limit**:\
          \ 20 **Values**: a string of 20 characters or fewer "
        type: string
      CreditCardState:
        description: ' The billing address''s state. Use this field is if the `CreditCardCountry`
          value is either Canada or the US. State names must be spelled in full. '
        type: string
      CreditCardType:
        description: " The type of credit card or debit card. This field is required\
          \ only when you define a debit card or credit card payment.\n**Character\
          \ limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` "
        type: string
      DeviceSessionId:
        description: " The session ID of the user when the `PaymentMethod` was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: "
        type: string
      Email:
        description: " An email address for the payment method in addition to the\
          \ bill to contact email address.\n**Character limit**: 80 **Values**: a\
          \ string of 80 characters or fewer "
        type: string
      ExistingMandate:
        description: " Indicates if the customer has an existing mandate or a new\
          \ mandate. A mandate is a signed authorization for UK and NL customers.\
          \ When you are migrating mandates from another system, be sure to set this\
          \ field correctly. If you indicate that a new mandate is an existing mandate\
          \ or vice-versa, then transactions fail. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No` "
        type: string
      FirstName:
        description: " The customer's first name. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 30 **Values**: a string\
          \ of 30 characters or fewer "
        type: string
      IBAN:
        description: " The International Bank Account Number. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 42 **Values**:\
          \ a string of 42 characters or fewer "
        type: string
      IPAddress:
        description: " The IP address of the user when the payment method was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently PayPal, CyberSource, Authorize.Net, and Verifi support this\
          \ field.\n**Character limit**: 15 **Values**: a string of 15 characters\
          \ or fewer "
        type: string
      Id:
        description: Object identifier.
        type: string
      LastFailedSaleTransactionDate:
        description: " The date of the last failed attempt to collect payment with\
          \ this payment method.\n**Character limit**: 29 **Values**: automatically\
          \ generated "
        format: date-time
        type: string
      LastName:
        description: " The customer's last name. This field is used only for the direct\
          \ debit payment method.\n**Character limit**: 70 **Values**: a string of\
          \ 70 characters or fewer "
        type: string
      LastTransactionDateTime:
        description: " The date of the most recent transaction.\n**Character limit**:\
          \ 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      LastTransactionStatus:
        description: " The status of the most recent transaction.\n**Character limit**:\
          \ 39 **Values**: automatically generated "
        type: string
      MandateCreationDate:
        description: " The date when the mandate was created, in `yyyy-mm-dd` format.\
          \ A mandate is a signed authorization for UK and NL customers. This field\
          \ is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MandateID:
        description: " The ID of the mandate. A mandate is a signed authorization\
          \ for UK and NL customers. This field is used only for the direct debit\
          \ payment method.\n**Character limit**: 36 **Values**: a string of 36 characters\
          \ or fewer "
        type: string
      MandateReceived:
        description: " Indicates if  the mandate was received. A mandate is a signed\
          \ authorization for UK and NL customers. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No `(case-sensitive) "
        type: string
      MandateUpdateDate:
        description: " The date when the mandate was last updated, in `yyyy-mm-dd`\
          \ format. A mandate is a signed authorization for UK and NL customers. This\
          \ field is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MaxConsecutivePaymentFailures:
        description: " Specifies the number of allowable consecutive failures Zuora\
          \ attempts with the payment method before stopping.\n**Values**: a valid\
          \ number "
        type: integer
      Name:
        description: ' Create Query Delete Filter '
        type: string
      NumConsecutiveFailures:
        description: " The number of consecutive failed payment for this payment method.\
          \ It is reset to 0 upon successful payment. You can use the API to update\
          \ the field value to 0.\n**Character limit**: **Values**: a positive whole\
          \ number "
        format: int32
        type: integer
      PaymentMethodStatus:
        description: |2
           Specifies the status of the payment method. It is set to Active on creation.
          **Character limit**: 6 **Values**: `Active` or `Closed`
        type: string
      PaymentRetryWindow:
        description: " The retry interval setting, which prevents making a payment\
          \ attempt if the last failed attempt was within the last specified number\
          \ of hours. This field is required if the `UseDefaultRetryRule` field value\
          \ is set to `false`.\n**Character limit**: 4 **Values**: a whole number\
          \ between 1 and 1000, exclusive "
        type: integer
      PaypalBaid:
        description: " The PayPal billing agreement ID, which is a contract between\
          \ two PayPal accounts. Typically, the selling party initiates a request\
          \ to create a BAID, and sends it to buying party for acceptance. The seller\
          \ can keep track of the BAID and use it for future charges against the buyer.\
          \ This field is required when defining a PayPal payment method.\n**Character\
          \ limit**: 64 **Values**: a string of 64 characters or fewer "
        type: string
      PaypalEmail:
        description: " The email address associated with the account holder's PayPal\
          \ account or of the PayPal account of the person paying for the service.\
          \ This field is required only when you define a PayPal payment method.\n\
          **Character limit**: 80 **Values**: a string of 80 characters or fewer "
        type: string
      PaypalPreapprovalKey:
        description: " PayPal's Adaptive Payments API key. Zuora does not create this\
          \ key, nor does it call PayPal to generate it. You must use PayPal's Adaptive\
          \ Payments' API to generate this key, and then pass it to Zuora. Zuora uses\
          \ this key to authorize future payments to PayPal's Adaptive Payments API.\
          \ This field is required when you use PayPal Adaptive Payments gateway.\n\
          **Character limit**: 32 **Values**: a valid PayPal Adaptive Payment pre-approval\
          \ key "
        type: string
      PaypalType:
        description: " Specifies the PayPal gateway: PayFlow Pro (Express Checkout)\
          \ or Adaptive Payments. This field is required when you use PayPal Adaptive\
          \ Payments or Payflow Pro (Express Checkout) gateways.\n**Character limit**:\
          \ 32 **Values**: `ExpressCheckout`, `AdaptivePayments` "
        type: string
      Phone:
        description: " The phone number that the account holder registered with the\
          \ bank. This field is used for credit card validation when passing to a\
          \ gateway.\n**Character limit**: 40 **Values**: a string of 40 characters\
          \ or fewer "
        type: string
      PostalCode:
        description: " The zip code of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 20 **Values**:\
          \ a string of 20 characters or fewer "
        type: string
      SecondTokenId:
        description: ' A gateway unique identifier that replaces sensitive payment
          method data. SecondTokenId is conditionally required only when TokenID is
          being used to represent a gateway customer profile. SecondTokenId is used
          in the CC Reference Transaction payment method. **Character limit**: 64
          **Values**: a string of 64 characters or fewer '
        type: string
      State:
        description: " The state of the customer's address. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      StreetName:
        description: " The street name of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      StreetNumber:
        description: " The street number of the customer's address. This field is\
          \ used only for the direct debit payment method.\n**Character limit**: 30\
          \ **Values**: a string of 30 characters or fewer "
        type: string
      TokenId:
        description: " A gateway unique identifier that replaces sensitive payment\
          \ method data or represents a gateway's unique customer profile. When TokenId\
          \ is used to represent a customer profile, then SecondTokenId is conditionally\
          \ required for representing the underlying tokenized payment method. TokenId\
          \ is required for the CC Reference Transaction payment method.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      TotalNumberOfErrorPayments:
        description: " The number of error payments that used this payment method.\n\
          **Character limit**: **Values**: automatically generated "
        format: int32
        type: integer
      TotalNumberOfProcessedPayments:
        description: " The number of successful payments that used this payment method.\n\
          **Character limit**: **Values**: automatically generated "
        format: int32
        type: integer
      Type:
        description: ' Create Query Update Delete Filter '
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the payment method.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the payment method was last updated.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      UseDefaultRetryRule:
        description: " Determines whether to use the default retry rules configured\
          \ in the Zuora Payments settings. Set this to `true` to use the default\
          \ retry rules. Set this to `false` to set the specific rules for this payment\
          \ method. If you set this value to `false`, then the fields, `PaymentRetryWindow`\
          \ and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**:\
          \ 5 **Values**: `t``rue`, `false` "
        type: boolean
    type: object
  ProxyGetPaymentMethodSnapshot:
    properties:
      AccountId:
        description: ''
        type: string
      AchAbaCode:
        description: ''
        type: string
      AchAccountName:
        description: ''
        type: string
      AchAccountNumberMask:
        description: ''
        type: string
      AchAccountType:
        description: ''
        type: string
      AchBankName:
        description: ''
        type: string
      BankBranchCode:
        description: ''
        type: string
      BankCheckDigit:
        description: ''
        type: string
      BankCity:
        description: ''
        type: string
      BankCode:
        description: ''
        type: string
      BankIdentificationNumber:
        description: ''
        type: string
      BankName:
        description: ''
        type: string
      BankPostalCode:
        description: ''
        type: string
      BankStreetName:
        description: ''
        type: string
      BankStreetNumber:
        description: ''
        type: string
      BankTransferAccountName:
        description: ''
        type: string
      BankTransferAccountNumberMask:
        description: ''
        type: string
      BankTransferAccountType:
        description: ''
        type: string
      BankTransferType:
        description: ''
        type: string
      BusinessIdentificationCode:
        description: ''
        type: string
      City:
        description: ''
        type: string
      Country:
        description: ''
        type: string
      CreditCardAddress1:
        description: ''
        type: string
      CreditCardAddress2:
        description: ''
        type: string
      CreditCardCity:
        description: ''
        type: string
      CreditCardCountry:
        description: ''
        type: string
      CreditCardExpirationMonth:
        description: ''
        format: int32
        type: integer
      CreditCardExpirationYear:
        description: ''
        format: int32
        type: integer
      CreditCardHolderName:
        description: ''
        type: string
      CreditCardMaskNumber:
        description: ''
        type: string
      CreditCardPostalCode:
        description: ''
        type: string
      CreditCardState:
        description: ''
        type: string
      CreditCardType:
        description: ''
        type: string
      DeviceSessionId:
        description: ''
        type: string
      Email:
        description: ''
        type: string
      ExistingMandate:
        description: ''
        type: string
      FirstName:
        description: ''
        type: string
      IBAN:
        description: ''
        type: string
      IPAddress:
        description: ''
        type: string
      Id:
        description: Object identifier.
        type: string
      LastFailedSaleTransactionDate:
        description: ''
        format: date-time
        type: string
      LastName:
        description: ''
        type: string
      LastTransactionDateTime:
        description: ''
        format: date-time
        type: string
      LastTransactionStatus:
        description: ''
        type: string
      MandateCreationDate:
        description: ''
        format: date
        type: string
      MandateID:
        description: ''
        type: string
      MandateReceived:
        description: ''
        type: string
      MandateUpdateDate:
        description: ''
        format: date
        type: string
      MaxConsecutivePaymentFailures:
        description: ''
        type: integer
      Name:
        description: ''
        type: string
      NumConsecutiveFailures:
        description: ''
        format: int32
        type: integer
      PaymentMethodId:
        description: ''
        type: string
      PaymentMethodStatus:
        description: ''
        type: string
      PaymentRetryWindow:
        description: ''
        type: integer
      PaypalBaid:
        description: ''
        type: string
      PaypalEmail:
        description: ''
        type: string
      PaypalPreapprovalKey:
        description: ''
        type: string
      PaypalType:
        description: ''
        type: string
      Phone:
        description: ''
        type: string
      PostalCode:
        description: ''
        type: string
      SecondTokenId:
        description: ''
        type: string
      State:
        description: ''
        type: string
      StreetName:
        description: ''
        type: string
      StreetNumber:
        description: ''
        type: string
      TokenId:
        description: ''
        type: string
      TotalNumberOfErrorPayments:
        description: ''
        format: int32
        type: integer
      TotalNumberOfProcessedPayments:
        description: ''
        format: int32
        type: integer
      Type:
        description: ''
        type: string
      UseDefaultRetryRule:
        description: ''
        type: boolean
    type: object
  ProxyGetPaymentMethodTransactionLog:
    properties:
      Gateway:
        description: ''
        type: string
      GatewayReasonCode:
        description: ''
        type: string
      GatewayReasonCodeDescription:
        description: ''
        type: string
      GatewayTransactionType:
        description: ''
        type: string
      Id:
        description: Object identifier.
        type: string
      PaymentMethodId:
        description: ''
        type: string
      PaymentMethodType:
        description: ''
        type: string
      RequestString:
        description: ''
        type: string
      ResponseString:
        description: ''
        type: string
      TransactionDate:
        description: ''
        format: date-time
        type: string
      TransactionId:
        description: ''
        type: string
    type: object
  ProxyGetPaymentTransactionLog:
    properties:
      AVSResponseCode:
        description: ''
        type: string
      BatchId:
        description: ''
        type: string
      CVVResponseCode:
        description: ''
        type: string
      Gateway:
        description: ''
        type: string
      GatewayReasonCode:
        description: ''
        type: string
      GatewayReasonCodeDescription:
        description: ''
        type: string
      GatewayState:
        description: ''
        type: string
      GatewayTransactionType:
        description: ''
        type: string
      Id:
        description: Object identifier.
        type: string
      PaymentId:
        description: ''
        type: string
      RequestString:
        description: ''
        type: string
      ResponseString:
        description: ''
        type: string
      TransactionDate:
        description: ''
        format: date-time
        type: string
      TransactionId:
        description: ''
        type: string
    type: object
  ProxyGetProduct:
    properties:
      AllowFeatureChanges:
        description: " Controls whether to allow your users to add or remove features\
          \ while creating or amending a subscription.\n**Character** **limit**: n/a\n\
          **Values**: true, false (default) "
        type: boolean
      Category:
        description: |2
           Category of the product. Used by Zuora Quotes Guided Product Selector.
          **Character** **limit**: 100
          **Values**: One of the following:

          - Base Products
          - Add On Services
          - Miscellaneous Products
        type: string
      CreatedById:
        description: 'The ID of the Zuora user who created the `Product` object. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date when the `Product` object was created.\n**Character\
          \ limit**: n/a **Values**: automatically generated "
        format: date-time
        type: string
      Description:
        description: ' A descriptionof the product. **Character limit**: 500 **Values**:
          a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: 'The date when the product expires and can''t be subscribed to
          anymore, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      EffectiveStartDate:
        description: 'The date when the product becomes available and can be subscribed
          to, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: 'The name of the product. This information is displayed in the
          product catalog pages in the web-based UI. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      SKU:
        description: |
          The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:

          - leave null for automatic generated
          - an alphanumeric string of 50 characters or fewer
        type: string
      UpdatedById:
        description: 'The ID of the last user to update the object. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'The date when the object was last updated. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
    type: object
  ProxyGetProductFeature:
    properties:
      CreatedById:
        description: 'The ID of the Zuora user who created the Account object. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'The date when the Account object was created. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
      FeatureId:
        description: " Internal Zuora ID of the product feature. This field is not\
          \ editable.\n**Character limit**: 32 **Values**: a string of 32 characters\
          \ or fewer "
        type: string
      Id:
        description: Object identifier.
        type: string
      ProductId:
        description: " Id of the product to which the feature belongs. This field\
          \ is not editable.\n**Character limit**: 32 **Values**: a string of 32 characters\
          \ or fewer "
        type: string
      UpdatedById:
        description: 'The ID of the user who last updated the account. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'The date when the account was last updated. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
    type: object
  ProxyGetProductRatePlan:
    properties:
      CreatedById:
        description: 'The ID of the Zuora user who created the `ProductRatePlan` object.
          **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date when the `ProductRatePlan` object was created.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Description:
        description: 'A description of the product rate plan. **Character limit**:
          500 **Values**: a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: " The date when the product rate plan expires and can't be subscribed\
          \ to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      EffectiveStartDate:
        description: " The date when the product rate plan becomes available and can\
          \ be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: 'The name of the product rate plan. The name doesn''t have to
          be unique in a Product Catalog, but the name has to be unique within a product.
          **Character limit**: 100 **Values**: a string of 100 characters or fewer '
        type: string
      ProductId:
        description: 'The ID of the product that contains the product rate plan. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      UpdatedById:
        description: 'The ID of the last user to update the object. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'The date when the object was last updated. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
    type: object
  ProxyGetProductRatePlanCharge:
    properties:
      AccountingCode:
        description: 'The accounting code for the charge. Accounting codes group transactions
          that contain similar accounting attributes. **Character limit**: 100 **Values**:
          an active accounting code in your Zuora Chart of Accounts '
        type: string
      ApplyDiscountTo:
        description: |
          Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive: note that these values are in all-caps. **Character limit**: 21 **Values**: one of the following:

          - `ONETIME (1)`
          - `RECURRING (2)`
          - `USAGE (4)`
          - `ONETIMERECURRING (3)`
          - `ONETIMEUSAGE (5)`
          - `RECURRINGUSAGE (6)`
          - `ONETIMERECURRINGUSAGE (7)`
        type: string
      BillCycleDay:
        description: " Sets the bill cycle day (BCD) for the charge. The BCD determines\
          \ which day of the month customer is billed. The BCD value in the account\
          \ can override the BCD in this object.\n**Character limit**: 2 **Values**:\
          \ a valid BCD integer, 1 - 31 "
        format: int32
        type: integer
      BillCycleType:
        description: |2
           Specifies how to determine the billing day for the charge. **Character limit**: 20 **Values**: one of the following:

          - `DefaultFromCustomer`
          - `SpecificDayofMonth:`
          - `SubscriptionStartDay`
          - `ChargeTriggerDay`
          - `SpecificDayofWeek`
          **Note**:

          - If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field.
          - If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field.
        type: string
      BillingPeriod:
        description: " The billing period for the charge. The start day of the billing\
          \ period is also called the bill cycle day (BCD).\n**Character limit**:\
          \ 15 **Values**: one of the following\n\n- `Month`\n- `Quarter`\n- `Annual`\n\
          - `Semi-Annual`\n- `Specific Months`\n- `Subscription Term` (This value\
          \ is in **Limited Availability**.)\n- `Week`\n- `Specific Weeks`\n**Note**:\
          \ Specify the number of months or weeks in the SpecificBillingPeriod field\
          \ if you set this field to `Specific Months` or `Specific Weeks`. "
        type: string
      BillingPeriodAlignment:
        description: |2
           Aligns charges within the same subscription if multiple charges begin on different dates.
          **Character limit**: 24 **Values**: one of the following:

          - `AlignToCharge`
          - `AlignToSubscriptionStart`
          - `AlignToTermStart`
        type: string
      BillingTiming:
        description: |2+
           The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
          **Character limit**: **Values**: one of the following:

          - `In Advance`
          - `In Arrears`

          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

        type: string
      ChargeModel:
        description: |2
           Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
          **Character limit**: 27 **Values**: one of the following:

          - `Discount-Fixed Amount`
          - `Discount-Percentage`
          - `Flat Fee Pricing`
          - `Per Unit Pricing`
          - `Overage Pricing`
          - `Tiered Pricing`
          - `Tiered with Overage Pricing`
          - `Volume Pricing`
        type: string
      ChargeType:
        description: |2
           Specifies the type of charge.
          **Character limit**: 9 **Values**: one of the following:

          - `OneTime`
          - `Recurring`
          - `Usage`
        type: string
      CreatedById:
        description: 'The ID of the Zuora user who created the `ProductRatePlanCharge`
          object. **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date when the  `ProductRatePlanCharge` object was created.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      DefaultQuantity:
        description: " The default quantity of units, such as the number of authors\
          \ in a hosted wiki service. This field is required if you use a per-unit\
          \ pricing model.\n**Character limit**: 16 **Values**: a valid quantity value "
        format: double
        type: number
      DeferredRevenueAccount:
        description: |2+
           The name of the deferred revenue account for this charge.
          **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts
          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

        type: string
      Description:
        description: 'A description of the charge. **Character limit**: 500 **Values**:
          a string of 500 characters or fewer '
        type: string
      DiscountLevel:
        description: |2
           Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account.
          **Character limit**: 12 **Values**: one of the following:

          - `rateplan`
          - `subscription`, `account`
        type: string
      EndDateCondition:
        description: " Defines when the charge ends after the charge trigger date.\n\
          **Values**: one of the following:\n\n- `SubscriptionEnd`: The charge ends\
          \ on the subscription end date after a specified period based on the trigger\
          \ date of the charge. This is the default value.\n- `FixedPeriod`: The charge\
          \ ends after a specified period based on the trigger date of the charge.\
          \ If you set this field to `FixedPeriod`, you must specify the length of\
          \ the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType`\
          \ fields.\n**Note**: If the subscription ends before the charge end date,\
          \ the charge ends when the subscription ends. But if the subscription end\
          \ date is subsequently changed through a Renewal, or Terms and Conditions\
          \ amendment, the charge will end on the charge end date. "
        type: string
      Id:
        description: Object identifier.
        type: string
      IncludedUnits:
        description: 'Specifies the number of units in the base set of units. **Character
          limit**: 16 **Values**: a positive decimal value '
        format: double
        type: number
      LegacyRevenueReporting:
        description: ''
        type: boolean
      ListPriceBase:
        description: |
          The list price base for the product rate plan charge. **Values**: one of the following:

          - `Per Month`
          - `Per Billing Period`
          - `Per Week`
        type: string
      MaxQuantity:
        description: " Specifies the maximum number of units for this charge. Use\
          \ this field and the `MinQuantity` field to create a range of units allowed\
          \ in a product rate plan charge.\n**Character limit**: 16 **Values**: a\
          \ positive decimal value "
        format: double
        type: number
      MinQuantity:
        description: 'Specifies the minimum number of units for this charge. Use this
          field and the `MaxQuantity` field to create a range of units allowed in
          a product rate plan charge. **Character limit**: 16 **Values**: a positive
          decimal value '
        format: double
        type: number
      Name:
        description: 'The name of the product rate plan charge. **Character limit**:
          100 **Values**: a string of 100 characters or fewer '
        type: string
      NumberOfPeriod:
        description: 'Specifies the number of periods to use when calculating charges
          in an overage smoothing charge model. **Character limit**: **Values**: a
          positive whole number '
        format: int64
        type: integer
      OverageCalculationOption:
        description: |
          Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored. **Character limit**: 20 **Values**: one of the following:

          - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
          - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
        type: string
      OverageUnusedUnitsCreditOption:
        description: |2
           Determines whether to credit the customer with unused units of usage.
          **Character limit**: 20 **Values**: one of the following:

          - `NoCredit`
          - `CreditBySpecificRate`
        type: string
      PriceChangeOption:
        description: |2
           Applies an automatic price change when a termed subscription is renewed.
          **Character limit**: **Values**: one of the following:

          - `NoChange` (default)
          - `SpecificPercentageValue`
          - `UseLatestProductCatalogPricing`
        type: string
      PriceIncreasePercentage:
        description: " Specifies the percentage to increase or decrease the price\
          \ of a termed subscription's renewal. Use this field if you set the value\
          \ to `SpecificPercentageValue`.\n**Character limit**: 16 **Values**: a decimal\
          \ value between -100 and 100 "
        format: double
        type: number
      ProductRatePlanId:
        description: " The ID of the product rate plan associated with this product\
          \ rate plan charge.\n**Character limit**: 32 **Values**: a valid product\
          \ rate plan ID "
        type: string
      RecognizedRevenueAccount:
        description: |2+
           The name of the recognized revenue account for this charge.

          - Required when the Allow Blank Accounting Code setting is No.
          - Optional when the Allow Blank Accounting Code setting is Yes.

          **Character limit**: 100 **Values**: an active accounting code in your Zuora Chart of Accounts
          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

        type: string
      RevRecCode:
        description: 'Associates this product rate plan charge with a specific revenue
          recognition code. **Character limit**: 70 **Values**: a valid revenue recognition
          code '
        type: string
      RevRecTriggerCondition:
        description: |2
           Specifies when revenue recognition begins.
          **Character limit**: 22 **Values**: one of the following:

          - `ContractEffectiveDate`
          - `ServiceActivationDate`
          - `CustomerAcceptanceDate`
        type: string
      RevenueRecognitionRuleName:
        description: |
          Determines when to recognize the revenue for this charge. **Character limit**: 25 **Values**: one of the following:

          - `Recognize upon invoicing`
          - `Recognize daily over time`
        type: string
      SmoothingModel:
        description: |2
           Specifies the smoothing model for an overage smoothing charge model.
          **Character limit**: 22 **Values**: one of the following:

          - `RollingWindow`
          - `Rollover`
        type: string
      SpecificBillingPeriod:
        description: " Customizes the number of months or weeks for the charges billing\
          \ period. This field is required if you set the value of the BillingPeriod\
          \ field to `Specific Months` or `Specific Weeks`.\n**Values**: a positive\
          \ integer "
        format: int64
        type: integer
      TaxCode:
        description: " Specifies the tax code for taxation rules. Required when the\
          \ Taxable field is set to `True`.\n\n**Character limit**: 64\n\n**Values**:\
          \ a valid tax code\n\n**Note**: This value affects the tax calculation of\
          \ rate plan charges that come from the `ProductRatePlanCharge`. "
        type: string
      TaxMode:
        description: " Determines how to define taxation for the charge. Required\
          \ when the Taxable field is set to `True`.\n\n**Character limit**: 12\n\n\
          **Values**: one of the following:\n\n- `TaxExclusive`\n- `TaxInclusive`\n\
          \n**Note**: This value affects the tax calculation of rate plan charges\
          \ that come from the `ProductRatePlanCharge`. "
        type: string
      Taxable:
        description: " Determines whether the charge is taxable. When set to `True`,\
          \ the TaxMode and TaxCode fields are required when creating or updating\
          \ th ProductRatePlanCharge object.\n\n**Character limit**: 5\n\n**Values**:\
          \ `True`, `False`\n\n**Note**: This value affects the tax calculation of\
          \ rate plan charges that come from the `ProductRatePlanCharge`. "
        type: boolean
      TriggerEvent:
        description: |2
           Specifies when to start billing the customer for the charge.
          **Character limit**: 18 **Values**: one of the following:

          - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
          - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
          - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
        type: string
      UOM:
        description: |2
           Specifies the units to measure usage.
          **Character limit**: 25 **Values**: a configured unit of measure **Note**: You must specify this field when creating the following charge models:

          - Per Unit Pricing
          - Volume Pricing
          - Overage Pricing
          - Tiered Pricing
          - Tiered with Overage Pricing
        type: string
      UpToPeriods:
        description: |2
           Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
          **Character limit**: 5 **Values**: a whole number between 0 and 65535, exclusive **Note**:

          - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
          - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
        format: int64
        type: integer
      UpToPeriodsType:
        description: |2
           The period type used to define when the charge ends.
          **Character limit**: -- **Values**: one of the following:

          - `Billing Periods` (default)
          - `Days`
          - `Weeks`
          - `Months`
          - Years
          **Note**:

          - You must use this field together with the `UpToPeriods` field to specify the time period.
          - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
        type: string
      UpdatedById:
        description: 'The ID of the last user to update the object. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: 'The date when the object was last updated. **Character limit**:
          29 **Values**: automatically generated '
        format: date-time
        type: string
      UseDiscountSpecificAccountingCode:
        description: 'Determines whether to define a new accounting code for the new
          discount charge. **Character limit**: 5 **Values**: `True`, `False` '
        type: boolean
      UseTenantDefaultForPriceChange:
        description: ' Applies the tenant-level percentage uplift value for an automatic
          price change to a termed subscription''s renewal. **Character limit**: 5
          **Values**: `true`, `false` '
        type: boolean
      WeeklyBillCycleDay:
        description: |2
           Specifies which day of the week as the bill cycle day (BCD) for the charge.
          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

          **Values**: one of the following:

          - `Sunday`
          - `Monday`
          - `Tuesday`
          - `Wednesday`
          - `Thursday`
          - `Friday`
          - `Saturday`
        type: string
    type: object
  ProxyGetProductRatePlanChargeTier:
    properties:
      CreatedById:
        description: 'The ID of the Zuora user who created the ProductRatePlanChargeTier
          object. **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'The date when the ProductRatePlanChargeTier object was created.
          **Character limit**: 29 **Values**: automatically generated '
        format: date-time
        type: string
      Currency:
        description: 'The code corresponding to the currency for the tier''s price.
          **Character limit**: 3 **Values**: a valid currency code '
        type: string
      EndingUnit:
        description: 'The end number of a range of units for the tier. **Character
          limit**: 16 **Values**: any positive decimal value '
        format: double
        type: number
      Id:
        description: Object identifier.
        type: string
      Price:
        description: " The price of the tier if the charge is a flat fee, or the price\
          \ of each unit in the tier if the charge model is tiered pricing.\n**Character\
          \ limit**: 16 **Values**: a valid currency value "
        format: double
        type: number
      PriceFormat:
        description: 'Indicates if pricing is a flat fee or is per unit. This field
          is for tiered and volume pricing models only. **Character limit**: 8 **Values**:
          `FlatFee`, `PerUnit` **Note:** The values `Flat Fee` and `Per Unit` (with
          spaces) is valid for create or update calls. '
        type: string
      StartingUnit:
        description: " The starting number of a range of units for the tier.\n**Character\
          \ limit**: 16 **Values**: any positive decimal value "
        format: double
        type: number
      Tier:
        description: " A unique number that identifies the tier that the price applies\
          \ to.\n**Character limit**: 20 **Values**: automatically generated "
        format: int32
        type: integer
      UpdatedById:
        description: " The ID of the user who last updated the product rate plan charge\
          \ tier.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the product rate plan charge tier was last updated.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetRatePlan:
    properties:
      AmendmentId:
        description: " The ID of the amendment associated with the rate plan. This\
          \ field only applies to amendment rate plans.\n**Character limit**: 32 **Values**:\
          \ a valid amendment ID "
        type: string
      AmendmentType:
        description: 'The type of amendment associated with the rate plan. This field
          only applies to amendment rate plans. '
        type: string
      CreatedById:
        description: 'The ID of the Zuora user who created the RatePlan object. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: 'The date when the `RatePlan` object was last updated. **Character
          limit**: 29 **Values**: automatically generated '
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: "The name of the rate plan.\n\n**Values**: inherited from `ProductRatePlan.Name` "
        type: string
      SubscriptionId:
        description: 'The ID of the subscription that the rate plan belongs to. **Character
          limit**: 32 **Values**: a valid subscription ID '
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the rate plan.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the rate plan was last updated.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetRatePlanCharge:
    properties:
      AccountingCode:
        description: "The accounting code for the charge. Accounting codes group transactions\
          \ that contain similar accounting attributes.\n\n**Character limit**: 100\n\
          \n**Values**: inherited from `ProductRatePlanCharge.AccountingCode`\n\n\
          **Note**: This value changes if `ProductRatePlanCharge.AccountingCode` is\
          \ updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge`\
          \ do not change when `ProductRatePlanCharge.AccountingCode` is updated. "
        type: string
      ApplyDiscountTo:
        description: ' Specifies the type of charges a specific discount applies to.
          **Character limit**: 21 **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` '
        type: string
      BillCycleDay:
        description: " Indicates the charge's billing cycle day (BCD), which is when\
          \ bill runs generate invoices for charges associated with the product rate\
          \ plan charge or the account.\n**Character limit**: 2 **Values**: inherited\
          \ from `ProductRatePlanCharge.BillCycleDay` "
        format: int32
        type: integer
      BillCycleType:
        description: " Specifies how to determine the billing day for the charge.\n\
          **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.BillCycleType`\
          \ **Note:** You can override the value inherited from the Product Rate Plan\
          \ Charge, but only when creating a new subscription or a New Product amendment. "
        type: string
      BillingPeriod:
        description: " Allows billing period to be overridden on rate plan charge.\n\
          ****Values**: **inherited from `ProductRatePlanCharge.BillingPeriod` **Note:**\
          \ You can override the value inherited from the Product Rate Plan Charge,\
          \ but only when creating a new subscription or a New Product amendment. "
        type: string
      BillingPeriodAlignment:
        description: " Aligns charges within the same subscription if multiple charges\
          \ begin on different dates.\n**Character limit**: 24 **Values**: inherited\
          \ from `ProductRatePlanCharge.BillingPeriodAlignment` "
        type: string
      BillingTiming:
        description: |2+
           The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
          **Character limit**: **Values**: one of the following:

          - `In Advance`
          - `In Arrears`
          **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

        type: string
      ChargeModel:
        description: " Determines how to evaluate charges. Charge models must be individually\
          \ activated in the web-based UI.\n**Character limit**: 29 **Values**: inherited\
          \ from `ProductRatePlanCharge.ChargeModel` "
        type: string
      ChargeNumber:
        description: |2
           A unique number that identifies the charge. This number is returned as a string.
          **Character limit**: 50 **Values**: one of the following:

          - automatically generated if left null
          - a unique number of 50 characters or fewer
        type: string
      ChargeType:
        description: " Specifies the type of charge.\n**Character limit**: 9 **Values**:\
          \ inherited from `ProductRatePlanCharge.ChargeType` "
        type: string
      ChargedThroughDate:
        description: " The date through which a customer has been billed for the charge.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date
        type: string
      CreatedById:
        description: 'The ID of the Zuora user who created the `RatePlanCharge` object.
          **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date when the `RatePlanCharge` object was created.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      DMRC:
        description: 'A delta monthly recurring charge is the change in monthly recurring
          revenue caused by an amendment or a new subscription. **Character limit**:
          16 **Values**: automatically generated '
        format: double
        type: number
      DTCV:
        description: " After an Amendment, the change in the total contract value\
          \ (TCV) amount for this charge, compared with its previous value.\n**Character\
          \ limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      Description:
        description: " A description of the charge.\n**Character limit**: 500 **Values**:\
          \ inherited from `ProductRatePlanCharge.Description` "
        type: string
      DiscountLevel:
        description: 'Specifies if the discount applies to just the product rate plan,
          the entire subscription, or to any activity in the account. **Character
          limit**: 12 **Values**: inherited from `ProductRatePlanCharge.DiscountLevel` '
        type: string
      EffectiveEndDate:
        description: " The date when the segmented charge ends or ended.\n**Character\
          \ limit**: 16 **Values**: automatically generated "
        format: date
        type: string
      EffectiveStartDate:
        description: " The date when the segmented charge starts or started.\n**Character\
          \ limit**: 16 **Values**: automatically generated "
        format: date
        type: string
      EndDateCondition:
        description: " Defines when the charge ends after the charge trigger date.\
          \ This field can be updated when **Status** is `Draft`.\n**Values**: one\
          \ of the following:\n\n- `SubscriptionEnd`: The charge ends on the subscription\
          \ end date after the charge trigger date. This is the default value.\n-\
          \ `FixedPeriod`: The charge ends after a specified period based on the trigger\
          \ date of the charge. If you set this field to `FixedPeriod`, you must specify\
          \ the length of the period and a period type by defining the `UpToPeriods`\
          \ and `UpToPeriodsType` fields.\n- `SpecificEndDate`: The specific date\
          \ on which the charge ends. If you set this field to `SpecificEndDate`,\
          \ you must specify the specific date by defining the `SpecificEndDate` field.\n\
          \n**Note**: If the subscription ends before the charge end date, the charge\
          \ ends when the subscription ends. But if the subscription end date is subsequently\
          \ changed through a Renewal, or Terms and Conditions amendment, the charge\
          \ will end on the charge end date. "
        type: string
      Id:
        description: Object identifier.
        type: string
      IsLastSegment:
        description: 'Indicates if the segment of the rate plan charge is the most
          recent segment. **Character limit**: 5 **Values**: automatically generated:
          `true`, `false` '
        type: boolean
      ListPriceBase:
        description: |
          The list price base for the product rate plan charge. **Values**: one of the following:

          - `Per Month`
          - `Per Billing Period`
          - `Per Week`
        type: string
      MRR:
        description: 'Monthly recurring revenue (MRR) is the amount of recurring charges
          in a given month. The MRR calculation doesn''t include one-time charges
          nor usage charges. **Character limit**: 16 **Values**: automatically generated '
        format: double
        type: number
      Name:
        description: 'The name of the rate plan charge. **Character limit**: 100 **Values**:
          automatically generated '
        type: string
      NumberOfPeriods:
        description: 'Specifies the number of periods to use when calculating charges
          in an overage smoothing charge model. **Character limit**: 5 **Values**:
          inherited from `ProductRatePlanCharge.NumberOfPeriod` '
        format: int64
        type: integer
      OriginalId:
        description: 'The original ID of the rate plan charge. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      OverageCalculationOption:
        description: 'Determines when to calculate overage charges. If the value of
          the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode),
          the value of this field is ignored. **Character limit**: 20 **Values**:
          inherited from `ProductRatePlanCharge.OverageCalculationOption` '
        type: string
      OverageUnusedUnitsCreditOption:
        description: " Determines whether to credit the customer with unused units\
          \ of usage.\n**Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` "
        type: string
      PriceChangeOption:
        description: |2
           Applies an automatic price change when a termed subscription is renewed.
          **Character limit**: **Values**: one of the following:

          - `NoChange` (default)
          - `SpecificPercentageValue`
          - `UseLatestProductCatalogPricing`
        type: string
      PriceIncreasePercentage:
        description: " Specifies the percentage to increase or decrease the price\
          \ of renewed subscriptions.\n**Character limit**: 16 **Values**: a decimal\
          \ value between -100 and 100 "
        format: double
        type: number
      ProcessedThroughDate:
        description: " The date until when charges have been processed. When billing\
          \ in arrears, such as usage, this field value is the the same as the `ChargedThroughDate`\
          \ value. This date is the earliest date when a charge can be amended.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date
        type: string
      Quantity:
        description: " The default quantity of units, such as the number of authors\
          \ in a hosted wiki service. Valid for all charge models except for Flat\
          \ Fee pricing.\n**Character limit**: 16 **Values**: a valid quantity value "
        format: double
        type: number
      RatePlanId:
        description: " The ID of the rate plan associated with the rate plan charge.\n\
          **Character limit**: 32 **Values**: inherited from `RatePlan.Id` "
        type: string
      RevRecCode:
        description: " Associates this product rate plan charge with a specific revenue\
          \ recognition code.\n\n**Character limit**: 70\n\n**Values**: inherited\
          \ from `ProductRatePlanCharge.RevRecCode` or a valid revenue recognition\
          \ code\n\n**Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecCode`\
          \ is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge`\
          \ do not change when `ProductRatePlanCharge.RevRecCode` is updated. "
        type: string
      RevRecTriggerCondition:
        description: " Specifies when revenue recognition begins.\n\n**Character limit**:\
          \ 22\n\n**Values**: inherited from `ProductRatePlanCharge.RevRecTriggerCondition`\
          \ or one of the following:\n\n-  `ContractEffectiveDate`\n\n-  `ServiceActivationDate`\n\
          \n-  `CustomerAcceptanceDate`\n\nNote: Unless overridden, this value changes\
          \ if `ProductRatePlanCharge.RevRecTriggerCondition` is updated. The values\
          \ of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change\
          \ when `ProductRatePlanCharge.RevRecTriggerCondition` is updated. "
        type: string
      RevenueRecognitionRuleName:
        description: " Specifies the Revenue Recognition Rule that you want the Rate\
          \ Plan Charge to use. This field can be updated when **Status** is `Draft`.\
          \ By default, the Revenue Recognition Rule is inherited from the Product\
          \ Rate Plan Charge. For Amend calls, you can use this field only for NewProduct\
          \ amendments. For Update calls, you can use this field only to update subscriptions\
          \ in draft status. Note that if you use this field to specify a Revenue\
          \ Recognition Rule for the Rate Plan Charge, the rule will remain as specified\
          \ even if you later change the rule used by the corresponding Product Rate\
          \ Plan Charge.\n\n**Character limit**: n/a\n\n**Values**: inherited from\
          \ `ProductRatePlanCharge.RevenueRecognitionRuleName` or the name of an active\
          \ Revenue Recognition Rule\n\n**Note**: Unless overridden, this value changes\
          \ if `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. The\
          \ values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do\
          \ not change when `ProductRatePlanCharge.RevenueRecognitionRuleName` is\
          \ updated. "
        type: string
      Segment:
        description: " The identifying number of the subscription rate plan segment.\
          \ Segments are numbered sequentially, starting with 1.\n**Character limit**:\
          \ 2 **Values**: automatically generated "
        format: int32
        type: integer
      SpecificBillingPeriod:
        description: " Customizes the number of months or weeks for the charges billing\
          \ period. This field is required if you set the value of the BillingPeriod\
          \ field to `Specific Months` or `Specific Weeks`.\n**Character limit**:\
          \ 5 **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:**\
          \ You can override the value inherited from the Product Rate Plan Charge,\
          \ but only when creating a new subscription or a New Product amendment. "
        format: int64
        type: integer
      SpecificEndDate:
        description: |2
           The specific date on which the charge ends, in `yyyy-mm-dd` format.
          **Character limit**: 29 **Note**:

          - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
          - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
        format: date
        type: string
      TCV:
        description: " The total contract value (TCV) is the value of a single rate\
          \ plan charge in a subscription over the lifetime of the subscription. This\
          \ value does not represent all charges on the subscription. The TCV includes\
          \ recurring charges and one-time charges, but it doesn't include usage charge.\n\
          **Character limit**: 16 **Values**: automatically generated "
        format: double
        type: number
      TriggerDate:
        description: " The date when the charge becomes effective and billing begins,\
          \ in `yyyy-mm-dd` format. This field is required if the `TriggerEvent` field\
          \ value is `SpecificDate`.\n**Character limit**: 29 "
        format: date
        type: string
      TriggerEvent:
        description: |2
           Specifies when to start billing the customer for the charge.
          **Note: **This field can be passed through the Subscribe and Amend calls and will override the default value set on the Product Rate Plan Charge.
          **Character limit**: 18 **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:

          - `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.
          - `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.
          - `CustomerAcceptance `is when the customer accepts the services or products for a subscription.
          - SpecificDate is valid only on the RatePlanCharge.
        type: string
      UOM:
        description: " Specifies the units to measure usage.\n**Character limit**:\
          \ 25 **Values**: inherited from `ProductRatePlanCharge.UOM` "
        type: string
      UpToPeriods:
        description: |2
           Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
          **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.UpToPeriods` **Note**:

          - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
          - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
          - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
          - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
          - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
        format: int64
        type: integer
      UpToPeriodsType:
        description: |2
           The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`. **Values**: one of the following:

          - `Billing Periods` (default)
          - `Days`
          - `Weeks`
          - `Months`
          - `Years`
          **Note**:

          - You must use this field together with the `UpToPeriods` field to specify the time period.
          - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
        type: string
      UpdatedById:
        description: 'The ID of the last user to update the object. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: " The date when the object was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      Version:
        description: ' The version of the rate plan charge. Each time a charge is
          amended, Zuora creates a new version of the rate plan charge. **Character
          limit**: 5 **Values**: automatically generated '
        format: int64
        type: integer
      WeeklyBillCycleDay:
        description: |2
           Specifies which day of the week as the bill cycle day (BCD) for the charge.
          This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

          **Values**: one of the following:

          - `Sunday`
          - `Monday`
          - `Tuesday`
          - `Wednesday`
          - `Thursday`
          - `Friday`
          - `Saturday`
        type: string
    type: object
  ProxyGetRatePlanChargeTier:
    properties:
      CreatedById:
        description: 'The ID of the Zuora user who created the RatePlanChargeTier
          object. **Character limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date when the RatePlanChargeTier object was created.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      EndingUnit:
        description: " The end number of a range of units for the tier.\n**Character\
          \ limit**: 16 **Values**: any positive decimal value "
        format: double
        type: number
      Id:
        description: Object identifier.
        type: string
      Price:
        description: " The price of the tier if the charge is a flat fee, or the price\
          \ of each unit in the tier if the change model is tiered pricing.\n**Character\
          \ limit**: 16 **Values**: any positive decimal value "
        format: double
        type: number
      PriceFormat:
        description: " Indicates if the price is a flat fee or is per unit.\n**Character\
          \ limit**: 8 **Values**: `Flat Fee`, `Per Unit` "
        type: string
      RatePlanChargeId:
        description: " The ID of the subscription or amendment rate plan charge associated\
          \ with this tier. You can't create an unassociated tier.\n**Character limit**:\
          \ 32 **Values**: inherited from `RatePlanCharge.Id`. "
        type: string
      StartingUnit:
        description: " The start number of a range of units for the tier.\n**Character\
          \ limit**: 16 **Values**: any positive decimal value "
        format: double
        type: number
      Tier:
        description: " A unique number that identifies the tier that the price applies\
          \ to.\n**Character limit**: 20 **Values**: automatically generated "
        format: int32
        type: integer
      UpdatedById:
        description: 'The ID of the last user to update the object. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: " The date when the object was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetRefund:
    properties:
      AccountId:
        description: " The ID of the account associated with this refund. Specify\
          \ a value for this field only if you're creating an electronic non-referenced\
          \ refund. Don't specify a value for any other type of refund; Zuora associates\
          \ the refund automatically with the account from the associated payment.\n\
          **Character limit**: 32 **Values**: a valid account ID "
        type: string
      AccountingCode:
        description: " The accounting code for the payment or invoice line item that\
          \ the refund applies to. If there is no accounting code, then this value\
          \ is null. Accounting codes group transactions that contain similar accounting\
          \ attributes.\n**Character limit**: 50 **Values**: automatically generated "
        type: string
      Amount:
        description: " The amount of the refund. The amount can't exceed the amount\
          \ of the associated payment. If the original payment was applied to a single\
          \ invoice, then you can create a partial refund. However, if the payment\
          \ was applies to multiple invoices, then you can only make a partial refund\
          \ through the web-based UI, not through the API.\n**Character limit**: 16\
          \ **Values**: a valid currency amount "
        format: double
        type: number
      CancelledOn:
        description: " The date the refund was cancelled.\n**Values**: automatically\
          \ generated "
        format: date-time
        type: string
      Comment:
        description: " Use this field to record comments about the refund.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreatedById:
        description: " The ID of the Zuora user who created the `Refund` object.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the `Refund` object was created.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Gateway:
        description: " The gateway that processed the original payment. Zuora uses\
          \ this same gateway for the corresponding refund. If this payment gateway\
          \ is no longer active, then the electronic refund fails. A gateway is an\
          \ online service provider that connects an online shopping cart to a payment\
          \ processor.\n**Values**: automatically inherited from the `Payment` object "
        type: string
      GatewayResponse:
        description: " The message returned from the payment gateway for the refund.\
          \ This message is gateway-dependent.\n**Character limit**: 500 **Values**:\
          \ automatically generated "
        type: string
      GatewayResponseCode:
        description: " The code returned from the payment gateway for the payment.\
          \ This code is gateway-dependent.\n**Character limit**: 20 **System****Values**:\
          \ automatically generated "
        type: string
      GatewayState:
        description: " The status of the payment in the gateway.\n**Character limit**:\
          \ 19 **Values**: automatically generated "
        type: string
      Id:
        description: Object identifier.
        type: string
      MarkedForSubmissionOn:
        description: ' The date when a payment was marked and waiting for batch submission
          to the payment process. **Character limit**: 29 **Values**: automatically
          generated '
        format: date-time
        type: string
      MethodType:
        description: |2
           Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:

          - `ACH`
          - `Cash`
          - `Check`
          - `CreditCard`
          - `Other`
          - `PayPal`
          - `WireTransfer`
          - `DebitCard`
          - `CreditCardReferenceTransaction`
        type: string
      PaymentMethodId:
        description: " The unique ID of the payment method that the customer used\
          \ to make the payment. Specify a value for this field only if you're creating\
          \ an electronic non-referenced refund.\n**Character limit**: 32 **V****alues**:\
          \ a valid payment method ID "
        type: string
      PaymentMethodSnapshotId:
        description: " The unique ID of the payment method snapshot which is a copy\
          \ of the particular Payment Method used in a transaction.\n**Character limit**:\
          \ 32 **V****alues**: a valid payment method snapshot ID "
        type: string
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      ReferenceID:
        description: " The transaction ID returned by the payment gateway for an electronic\
          \ refund. Use this field to reconcile refunds between your gateway and Zuora\
          \ Payments.\n**Character limit**: 60 **Values**: a string of 60 characters\
          \ or fewer "
        type: string
      RefundDate:
        description: " The date of the refund, in `yyyy-mm-dd` format. The date of\
          \ the refund cannot be before the payment date. Specify this field only\
          \ for external refunds. Zuora automatically generates this field for electronic\
          \ refunds.\n**Character limit**: 29 "
        format: date
        type: string
      RefundNumber:
        description: " The unique identifier of the refund.\n**Character limit**:\
          \ 50 **Values**: automatically generated "
        type: string
      RefundTransactionTime:
        description: " The date and time when the refund was issued.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      SecondRefundReferenceId:
        description: " The transaction ID returned by the payment gateway if there\
          \ is an additional transaction for the payment. Use this field to reconcile\
          \ payments between your gateway and Zuora Payments.\n**Character limit**:\
          \ 60 **Values**: a string of 60 characters or fewer "
        type: string
      SettledOn:
        description: " The date when the payment was settled in the payment processor.\
          \ This field is used by the Spectrum gateway only and not applicable to\
          \ other gateways.\n**Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      SoftDescriptor:
        description: |2
           A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:

          - 3-byte company identifier &quot;*&quot; 18-byte descriptor
          - 7-byte company identifier &quot;*&quot; 14-byte descriptor
          - 12-byte company identifier &quot;*&quot; 9-byte descriptor
        type: string
      SoftDescriptorPhone:
        description: |2
           A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:

          - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`
          - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate
          - Email address
        type: string
      SourceType:
        description: |2
           Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.
          **Character limit**: 13 **Values**:

          - `Payment`
          - `CreditBalance`
        type: string
      Status:
        description: |2
           The status of the refund.
          **Character limit**: 10 **Values**: automatically generated:

          - `Canceled`
          - `Error`
          - `Processed`
          - `Processing`
        type: string
      SubmittedOn:
        description: " The date when the payment was submitted.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      TransferredToAccounting:
        description: |2
           Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.
          **Character limit**: 10 **Values**: automatically generated:

          - `Processing`
          - `Yes`
          - `Error`
          - `Ignore`
        type: string
      Type:
        description: |2
           Specifies if the refund is electronic or external.
          **Character limit**: 10 **Values**:

          - `Electronic`
          - External
        type: string
      UpdatedById:
        description: " The ID of the last user to update the object.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the object was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetRefundInvoicePayment:
    properties:
      CreatedById:
        description: " The ID of the Zuora user who created the RefundInvoicePayment\
          \ object.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the RefundInvoicePayment object was created.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      InvoiceId:
        description: " The unique ID of the invoice associated with this refund invoice\
          \ payment.\n**Character limit**: 32 **Values**: a valid invoice ID "
        type: string
      InvoicePaymentId:
        description: ' The ID of the `InvoicePayment.Id` '
        type: string
      RefundAmount:
        description: 'Specifies the amount of a refund applied against a payment.
          **Character limit**: 16 **Values**: automatically generated '
        format: double
        type: number
      RefundId:
        description: " The ID of the Refund object\n**Character limit**: 32 **Values**:\
          \ inherited from `Refund.Id` "
        type: string
      UpdatedById:
        description: " The ID of the last user to update the object.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the object was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetRefundTransactionLog:
    properties:
      BatchId:
        description: ''
        type: string
      Gateway:
        description: ''
        type: string
      GatewayReasonCode:
        description: ''
        type: string
      GatewayReasonCodeDescription:
        description: ''
        type: string
      GatewayState:
        description: ''
        type: string
      GatewayTransactionType:
        description: ''
        type: string
      Id:
        description: Object identifier.
        type: string
      RefundId:
        description: ''
        type: string
      RequestString:
        description: ''
        type: string
      ResponseString:
        description: ''
        type: string
      TransactionDate:
        description: ''
        format: date-time
        type: string
      TransactionId:
        description: ''
        type: string
    type: object
  ProxyGetSubscription:
    properties:
      AccountId:
        description: ' This field can be updated when **Status** is `Draft`. The ID
          of a valid account ID. '
        type: string
      AutoRenew:
        description: " This field can be updated when **Status** is `Draft`. Indicates\
          \ if the subscription automatically renews at the end of the term.\n**Values**:\
          \ `true`, `false` "
        type: boolean
      CancelledDate:
        description: ' The date on which the subscription was canceled. '
        format: date
        type: string
      ContractAcceptanceDate:
        description: ' The date when the customer accepts the contract. This field
          can be updated when **Status** is `Draft`. '
        format: date
        type: string
      ContractEffectiveDate:
        description: " The date when the contract takes effect. This field can be\
          \ updated when **Status** is `Draft`.\n**Note**: This field is required\
          \ in the subscribe call. If you set the value of this field to null and\
          \ both the ServiceActivationDate and ContractAcceptanceDate fields are not\
          \ required, the subscribe call still returns success, but the new subscription\
          \ is in `DRAFT` status. To activate the subscription, you must set a valid\
          \ date to this field. "
        format: date
        type: string
      CpqBundleJsonId__QT:
        description: " The Bundle product structures from Zuora Quotes if you utilize\
          \ Bundling in Salesforce. Do not change the value in this field.\n**Character\
          \ limit**: 32 **Values**: N/A "
        type: string
      CreatedById:
        description: 'The user ID of the person who created the subscription. **Character
          limit**: 32 **Values**: automatically generated '
        type: string
      CreatedDate:
        description: " The date the subscription was created. This value is the same\
          \ as the OriginalCreatedDate value until the subscription is amended.\n\
          **Values**: automatically generated "
        format: date-time
        type: string
      CreatorAccountId:
        description: " The account ID that created the subscription or the amended\
          \ subscription.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatorInvoiceOwnerId:
        description: " The account ID that owns the invoices associated with the subscription\
          \ or the amended subscription.\n**Character limit**: 32 **Values**: automatically\
          \ generated "
        type: string
      CurrentTerm:
        description: " The length of the period for the current subscription term.\
          \ If TermType is set to `TERMED`, this field is required and must be greater\
          \ than `0`. If TermType is set to `EVERGREEN`, this value is ignored. Default\
          \ is `0`.\n**Character limit**: 20 **Values**: automatically generated "
        format: int32
        type: integer
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      Id:
        description: Object identifier.
        type: string
      InitialTerm:
        description: " The length of the period for the first subscription term. This\
          \ field can be updated when Status is `Draft`.\n**Required**: If TermType\
          \ is Termed **Character limit**: 20 **Values**: any valid number. The default\
          \ value is 0. "
        format: int32
        type: integer
      InitialTermPeriodType:
        description: |2
           The period type for the first subscription term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the InitialTerm field to specify the initial subscription term.
        type: string
      InvoiceOwnerId:
        description: ' This field can be updated when **Status** is `Draft`. A valid
          account ID. '
        type: string
      IsInvoiceSeparate:
        description: " Determines if the subscription is invoiced separately. If `TRUE`,\
          \ then all charges for this subscription are collected into the subscription's\
          \ own invoice.\n**V****alues**: `TRUE`, `FALSE `(default) "
        type: boolean
      Name:
        description: |2
           The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur.
          **Character limit**: 100 **Values**: one of the following:

          - leave null to automatically generate
          - a string of 100 characters or fewer
        type: string
      Notes:
        description: " Use this field to record comments about the subscription.\n\
          **Character limit**: 500 **Values**: a string of 500 characters or fewer "
        type: string
      OpportunityCloseDate__QT:
        description: " The closing date of the Opportunity. This field is used in\
          \ Zuora Reporting Data Sources to report on Subscription metrics. If the\
          \ subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: **Values**: populated\
          \ by Zuora Quotes "
        format: date
        type: string
      OpportunityName__QT:
        description: " The unique identifier of the Opportunity. This field is used\
          \ in the Zuora Reporting Data Sources to report on Subscription metrics.\
          \ If the subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: 100 **Values**:\
          \ populated by Zuora Quotes "
        type: string
      OriginalCreatedDate:
        description: " The date when the subscription was originally created. This\
          \ value is the same as the CreatedDate value until the subscription is amended.\n\
          **Values**: automatically generated "
        format: date-time
        type: string
      OriginalId:
        description: " The original ID of this subscription.\n**Values**: automatically\
          \ generated "
        type: string
      PreviousSubscriptionId:
        description: " The subscription ID immediately prior to the current subscription.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      QuoteBusinessType__QT:
        description: " The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal or Churn.\
          \ This field is used in the Zuora Reporting Data Sources to report on Subscription\
          \ metrics. If the subscription was originated from Zuora Quotes, the value\
          \ is populated with the value from Zuora Quotes.\n**Character limit**: 32\
          \ **Values**: populated by Zuora Quotes "
        type: string
      QuoteNumber__QT:
        description: " The unique identifier of the Quote. This field is used in the\
          \ Zuora Reporting Data Sources to report on Subscription metrics. If the\
          \ subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: 32 **Values**:\
          \ populated by Zuora Quotes "
        type: string
      QuoteType__QT:
        description: " The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is used in the Zuora\
          \ Reporting Data Sources to report on Subscription metrics. If the subscription\
          \ was originated from Zuora Quotes, the value is populated with the value\
          \ from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora\
          \ Quotes "
        type: string
      RenewalSetting:
        description: " This field can be updated when **Status** is `Draft`. Specifies\
          \ whether a termed subscription will remain termed or change to evergreen\
          \ when it is renewed.\n**Required**: If TermType is Termed **Values**: `RENEW_WITH_SPECIFIC_TERM\
          \ `(default), `RENEW_TO_EVERGREEN` "
        type: string
      RenewalTerm:
        description: |2
           The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`.
          **Required**: If TermType is Termed.
          **Character limit**: 20 **Values**: one of the following:

          - leave null to default to `0`
          - any number
        format: int32
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field is used with the RenewalTerm field to specify the subscription renewal term.
          - This field can be updated when Status is `Draft`.
        type: string
      ServiceActivationDate:
        description: ' The date when the subscription is activated. This field can
          be updated when **Status** is `Draft`. '
        format: date
        type: string
      Status:
        description: |2
           The status of the subscription.
          **Character limit**: 17 **Values**: automatically generated **Possible values**: one of the following:

          - `Draft`
          - `PendingActivation`
          - `PendingAcceptance`
          - `Active`
          - `Cancelled`
          - `Expired`
          - `Suspended` (This value is in **Limited Availability**.)
        type: string
      SubscriptionEndDate:
        description: " The date when the subscription term ends, where the subscription\
          \ ends at midnight the day before. For example, if the SubscriptionEndDate\
          \ is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on\
          \ 12/30/2016. This date is the same as the term end date or the cancelation\
          \ date, as appropriate.\n**Character limit**: 29 **Values**: automatically\
          \ generated "
        format: date
        type: string
      SubscriptionStartDate:
        description: " The date when the subscription term starts. This date is the\
          \ same as the start date of the original term, which isn't necessarily the\
          \ start date of the current or new term.\n**Character limit**: 29 **Values**:\
          \ automatically generated "
        format: date
        type: string
      TermEndDate:
        description: ' This field can be updated when **Status** is `Draft`. The date
          when the subscription term ends. If the subscription is evergreen, the TermEndDate
          value is null or is the cancelation date, as appropriate. **Character limit**:
          29 **Values**: automatically generated '
        format: date
        type: string
      TermStartDate:
        description: " This field can be updated when **Status** is `Draft`. The date\
          \ when the subscription term begins. If this is a renewal subscription,\
          \ then this date is different from the subscription start date.\n**Character\
          \ limit**: 29 **Version notes**: -- "
        format: date
        type: string
      TermType:
        description: " This field can be updated when **Status** is `Draft`. Indicates\
          \ if a subscription is termed or evergreen.\n**Character limit**: 9 **Values**:\
          \ `TERMED`, `EVERGREEN` "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the subscription.\n**Character\
          \ limit:** 32 **Values: **automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the subscription was last updated.\n**Character\
          \ limit:** 29 **Values**: automatically generated "
        format: date-time
        type: string
      Version:
        description: " The version number of the subscription.\n**Values**: automatically\
          \ generated "
        format: int32
        type: integer
    type: object
  ProxyGetSubscriptionProductFeature:
    properties:
      CreatedById:
        description: ''
        type: string
      CreatedDate:
        description: " Date and time when the product feature was added to the subscription.\n\
          **Character limit**: 29 **Values**: "
        format: date-time
        type: string
      Description:
        description: " Description of the subscription product feature.\n**Character\
          \ limit**: 500 **Values**: "
        type: string
      FeatureCode:
        description: " Unique code of the feature.\n**Character limit**: 255 **Values**: "
        type: string
      FeatureId:
        description: " Internal Zuora ID of the feature.\n**Character limit**: 32\
          \ **Values**: "
        type: string
      Id:
        description: Object identifier.
        type: string
      Name:
        description: " Name of the feature.\n**Character limit**: 255 **Values**: "
        type: string
      RatePlanId:
        description: " Id of the product rate plan to which the feature belongs.\n\
          **Character limit**: 32 **Values**: "
        type: string
      UpdatedById:
        description: " Internal Zuora ID of the user who last updated the subscription\
          \ product feature.\n**Character limit**: 32 **Values**: "
        type: string
      UpdatedDate:
        description: " Date and time when the subscription product feature was last\
          \ updated.\n**Character limit**: 29 **Values**: "
        format: date-time
        type: string
    type: object
  ProxyGetTaxationItem:
    properties:
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      CreatedById:
        description: " The ID of the user who created the taxation item.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the payment was created in the Zuora system.\n\
          **Character limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
      ExemptAmount:
        description: " The amount of taxes or VAT for which the customer has an exemption.\n\
          **Character limit**: 16 **Values**: a decimal value "
        format: double
        type: number
      Id:
        description: Object identifier.
        type: string
      InvoiceItemId:
        description: " The ID of the specific invoice item that the taxation information\
          \ applies to.\n**Character limit**: 32 **Values**: a valid invoice item\
          \ ID "
        type: string
      Jurisdiction:
        description: " The jurisdiction that applies the tax or VAT. This value is\
          \ typically a state, province, county, or city.\n**Character limit**: 32\
          \ **Values**: a string of 32 characterrs or fewer "
        type: string
      LocationCode:
        description: " The identifier for the location based on the value of the `TaxCode`\
          \ field.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      Name:
        description: " The name of the tax rate, such as sales tax or GST. This name\
          \ is displayed on invoices.\n**Character limit**: 128 **Values**: a string\
          \ of 128 characters or fewer "
        type: string
      TaxAmount:
        description: " The amount of the tax applied to the charge.\n**Character limit**:\
          \ 16 **Values**: a decimal value "
        format: double
        type: number
      TaxCode:
        description: " The tax code identifies which tax rules and tax rates to apply\
          \ to a specific charge.\n**Character limit**: 32 **Values**: a string of\
          \ 32 characters or fewer "
        type: string
      TaxCodeDescription:
        description: " The description for the tax code.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxDate:
        description: " The date that the tax is applied to the charge, in `yyyy-mm-dd`\
          \ format.\n**Character limit**: 29 "
        format: date
        type: string
      TaxRate:
        description: " The tax rate applied to the charge.\n**Character limit**: 16\
          \ **Values**: a valid decimal value "
        format: double
        type: number
      TaxRateDescription:
        description: " The description of the tax rate.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxRateType:
        description: " The type of the tax rate applied to the charge.\n**Character\
          \ limit**: 10 **Values**: `Percentage`, `FlatFee` "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the taxation item.\n**Character\
          \ limit**: **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: 'The date when the taxation item was last updated. **Character
          limit**: **Values**: automatically generated '
        format: date-time
        type: string
    type: object
  ProxyGetUnitOfMeasure:
    properties:
      Active:
        description: " Indicates if the UOM is available for new product rate plans.\
          \ The default value is `true`.\n**Character limit**: 5 **Values**: `true`,\
          \ `false ` "
        type: boolean
      CreatedById:
        description: " The ID of the Zuora user who created the UOM.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the UOM was created.\n**Character limit**: 29\
          \ **Values**: automatically generated "
        format: date-time
        type: string
      DecimalPlaces:
        description: 'The number of digits to the right of the decimal point that
          you want to measure for the unit. To use whole numbers only, set this value
          to 0. You can''t change this value after this `UOM` is used in any product,
          subscription, or usage. **Character limit**: 1 **Values**: an integer between
          0 and 9, exclusive '
        format: int64
        type: integer
      DisplayedAs:
        description: 'The name of the UOM that you want displayed on invoices. The
          default value is the `UomName` field value. **Character limit**: 50 **Values**:
          A string of 50 characters or fewer '
        type: string
      Id:
        description: Object identifier.
        type: string
      RoundingMode:
        description: " Specifies whether to round the UOM value up or down when the\
          \ value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n\
          **Character limit**: 4 **Values**: `Up`, `Down` "
        type: string
      UomName:
        description: " The name of the UOM, such as license or GB. This name is displayed\
          \ in query results and in the web-based UI labels. If you want a different\
          \ name to be displayed on invoices, then use the `DisplayedAs` field to\
          \ provide the invoice label.\n**Character limit**: 50 **Values**: a string\
          \ of 50 characters or fewer "
        type: string
      UpdatedById:
        description: 'The ID of the user who lasted updated the UOM. **Character limit**:
          32 **Values**: automatically generated '
        type: string
      UpdatedDate:
        description: " The date when the UOM was last updated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyGetUsage:
    properties:
      AccountId:
        description: " The ID of the account associated with the usage data. This\
          \ field is required if no value is specified for the `AccountNumber` field.\n\
          **Character limit**: 32 **Values**: a valid account ID "
        type: string
      AccountNumber:
        description: " The number of the account associated with the usage data. This\
          \ field is required if no value is specified for the `AccountId` field.\n\
          **Character limit**: 50 **Values**: a valid account number "
        type: string
      ChargeId:
        description: ' The OrginalId of the rate plan charge related to the usage
          record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32
          **Values**: a valid rate plan charge OriginalID '
        type: string
      CreatedById:
        description: " The user ID of the person who uploaded the usage records.\n\
          **Character limit**: 32 **Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the invoice was generated.\n**Character limit**:\
          \ 29 **Values**: automatically generated "
        format: date-time
        type: string
      EndDateTime:
        description: " The end date and time of a range of time when usage is tracked.\
          \ Use this field for reporting; this field doesn't affect usage calculation.\n\
          **Character limit**: 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      Id:
        description: Object identifier.
        type: string
      Quantity:
        description: " Indicates the number of units used.\n**Character limit**: 16\
          \ **Values**: a valid decimal amount equal to or greater than 0 "
        format: double
        type: number
      RbeStatus:
        description: " Indicates if the rating and billing engine (RBE) processed\
          \ usage data for an invoice.\n**Character limit**: 9 **Values**: automatically\
          \ generated to be one of the following values: `Importing`, `Pending`, `Processed` "
        type: string
      SourceType:
        description: " Indicates if the usage records were imported from the web-based\
          \ UI or the API.\n**Character limit**: 6 **Values**: automatically generated\
          \ to be one of the following values: `API`, `Import` "
        type: string
      StartDateTime:
        description: " The start date and time of a range of time when usage is tracked.\
          \ Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`,\
          \ the `StartDateTime` field does affect usage calculation.\n**Character\
          \ limit**: 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      SubmissionDateTime:
        description: " The date when usage was submitted.\n**Character limit**: 29\
          \ **Values**: automatically generated "
        format: date-time
        type: string
      SubscriptionId:
        description: " The ID of the subscription that contains the fees related to\
          \ the usage data.\n**Character limit**: 32 **Values**: a valid subscription\
          \ ID "
        type: string
      UOM:
        description: " Specifies the units to measure usage. Units of measure are\
          \ configured in the web-based UI. Your values depend on your configuration\
          \ in **Billing Settings**.\n**Character limit**: **Values**: a valid unit\
          \ of measure "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the usage upload.\n**Character\
          \ limit**: 32 **Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the usage upload was last updated.\n**Character\
          \ limit**: 29 **Values**: automatically generated "
        format: date-time
        type: string
    type: object
  ProxyModifyAccount:
    example:
      AccountNumber: AN_1476935163869
      AutoPay: true
      Batch: Batch1
      BillCycleDay: 1
      BillToId: 2c93808457d787030157e03220684fac
      CrmId: crmid
      Currency: USD
      DefaultPaymentMethodId: 2c93808457d787030157e03220ec4fad
      Id: 2c93808457d787030157e0321fdf4fab
      InvoiceTemplateId: 2c93808457d787030157e03208864f97
      Name: AC_1476935163869
      Notes: this is notes
      PaymentTerm: Due Upon Receipt
      SoldToId: 2c93808457d787030157e03220684fac
      Status: Active
    properties:
      AccountNumber:
        description: |
          Unique account number assigned to the account. **Character limit**: 50 **Values**: one of the following:

          - null to auto-generate
          - a string of 50 characters or fewer that doesn't begin with the default account number prefix
        type: string
      AdditionalEmailAddresses:
        description: 'List of additional email addresses to receive emailed invoices.
          **Character limit**: 120 **Values**: comma-separated list of email addresses '
        type: string
      AllowInvoiceEdit:
        description: " Indicates if associated invoices can be edited.\n**Character\
          \ limit**: 5 **Values**: `true`, `false` (default if left null) "
        type: boolean
      AutoPay:
        description: " Indicates if future payments are automatically collected when\
          \ they're due during a Payment Run.\n**Character limit**: 5 **Values**:\
          \ `true`, `false` (default) "
        type: boolean
      Batch:
        description: " Organizes your customer accounts into groups to optimize your\
          \ billing and payment operations. Required if you use the Subscribe call.\n\
          **Character limit**: 20 **Values**:any system-defined batch (`Batch1` -\
          \ `Batch50 `or by name). "
        type: string
      BcdSettingOption:
        description: 'Billing cycle day setting option. **Character limit**: 9 **Values**:
          `AutoSet`, `ManualSet` '
        type: string
      BillCycleDay:
        description: 'Billing cycle day (BCD) on which bill runs generate invoices
          for the account. **Character limit**: 2 **Values**: any activated system-defined
          bill cycle day (`1` - `31`) '
        format: int32
        type: integer
      BillToId:
        description: 'ID of the person to bill for the account. **Character limit**:
          32 **Values**: a valid contact ID for the account '
        type: string
      CommunicationProfileId:
        description: 'Associates the account with a specified communication profile.
          **Character limit**: 32 **Values**: a valid communication profile ID '
        type: string
      CrmId:
        description: 'CRM account ID for the account. A CRM is a customer relationship
          management system, such as Salesforce.com. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      Currency:
        description: ' Currency that the customer is billed in. '
        type: string
      CustomerServiceRepName:
        description: 'Name of the account''s customer service representative, if applicable.
          **Character limit**: 50 **Values**: a string of 50 characters or fewer '
        type: string
      DefaultPaymentMethodId:
        description: 'ID of the default payment method for the account. This field
          is required if the AutoPay field is set to `true`. **Character limit**:
          32 **Values**: a valid ID for an existing payment method '
        type: string
      InvoiceDeliveryPrefsEmail:
        description: 'Indicates if the customer wants to receive invoices through
          email.  **Character limit**: 5 **Values**: `true`, `false` (default if left
          null) '
        type: boolean
      InvoiceDeliveryPrefsPrint:
        description: 'Indicates if the customer wants to receive printed invoices,
          such as through postal mail. **Character limit**: 5 **Values**: `true`,
          `false` (default if left null) '
        type: boolean
      InvoiceTemplateId:
        description: 'The ID of the invoice template. Each customer account can use
          a specific invoice template for invoice generation. **Character limit**:
          32 **Values**: a valid template ID configured in Zuora Billing Settings '
        type: string
      Name:
        description: 'Name of the account as displayed in the Zuora UI. **Character
          limit**: 255 **Values**: a string of 255 characters or fewer '
        type: string
      Notes:
        description: ' Comments about the account. **Character limit**: 65,535 **Values**:
          a string of 65,535 characters '
        type: string
      ParentId:
        description: 'Identifier of the parent customer account for this Account object.
          Use this field if you have customer hierarchy enabled. **Character limit**:
          32 **Values**: a valid account ID '
        type: string
      PaymentGateway:
        description: |
          Gateway used for processing electronic payments and refunds. **Character limit**: 40 **Values**: one of the following:

          - a valid configured gateway name
          - Null to inherit the default value set in Zuora Payment Settings
        type: string
      PaymentTerm:
        description: 'Indicates when the customer pays for subscriptions. **Character
          limit**: 100 **Values**: a valid, active payment term defined in the web-based
          UI administrative settings '
        type: string
      PurchaseOrderNumber:
        description: 'The number of the purchase order associated with this account.
          Purchase order information generally comes from customers. **Character limit**:
          100 **Values**: a string of 100 characters or fewer '
        type: string
      SalesRepName:
        description: 'The name of the sales representative associated with this account,
          if applicable. **Character limit**: 50 **Values**: a string of 50 characters
          or fewer '
        type: string
      SoldToId:
        description: 'ID of the person who bought the subscription associated with
          the account. **Character limit**: 32 **Values**: a valid contact ID for
          the account '
        type: string
      Status:
        description: |
          Status of the account in the system. **Character limit**: 8 **Values**: one of the following:

          - leave null if you're using the Subscribe call
          - if you're using the Create call:
          - `Draft`
          - `Active`
          - `Canceled`
        type: string
      TaxCompanyCode:
        description: " Unique code that identifies a company account in Avalara. Use\
          \ this field to calculate taxes based on origin and sold-to addresses in\
          \ Avalara.\nThis feature is in **Limited Availability**. If you wish to\
          \ have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
          \n**Character limit**: 50 **Values**: a valid company code "
        type: string
      TaxExemptCertificateID:
        description: 'ID of your customer''s tax exemption certificate. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptCertificateType:
        description: 'Type of the tax exemption certificate that your customer holds.  **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
      TaxExemptDescription:
        description: 'Description of the tax exemption certificate that your customer
          holds. **Character limit**: 500 **Values**: a string of 500 characters or
          fewer '
        type: string
      TaxExemptEffectiveDate:
        description: 'Date when the the customer''s tax exemption starts. **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptExpirationDate:
        description: 'Date when the customer''s tax exemption certificate expires  **Character
          limit**: 29 **Version notes**: requires Zuora Tax '
        format: date
        type: string
      TaxExemptIssuingJurisdiction:
        description: 'Indicates the jurisdiction in which the customer''s tax exemption
          certificate was issued. **Character limit**: 32 **Values**: a string of
          32 characters or fewer '
        type: string
      TaxExemptStatus:
        description: |2
           Status of the account's tax exemption. Required if you use Zuora Tax.
          **Character limit**: 19 **Values**: one of the following:

          - `Yes`
          - `No`
          - `PendingVerification`
        type: string
      VATId:
        description: " EU Value Added Tax ID.\nThis feature is in **Limited Availability**.\
          \ If you wish to have access to the feature, submit a request at [Zuora\
          \ Global Support](http://support.zuora.com/).\n\n**Character limit**: 25\
          \ **Values**: a valid Value Added Tax ID "
        type: string
    type: object
  ProxyModifyAmendment:
    example:
      Id: 2c93808457d787030157e02e430c1f15
      Name: AMtssl1bnuq1_new
    properties:
      AutoRenew:
        description: " Determines whether the subscription is automatically renewed,\
          \ or whether it expires at the end of the term and needs to be manually\
          \ renewed. **Required:** For amendment of type TermsAndConditions when changing\
          \ the automatic renewal status of a subscription.\n**Values**: true, false "
        type: boolean
      ContractEffectiveDate:
        description: " The date when the amendment's changes become effective for\
          \ billing purposes.\n**Version notes**: -- "
        format: date
        type: string
      CurrentTerm:
        description: " The length of the period for the current subscription term.\
          \ This field can be updated when Status is `Draft`.\n**Required**: Only\
          \ if the value of the Type field is set to `TermsAndConditions` and TermType\
          \ is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.\n\
          **Character limit**: **Values**: a valid number "
        format: int64
        type: integer
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term. **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the CurrentTerm field to specify the current subscription term.
        type: string
      CustomerAcceptanceDate:
        description: " The date when the customer accepts the amendment's changes\
          \ to the subscription. **Required**: Only if the value of the Status field\
          \ is set to PendingAcceptance.\n**Version notes**: -- "
        format: date
        type: string
      Description:
        description: " A description of the amendment.\n**Character limit**: 500 **Values**:\
          \ maximum 500 characters "
        type: string
      EffectiveDate:
        description: " The date when the amendment's changes take effective. This\
          \ field validates that the amendment's changes are within valid ranges of\
          \ products and product rate plans.\n**Required**: For the cancellation amendments.\
          \ Optional for other types of amendments.\n**Version notes**: -- "
        format: date
        type: string
      Name:
        description: " The name of the amendment.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      RenewalSetting:
        description: " Specifies whether a termed subscription will remain termed\
          \ or change to evergreen when it is renewed.\n**Required**: If TermType\
          \ is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN "
        type: string
      RenewalTerm:
        description: " The term of renewal for the amended subscription. This field\
          \ can be updated when Status is `Draft`.\n**Required**: Only if the value\
          \ of the Type field is set to `TermsAndConditions`.\n**Character limit**:\
          \ **Values:** a valid number "
        format: int64
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term. This field can be updated when Status is `Draft`.
          **Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      ServiceActivationDate:
        description: " The date when service is activated.\n**Required**: Only if\
          \ the value of the Status field is set to PendingActivation.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      SpecificUpdateDate:
        description: |2
           The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.
          **Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.
        format: date
        type: string
      Status:
        description: |2
           The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:

          - Draft (default, if left null)
          - Pending Activation
          - Pending Acceptance
          - Completed
        type: string
      SubscriptionId:
        description: " The ID of the subscription that the amendment changes.\n**Character\
          \ limit**: 32 **Values**: a valid subscription ID "
        type: string
      TermStartDate:
        description: " The date when the new terms and conditions take effect.\n**Required**:\
          \ Only if the value of the Type field is set to TermsAndConditions.\n**Version\
          \ notes**: -- "
        format: date
        type: string
      TermType:
        description: " Indicates if the subscription isTERMED or EVERGREEN.\n\n- A\
          \ TERMED subscription has an expiration date, and must be manually renewed.\n\
          - An EVERGREEN subscription doesn't have an expiration date, and must be\
          \ manually ended.\n\n**Required**: Only when as part of an amendment of\
          \ type TermsAndConditions &#65279;to change the term type of a subscription.\
          \ Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN "
        type: string
      Type:
        description: |2
           The type of amendment.
          **Character limit**: 18 **Values**: one of the following:

          - Cancellation
          - NewProduct
          - OwnerTransfer
          - RemoveProduct
          - Renewal
          - UpdateProduct
          - TermsAndConditions
          - SuspendSubscription (This value is in **Limited Availability**.)
          - ResumeSubscription (This value is in **Limited Availability**.)
        type: string
    type: object
  ProxyModifyBillRun:
    example:
      Status: Posted
    properties:
      Status:
        description: "The status for this bill run. See [Status Types](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/G_Bill_Runs#Status_Types)\
          \ for more information.\n\nTo cancel a bill run, specify `Canceled`. To\
          \ post a bill run, specify `Posted`.\n\n**Character limit:** 20\n\n**Values:**\
          \ \n\n  * `Pending`\n  * `Processing`\n  * `Completed`\n  * `Error`\n  *\
          \ `Canceled`\n  * `Posted`\n"
        type: string
    required:
    - Status
    type: object
  ProxyModifyContact:
    example:
      FirstName: FN1476934918260_new
      Id: 2c93808457d787030157e02e606e2095
    properties:
      AccountId:
        description: " The Zuora account ID associated with this contact. This field\
          \ is not required when you use the Subscribe call. This field is required\
          \ for all other calls.\n**Character limit: **32 **Values: **a valid account\
          \ ID "
        type: string
      Address1:
        description: " The first line of the contact's address, which is often a street\
          \ address or business name.\n**Character limit**: 255 **Values**: a string\
          \ of 255 characters or fewer "
        type: string
      Address2:
        description: " The second line of the contact's address.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      City:
        description: " The city of the contact's address.\n**Character limit**: 40\
          \ **Values: **a string of 40 characters or fewer "
        type: string
      Country:
        description: ' The country of the contact''s address. '
        type: string
      County:
        description: " The country. May optionally be used by Zuora Tax to calculate\
          \ county tax.\n**Character limit**: 32 **Values**: a string of 32 characters\
          \ or fewer "
        type: string
      Description:
        description: " A description for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      Fax:
        description: " The contact's fax number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      FirstName:
        description: " The contact's first name.\n**Character limit**: 100 **Values**:\
          \ a string of the contact's first name "
        type: string
      HomePhone:
        description: " The contact's home phone number.\n**Character limit**: 40 **Values**:\
          \ a string of 40 characters or fewer "
        type: string
      LastName:
        description: " The contact's last name.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      MobilePhone:
        description: " The contact's mobile phone number.\n**Character limit**: 40\
          \ **Values**: a string of 40 characters or fewer "
        type: string
      NickName:
        description: " A nickname for the contact.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      OtherPhone:
        description: " An additional phone number for the contact.\n**Character limit**:\
          \ 40 **Values**: a string of 40 characters or fewer "
        type: string
      OtherPhoneType:
        description: 'The type of the `OtherPhone`. **Character limit**: 20 **Values**:
          `Work`, `Mobile`, `Home`, `Other` '
        type: string
      PersonalEmail:
        description: " The contact's personal email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      PostalCode:
        description: " The zip code for the contact's address.\n**Character limit:**\
          \ 20 **Values: **a string of 20 characters or fewer "
        type: string
      State:
        description: ' The state or province of the contact''s address. '
        type: string
      TaxRegion:
        description: 'If using Zuora Tax rules '
        type: string
      WorkEmail:
        description: " The contact's business email address.\n**Character limit**:\
          \ 80 **Values**: a string of 80 characters or fewer "
        type: string
      WorkPhone:
        description: " The contact's business phone number.\n**Character limit**:\
          \ 40 **notes**: -- **Values**: a string of 40 characters or fewer "
        type: string
    type: object
  ProxyModifyInvoice:
    example:
      Id: 2c93808457d787030157e031d86c4c57
      Status: Posted
    properties:
      Status:
        description: |2+
           The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.
          **Character limit**: 8 **Values**: one of the following:

          -  Draft (default, automatically set upon invoice creation)

          -  Posted

          -  Canceled

        type: string
      TransferredToAccounting:
        description: " Specifies whether or not the invoice was transferred to an\
          \ external accounting system, such as NetSuite.\n**Character limit**: 10\
          \ **Values**: Processing, Yes, Error, Ignore "
        type: string
    type: object
  ProxyModifyInvoiceAdjustment:
    properties:
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      Status:
        description: " The status of the invoice adjustment. This field is required\
          \ in the Query call, but is automatically generated in other calls.\n**Character\
          \ limit**: 9 **Values**: `Canceled`, `Processed` "
        type: string
      TransferredToAccounting:
        description: " Indicates the status of the adjustment's transfer to an external\
          \ accounting system, such as NetSuite.\n**Character limit**: 10 **Values**:\
          \ `Processing`, `Yes`, `Error`, `Ignore` "
        type: string
    type: object
  ProxyModifyInvoicePayment:
    properties:
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency amount "
        format: double
        type: number
    type: object
  ProxyModifyPayment:
    properties:
      AccountId:
        description: " The unique account ID for the customer that the payment is\
          \ for.\n**Character limit**: 32 **Values**: a valid account ID "
        type: string
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      Amount:
        description: " The amount of the payment.\n**Character limit**: 16 **Values**:\
          \ a valid currency value "
        format: double
        type: number
      Comment:
        description: " Additional information related to the payment.\n**Character\
          \ limit**: 255 **Values**: a string of 255 characters or fewer "
        type: string
      EffectiveDate:
        description: " The date when the payment takes effect, in `yyyy-mm-dd` format.\n\
          **Character limit**: 29 "
        format: date
        type: string
      PaymentMethodId:
        description: " The ID of the payment method used for the payment. Required\
          \ for Create.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      ReferenceId:
        description: " The transaction ID returned by the payment gateway. Use this\
          \ field to reconcile payments between your gateway and Zuora Payments.\n\
          **Character limit**: 60 **Values**: a string of 60 characters or fewer "
        type: string
      Status:
        description: " The status of the payment in Zuora. The value depends on the\
          \ type of payment.\n**Character limit**: 11 **Values**: one of the following:\n\
          \n-  Electronic payments: `Processed`, `Error`, `Voided`\n\n-  External\
          \ payments: `Processed`, `Canceled`\n\n* Update of status can change value\
          \ from `Processed` to `Canceled` when the payment type is external. "
        type: string
      TransferredToAccounting:
        description: " Indicates if the payment was transferred to an external accounting\
          \ system. Use this field for integration with accounting systems, such as\
          \ NetSuite.\n**Character limit**: 11 **Values**: `Processing`, `Yes`, `Error`,\
          \ `Ignore` "
        type: string
      Type:
        description: " Indicates if the payment is external or electronic.\n**Character\
          \ limit**: 10 **Values**: `External`, `Electronic` "
        type: string
    type: object
  ProxyModifyPaymentMethod:
    example:
      CreditCardAddress1: 312 2nd Ave W_new
      Id: 2c93808457d787030157e02fced332a2
    properties:
      AccountId:
        description: ' The ID of the customer account associated with this payment
          method. This field is not required for the account ID. '
        type: string
      AchAbaCode:
        description: " The nine-digit routing number or ABA number used by banks.\
          \ Use this field for ACH payment methods.\n**Character limit**: 9 **Values**:\
          \ a string of 9 characters or fewer "
        type: string
      AchAccountName:
        description: " The name of the account holder, which can be either a person\
          \ or a company. Use this field for ACH payment methods.\n**Character limit**:\
          \ 70 **Values**: a string of 70 characters or fewer "
        type: string
      AchAccountType:
        description: |2
           The type of bank account associated with the ACH payment. Use this field for ACH payment methods.
          **Character limit**: 16 **Values**:

          - `BusinessChecking`
          - `Checking`
          - `Saving`
        type: string
      AchAddress1:
        description: " Line 1 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchAddress2:
        description: " Line 2 for the ACH address. Required on create for the Vantiv\
          \ payment gateway. Optional for other gateways.\n**Character limit:** **Values:**\
          \ an address "
        type: string
      AchBankName:
        description: " The name of the bank where the ACH payment account is held.\
          \ Use this field for ACH payment methods.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      BankBranchCode:
        description: " The branch code of the bank used for direct debit. Use this\
          \ field for direct debit payment methods.\n**Character limit**: 10 **Values**:\
          \  string of 10 characters or fewer "
        type: string
      BankCheckDigit:
        description: 'The check digit in the international bank account number, which
          confirms the validity of the account. Use this field for direct debit payment
          methods. **Character limit**: 4 **Values**:  string of 4 characters or fewer '
        type: string
      BankCity:
        description: " The city of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:70 **Values**:  string of\
          \ 70 characters or fewer "
        type: string
      BankCode:
        description: " The sort code or number that identifies the bank. This is also\
          \ known as the sort code. This field is required for direct debit payment\
          \ methods.\n**Character limit**: 18 **Values**:  string of 18 characters\
          \ or fewer "
        type: string
      BankName:
        description: " The name of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      BankPostalCode:
        description: " The zip code or postal code of the direct debit bank. Use this\
          \ field for direct debit payment methods.\n**Character limit**:20 **Values**:\
          \  string of 20 characters or fewer "
        type: string
      BankStreetName:
        description: " The name of the street of the direct debit bank. Use this field\
          \ for direct debit payment methods.\n**Character limit**:60 **Values**:\
          \  string of 60 characters or fewer "
        type: string
      BankStreetNumber:
        description: " The number of the direct debit bank. Use this field for direct\
          \ debit payment methods.\n**Character limit**:10 **Values**:  string of\
          \ 10 characters or fewer "
        type: string
      BankTransferAccountName:
        description: " The name on the direct debit bank account. Use this field for\
          \ direct debit payment methods.\n**Character limit**: 60 **Values**:  string\
          \ of 60 characters or fewer "
        type: string
      BusinessIdentificationCode:
        description: " The business identification code for Swiss direct payment methods\
          \ that use the Global Collect payment gateway. Use this field only for direct\
          \ debit payments in Switzerland with Global Collect.\n**Character limit**:\
          \ 11 **Values**: string of 11 characters or fewer "
        type: string
      City:
        description: " The city of the customer's address. Use this field for direct\
          \ debit payment methods.\n**Character limit**:80 **Values**:  string of\
          \ 80 characters or fewer "
        type: string
      Country:
        description: " The two-letter country code of the customer's address. Use\
          \ this field for direct debit payment methods.\n**Character limit**: 2 **Values**:\
          \ a valid country code "
        type: string
      CreditCardAddress1:
        description: " The first line of the card holder's address, which is often\
          \ a street address or business name. Use this field for credit card and\
          \ direct debit payment methods.\n**Character limit**: 255 **Values**: a\
          \ string of 255 characters or fewer "
        type: string
      CreditCardAddress2:
        description: " The second line of the card holder's address. Use this field\
          \ for credit card and direct debit payment methods.\n**Character limit**:\
          \ 255 **Values**: a string of 255 characters or fewer "
        type: string
      CreditCardCity:
        description: ' The city of the card holder''s address. Use this field for
          credit card and direct debit payment methods **Character limit**: 40 **Values**:
          a string of 40 characters or fewer '
        type: string
      CreditCardCountry:
        description: ' The country of the card holder''s address. '
        type: string
      CreditCardExpirationMonth:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 2 **Values**: a two-digit number, 01 - 12 "
        format: int32
        type: integer
      CreditCardExpirationYear:
        description: " The expiration month of the credit card or debit card. Use\
          \ this field for credit card and direct debit payment methods.\n**Character\
          \ limit**: 4 **Values**: a four-digit number "
        format: int32
        type: integer
      CreditCardHolderName:
        description: " The full name of the card holder. Use this field for credit\
          \ card and direct debit payment methods.\n**Character limit**: 50 **Values**:\
          \ a string of 50 characters or fewer "
        type: string
      CreditCardPostalCode:
        description: " The billing address's zip code. This field is required only\
          \ when you define a debit card or credit card payment.\n**Character limit**:\
          \ 20 **Values**: a string of 20 characters or fewer "
        type: string
      CreditCardState:
        description: ' The billing address''s state. Use this field is if the `CreditCardCountry''
          value is either Canada or the US. State names must be spelled in full. '
        type: string
      CreditCardType:
        description: " The type of credit card or debit card. This field is required\
          \ only when you define a debit card or credit card payment.\n**Character\
          \ limit**: 32 **Values**: `AmericanExpress`, `Discover`, `MasterCard`, `Visa` "
        type: string
      DeviceSessionId:
        description: " The session ID of the user when the `PaymentMethod` was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently only Verifi supports this field.\n**Character limit**: 255 **Values**: "
        type: string
      Email:
        description: " An email address for the payment method in addition to the\
          \ bill to contact email address.\n**Character limit**: 80 **Values**: a\
          \ string of 80 characters or fewer "
        type: string
      ExistingMandate:
        description: " Indicates if the customer has an existing mandate or a new\
          \ mandate. A mandate is a signed authorization for UK and NL customers.\
          \ When you are migrating mandates from another system, be sure to set this\
          \ field correctly. If you indicate that a new mandate is an existing mandate\
          \ or vice-versa, then transactions fail. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No` "
        type: string
      FirstName:
        description: " The customer's first name. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 30 **Values**: a string\
          \ of 30 characters or fewer "
        type: string
      IBAN:
        description: " The International Bank Account Number. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 42 **Values**:\
          \ a string of 42 characters or fewer "
        type: string
      IPAddress:
        description: " The IP address of the user when the payment method was created\
          \ or updated. Some gateways use this field for fraud prevention. If this\
          \ field is passed to Zuora, then Zuora passes this field to supported gateways.\
          \ Currently PayPal, CyberSource, Authorize.Net, and Verifi support this\
          \ field.\n**Character limit**: 15 **Values**: a string of 15 characters\
          \ or fewer "
        type: string
      LastName:
        description: " The customer's last name. This field is used only for the direct\
          \ debit payment method.\n**Character limit**: 70 **Values**: a string of\
          \ 70 characters or fewer "
        type: string
      LastTransactionDateTime:
        description: " The date of the most recent transaction.\n**Character limit**:\
          \ 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      LastTransactionStatus:
        description: " The status of the most recent transaction.\n**Character limit**:\
          \ 39 **Values**: automatically generated "
        type: string
      MandateCreationDate:
        description: " The date when the mandate was created, in `yyyy-mm-dd` format.\
          \ A mandate is a signed authorization for UK and NL customers. This field\
          \ is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MandateID:
        description: " The ID of the mandate. A mandate is a signed authorization\
          \ for UK and NL customers. This field is used only for the direct debit\
          \ payment method.\n**Character limit**: 36 **Values**: a string of 36 characters\
          \ or fewer "
        type: string
      MandateReceived:
        description: " Indicates if  the mandate was received. A mandate is a signed\
          \ authorization for UK and NL customers. This field is used only for the\
          \ direct debit payment method.\n**Character limit**: 3 **Values**: `Yes`,\
          \ `No `(case-sensitive) "
        type: string
      MandateUpdateDate:
        description: " The date when the mandate was last updated, in `yyyy-mm-dd`\
          \ format. A mandate is a signed authorization for UK and NL customers. This\
          \ field is used only for the direct debit payment method.\n**Character limit**:\
          \ 29 "
        format: date
        type: string
      MaxConsecutivePaymentFailures:
        description: " Specifies the number of allowable consecutive failures Zuora\
          \ attempts with the payment method before stopping.\n**Values**: a valid\
          \ number "
        type: integer
      NumConsecutiveFailures:
        description: " The number of consecutive failed payment for this payment method.\
          \ It is reset to 0 upon successful payment. You can use the API to update\
          \ the field value to 0.\n**Character limit**: **Values**: a positive whole\
          \ number "
        format: int32
        type: integer
      PaymentMethodStatus:
        description: " Specifies the status of the payment method. It is set to Active\
          \ on creation.\n**Character limit**: 6 **Values**: `Active` or `Closed` "
        type: string
      PaymentRetryWindow:
        description: " The retry interval setting, which prevents making a payment\
          \ attempt if the last failed attempt was within the last specified number\
          \ of hours. This field is required if the `UseDefaultRetryRule` field value\
          \ is set to `false`.\n**Character limit**: 4 **Values**: a whole number\
          \ between 1 and 1000, exclusive "
        type: integer
      Phone:
        description: " The phone number that the account holder registered with the\
          \ bank. This field is used for credit card validation when passing to a\
          \ gateway.\n**Character limit**: 40 **Values**: a string of 40 characters\
          \ or fewer "
        type: string
      PostalCode:
        description: " The zip code of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 20 **Values**:\
          \ a string of 20 characters or fewer "
        type: string
      State:
        description: " The state of the customer's address. This field is used only\
          \ for the direct debit payment method.\n**Character limit**: 70 **Values**:\
          \ a string of 70 characters or fewer "
        type: string
      StreetName:
        description: " The street name of the customer's address. This field is used\
          \ only for the direct debit payment method.\n**Character limit**: 100 **Values**:\
          \ a string of 100 characters or fewer "
        type: string
      StreetNumber:
        description: " The street number of the customer's address. This field is\
          \ used only for the direct debit payment method.\n**Character limit**: 30\
          \ **Values**: a string of 30 characters or fewer "
        type: string
      UseDefaultRetryRule:
        description: " Determines whether to use the default retry rules configured\
          \ in the Zuora Payments settings. Set this to `true` to use the default\
          \ retry rules. Set this to `false` to set the specific rules for this payment\
          \ method. If you set this value to `false`, then the fields, `PaymentRetryWindow`\
          \ and `MaxConsecutivePaymentFailures`, are required.\n**Character limit**:\
          \ 5 **Values**: `t``rue`, `false` "
        type: boolean
    type: object
  ProxyModifyProduct:
    example:
      Description: Create product via API_new
      EffectiveEndDate: '2066-10-20'
      EffectiveStartDate: '1966-10-20'
      Id: 2c93808457d787030157e02e7be22210
      Name: P_1476934925293_new
      SKU: API-SKU1476934925293
    properties:
      AllowFeatureChanges:
        description: " Controls whether to allow your users to add or remove features\
          \ while creating or amending a subscription.\n**Character** **limit**: n/a\n\
          **Values**: true, false (default) "
        type: boolean
      Category:
        description: |2
           Category of the product. Used by Zuora Quotes Guided Product Selector.
          **Character** **limit**: 100
          **Values**: One of the following:

          - Base Products
          - Add On Services
          - Miscellaneous Products
        type: string
      Description:
        description: ' A descriptionof the product. **Character limit**: 500 **Values**:
          a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: 'The date when the product expires and can''t be subscribed to
          anymore, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      EffectiveStartDate:
        description: 'The date when the product becomes available and can be subscribed
          to, in `yyyy-mm-dd` format. **Character limit**: 29 '
        format: date
        type: string
      Name:
        description: 'The name of the product. This information is displayed in the
          product catalog pages in the web-based UI. **Character limit**: 100 **Values**:
          a string of 100 characters or fewer '
        type: string
      SKU:
        description: |
          The unique SKU for the product. **Character limit**: 50 **Values**: one of the following:

          - leave null for automatic generated
          - an alphanumeric string of 50 characters or fewer
        type: string
    type: object
  ProxyModifyProductRatePlan:
    example:
      Id: 2c93808457d787030157e02da0d91852
      Name: ProductRatePlan1476934869186_new
    properties:
      Description:
        description: 'A description of the product rate plan. **Character limit**:
          500 **Values**: a string of 500 characters or fewer '
        type: string
      EffectiveEndDate:
        description: " The date when the product rate plan expires and can't be subscribed\
          \ to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      EffectiveStartDate:
        description: " The date when the product rate plan becomes available and can\
          \ be subscribed to, in `yyyy-mm-dd` format.\n**Character limit**: 29 "
        format: date
        type: string
      Name:
        description: 'The name of the product rate plan. The name doesn''t have to
          be unique in a Product Catalog, but the name has to be unique within a product.
          **Character limit**: 100 **Values**: a string of 100 characters or fewer '
        type: string
      ProductId:
        description: 'The ID of the product that contains the product rate plan. **Character
          limit**: 32 **Values**: a string of 32 characters or fewer '
        type: string
    type: object
  ProxyModifyRefund:
    example:
      Id: 2c93808457d787030157e03198c84918
      Status: Canceled
    properties:
      ReasonCode:
        description: " A code identifying the reason for the transaction. Must be\
          \ an existing reason code or empty. If you do not specify a value, Zuora\
          \ uses the default reason code.\n**Character limit**: 32 **V****alues**:\
          \ a valid reason code "
        type: string
      Status:
        description: |2
           The status of the refund.
          **Character limit**: 10 **Values**: automatically generated:

          - `Canceled`
          - `Error`
          - `Processed`
          - `Processing`
        type: string
      TransferredToAccounting:
        description: |2
           Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.
          **Character limit**: 10 **Values**: automatically generated:

          - `Processing`
          - `Yes`
          - `Error`
          - `Ignore`
        type: string
    type: object
  ProxyModifySubscription:
    example:
      Id: 2c93808457d787030157e02ea04123cf
      Name: S_1476934934547_name
      Notes: this is notes_new
    properties:
      AccountId:
        description: ' This field can be updated when **Status** is `Draft`. The ID
          of a valid account ID. '
        type: string
      AutoRenew:
        description: " This field can be updated when **Status** is `Draft`. Indicates\
          \ if the subscription automatically renews at the end of the term.\n**Values**:\
          \ `true`, `false` "
        type: boolean
      CancelledDate:
        description: " The date of the Amendment object.\n**Values**: inherited from\
          \ `Amendment.EffectiveDate` "
        format: date
        type: string
      ContractAcceptanceDate:
        description: ' The date when the customer accepts the contract. This field
          can be updated when **Status** is `Draft`. '
        format: date
        type: string
      ContractEffectiveDate:
        description: " The date when the contract takes effect. This field can be\
          \ updated when **Status** is `Draft`.\n**Note**: This field is required\
          \ in the Subscribe call. If you set the value of this field to null and\
          \ both the ServiceActivationDate and ContractAcceptanceDate fields are not\
          \ required, the Subscribe call still returns success, but the new subscription\
          \ is in `DRAFT` status. To activate the subscription, you must set a valid\
          \ date to this field. "
        format: date
        type: string
      CpqBundleJsonId__QT:
        description: " The Bundle product structures from Zuora Quotes if you utilize\
          \ Bundling in Salesforce. Do not change the value in this field.\n**Character\
          \ limit**: 32 **Values**: N/A "
        type: string
      CurrentTermPeriodType:
        description: |2
           The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
        type: string
      InitialTerm:
        description: " The length of the period for the first subscription term. This\
          \ field can be updated when Status is `Draft`.\n**Required**: If TermType\
          \ is Termed **Character limit**: 20 **Values**: any valid number. The default\
          \ value is 0. "
        format: int32
        type: integer
      InitialTermPeriodType:
        description: |2
           The period type for the first subscription term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field can be updated when Status is `Draft`.
          - This field is used with the InitialTerm field to specify the initial subscription term.
        type: string
      InvoiceOwnerId:
        description: ' This field can be updated when **Status** is `Draft`. A valid
          account ID. '
        type: string
      IsInvoiceSeparate:
        description: " Determines if the subscription is invoiced separately. If `TRUE`,\
          \ then all charges for this subscription are collected into the subscription's\
          \ own invoice.\n**Values**: `TRUE`, `FALSE `(default) "
        type: boolean
      Name:
        description: |2
           The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur.
          **Character limit**: 100 **Values**: one of the following:

          - leave null to automatically generate
          - a string of 100 characters or fewer
        type: string
      Notes:
        description: " Use this field to record comments about the subscription.\n\
          **Character limit**: 500 **Values**: a string of 500 characters or fewer "
        type: string
      OpportunityCloseDate__QT:
        description: " The closing date of the Opportunity. This field is used in\
          \ Zuora Reporting Data Sources to report on Subscription metrics. If the\
          \ subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: **Values**: populated\
          \ by Zuora Quotes "
        format: date
        type: string
      OpportunityName__QT:
        description: " The unique identifier of the Opportunity. This field is used\
          \ in the Zuora Reporting Data Sources to report on Subscription metrics.\
          \ If the subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: 100 **Values**:\
          \ populated by Zuora Quotes "
        type: string
      QuoteBusinessType__QT:
        description: " The specific identifier for the type of business transaction\
          \ the Quote represents such as New, Upsell, Downsell, Renewal or Churn.\
          \ This field is used in the Zuora Reporting Data Sources to report on Subscription\
          \ metrics. If the subscription was originated from Zuora Quotes, the value\
          \ is populated with the value from Zuora Quotes.\n**Character limit**: 32\
          \ **Values**: populated by Zuora Quotes "
        type: string
      QuoteNumber__QT:
        description: " The unique identifier of the Quote. This field is used in the\
          \ Zuora Reporting Data Sources to report on Subscription metrics. If the\
          \ subscription was originated from Zuora Quotes, the value is populated\
          \ with the value from Zuora Quotes.\n**Character limit**: 32 **Values**:\
          \ populated by Zuora Quotes "
        type: string
      QuoteType__QT:
        description: " The Quote type that represents the subscription lifecycle stage\
          \ such as New, Amendment, Renew or Cancel. This field is used in the Zuora\
          \ Reporting Data Sources to report on Subscription metrics. If the subscription\
          \ was originated from Zuora Quotes, the value is populated with the value\
          \ from Zuora Quotes.\n**Character limit**: 32 **Values**: populated by Zuora\
          \ Quotes "
        type: string
      RenewalSetting:
        description: " This field can be updated when **Status** is `Draft`. Specifies\
          \ whether a termed subscription will remain termed or change to evergreen\
          \ when it is renewed.\n**Required**: If TermType is Termed **Values**: `RENEW_WITH_SPECIFIC_TERM\
          \ `(default), `RENEW_TO_EVERGREEN` "
        type: string
      RenewalTerm:
        description: |2
           The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. **Required**: If TermType is Termed.
          **Character limit**: 20 **Values**: one of the following:

          - leave null to default to `0`
          - any number
        format: int32
        type: integer
      RenewalTermPeriodType:
        description: |2
           The period type for the subscription renewal term.
          **Values**:

          - `Month` (default)
          - `Year`
          - `Day`
          - `Week`
          **Note**:

          - This field is used with the RenewalTerm field to specify the subscription renewal term.
          - This field can be updated when Status is `Draft`.
        type: string
      ServiceActivationDate:
        description: " The date when the subscription is activated. This field can\
          \ be updated when **Status** is `Draft`.\n**Character limit**: 29 "
        format: date
        type: string
      Status:
        description: |2
           The status of the subscription.
          **Character limit**: 17 **Values**: automatically generated **Possible values**: one of the following:

          - `Draft`
          - `PendingActivation`
          - `PendingAcceptance`
          - `Active`
          - `Cancelled`
          - `Expired`
          - `Suspended` (This value is in **Limited Availability**.)
        type: string
      TermStartDate:
        description: " This field can be updated when **Status** is `Draft`. The date\
          \ when the subscription term begins. If this is a renewal subscription,\
          \ then this date is different from the subscription start date.\n**Character\
          \ limit**: 29 **Version notes**: -- "
        format: date
        type: string
      TermType:
        description: " This field can be updated when **Status** is `Draft`. Indicates\
          \ if a subscription is termed or evergreen.\n**Character limit**: 9 **Values**:\
          \ `TERMED`, `EVERGREEN` "
        type: string
      Version:
        description: " The version number of the subscription.\n**Values**: automatically\
          \ generated "
        format: int32
        type: integer
    type: object
  ProxyModifyTaxationItem:
    properties:
      AccountingCode:
        description: ' The Chart of Accounts '
        type: string
      ExemptAmount:
        description: " The amount of taxes or VAT for which the customer has an exemption.\n\
          **Character limit**: 16 **Values**: a decimal value "
        format: double
        type: number
      Jurisdiction:
        description: " The jurisdiction that applies the tax or VAT. This value is\
          \ typically a state, province, county, or city.\n**Character limit**: 32\
          \ **Values**: a string of 32 characterrs or fewer "
        type: string
      LocationCode:
        description: " The identifier for the location based on the value of the `TaxCode`\
          \ field.\n**Character limit**: 32 **Values**: automatically generated "
        type: string
      Name:
        description: " The name of the tax rate, such as sales tax or GST. This name\
          \ is displayed on invoices.\n**Character limit**: 128 **Values**: a string\
          \ of 128 characters or fewer "
        type: string
      TaxAmount:
        description: " The amount of the tax applied to the charge.\n**Character limit**:\
          \ 16 **Values**: a decimal value "
        format: double
        type: number
      TaxCode:
        description: " The tax code identifies which tax rules and tax rates to apply\
          \ to a specific charge.\n**Character limit**: 32 **Values**: a string of\
          \ 32 characters or fewer "
        type: string
      TaxCodeDescription:
        description: " The description for the tax code.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxDate:
        description: " The date that the tax is applied to the charge, in `yyyy-mm-dd`\
          \ format.\n**Character limit**: 29 "
        format: date
        type: string
      TaxRate:
        description: " The tax rate applied to the charge.\n**Character limit**: 16\
          \ **Values**: a valid decimal value "
        format: double
        type: number
      TaxRateDescription:
        description: " The description of the tax rate.\n**Character limit**: 255\
          \ **Values**: a string of 255 characters or fewer "
        type: string
      TaxRateType:
        description: " The type of the tax rate applied to the charge.\n**Character\
          \ limit**: 10 **Values**: `Percentage`, `FlatFee` "
        type: string
    type: object
  ProxyModifyUnitOfMeasure:
    properties:
      Active:
        description: " Indicates if the UOM is available for new product rate plans.\
          \ The default value is `true`.\n**Character limit**: 5 **Values**: `true`,\
          \ `false ` "
        type: boolean
      DecimalPlaces:
        description: 'The number of digits to the right of the decimal point that
          you want to measure for the unit. To use whole numbers only, set this value
          to 0. You can''t change this value after this `UOM` is used in any product,
          subscription, or usage. **Character limit**: 1 **Values**: an integer between
          0 and 9, exclusive '
        format: int64
        type: integer
      DisplayedAs:
        description: 'The name of the UOM that you want displayed on invoices. The
          default value is the `UomName` field value. **Character limit**: 50 **Values**:
          A string of 50 characters or fewer '
        type: string
      RoundingMode:
        description: " Specifies whether to round the UOM value up or down when the\
          \ value exceeds the `DecimalPlaces` field value. The default value is `Up`.\n\
          **Character limit**: 4 **Values**: `Up`, `Down` "
        type: string
      UomName:
        description: " The name of the UOM, such as license or GB. This name is displayed\
          \ in query results and in the web-based UI labels. If you want a different\
          \ name to be displayed on invoices, then use the `DisplayedAs` field to\
          \ provide the invoice label.\n**Character limit**: 50 **Values**: a string\
          \ of 50 characters or fewer "
        type: string
    type: object
  ProxyModifyUsage:
    properties:
      EndDateTime:
        description: " The end date and time of a range of time when usage is tracked.\
          \ Use this field for reporting; this field doesn't affect usage calculation.\n\
          **Character limit**: 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      Quantity:
        description: " Indicates the number of units used.\n**Character limit**: 16\
          \ **Values**: a valid decimal amount equal to or greater than 0 "
        format: double
        type: number
      RbeStatus:
        description: " Indicates if the rating and billing engine (RBE) processed\
          \ usage data for an invoice.\n**Character limit**: 9 **Values**: automatically\
          \ generated to be one of the following values: `Importing`, `Pending`, `Processed` "
        type: string
      StartDateTime:
        description: " The start date and time of a range of time when usage is tracked.\
          \ Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`,\
          \ the `StartDateTime` field does affect usage calculation.\n**Character\
          \ limit**: 29 **Values**: a valid date and time value "
        format: date-time
        type: string
      SubmissionDateTime:
        description: " The date when usage was submitted.\n**Character limit**: 29\
          \ **Values**: automatically generated "
        format: date-time
        type: string
      UOM:
        description: " Specifies the units to measure usage. Units of measure are\
          \ configured in the web-based UI. Your values depend on your configuration\
          \ in **Billing Settings**.\n**Character limit**: **Values**: a valid unit\
          \ of measure "
        type: string
    type: object
  ProxyNoDataResponse:
    properties:
      done:
        description: ''
        type: boolean
      records:
        description: ''
        items:
          type: object
        type: array
      size:
        description: ''
        type: integer
    type: object
  QueryResult:
    properties:
      done:
        description: ''
        type: boolean
      queryLocator:
        description: ''
        type: string
      records:
        description: ''
        items:
          $ref: '#/definitions/zObject'
        type: array
      size:
        description: ''
        format: int32
        type: integer
    type: object
  RatePlan:
    properties:
      AmendmentId:
        description: " The ID of the amendment associated with the rate plan. This\
          \ field only applies to amendment rate plans.\n\n\n**Character limit**:\
          \ 32\n\n**Values**: a valid amendment ID "
        type: string
      AmendmentSubscriptionRatePlanId:
        description: "The ID of the subscription rate plan modified by the amendment.\
          \ This field only applies to amendment rate plans.\n\n**Character limit**:\
          \ 32\n\n**Values**: a valid rate plan ID "
        type: string
      AmendmentType:
        description: "The type of amendment associated with the rate plan. This field\
          \ only applies to amendment rate plans.\n\n**Character limit**: 18\n\n**Values**:\
          \ inherited from `Amendment.Type` "
        type: string
      CreatedById:
        description: "The ID of the Zuora user who created the RatePlan object.\n\n\
          **Character limit**: 32\n\n**Values**: automatically generated "
        type: string
      CreatedDate:
        description: "The date when the `RatePlan` object was last updated.\n\n**Character\
          \ limit**: 29\n\n**Values**: automatically generated "
        format: date-time
        type: string
      Name:
        description: "The name of the rate plan. Leave this null in a subscribe call\
          \ to inherited the `ProductRatePlan.Name` field value.\n\n**Character limit**:\
          \ 100\n\n**Values**: a string of 100 characters or fewer or inherited from\
          \ ProductRatePlan.Name "
        type: string
      ProductRatePlanId:
        description: "The ID of the associated product rate plan.\n\n**Character limit**:\
          \ 32\n\n**Values**: a valid product rate plan ID "
        type: string
      SubscriptionId:
        description: "The ID of the subscription that the rate plan belongs to.\n\n\
          **Character limit**: 32\n\n**Values**: a valid subscription ID "
        type: string
      UpdatedById:
        description: " The ID of the user who last updated the rate plan.\n\n\n**Character\
          \ limit**: 32\n\n**Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the rate plan was last updated.\n\n\n**Character\
          \ limit**: 29\n\n**Values**: automatically generated "
        format: date-time
        type: string
    type: object
  RatePlanChargeData:
    properties:
      RatePlanCharge:
        description: ''
        properties:
          AccountingCode:
            description: "The accounting code for the charge. Accounting codes group\
              \ transactions that contain similar accounting attributes.\n\n**Character\
              \ limit**: 100\n\n\n**Values**: inherited from `ProductRatePlanCharge.AccountingCode` "
            type: string
          ApplyDiscountTo:
            description: " Specifies the type of charges a specific discount applies\
              \ to.\n\n**Character limit**: 21\n\n\n**Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` "
            type: string
          BillCycleDay:
            description: " Indicates the charge's billing cycle day (BCD), which is\
              \ when bill runs generate invoices for charges associated with the product\
              \ rate plan charge or the account.\n\n\n**Character limit**: 2\n\n\n\
              **Values**: inherited from `ProductRatePlanCharge.BillCycleDay` "
            format: int32
            type: integer
          BillCycleType:
            description: " Specifies how to determine the billing day for the charge.\n\
              \n\n**Character limit**: 20\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillCycleType`\
              \ **Note:** You can override the value inherited from the Product Rate\
              \ Plan Charge, but only when creating a new subscription or a New Product\
              \ amendment. "
            type: string
          BillingPeriod:
            description: " Allows billing period to be overridden on rate plan charge.\n\
              \n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod`\
              \ **Note:** You can override the value inherited from the Product Rate\
              \ Plan Charge, but only when creating a new subscription or a New Product\
              \ amendment. "
            type: string
          BillingPeriodAlignment:
            description: " Aligns charges within the same subscription if multiple\
              \ charges begin on different dates.\n\n\n**Character limit**: 24\n\n\
              \n**Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` "
            type: string
          BillingTiming:
            description: |2+
               The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.


              **Character limit**:


              **Values**: one of the following:

              - I`n Advance`
              - `In Arrears`
              **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
              This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).

            type: string
          ChargeModel:
            description: " Determines how to evaluate charges. Charge models must\
              \ be individually activated in the web-based UI.\n\n\n**Character limit**:\
              \ 29\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeModel` "
            type: string
          ChargeNumber:
            description: |2
               A unique number that identifies the charge. This number is returned as a string.


              **Character limit**: 50


              **Values**: one of the following:

              - automatically generated if left null
              - a unique number of 50 characters or fewer
            type: string
          ChargeType:
            description: " Specifies the type of charge.\n\n\n**Character limit**:\
              \ 9\n\n\n**Values**: inherited from `ProductRatePlanCharge.ChargeType` "
            type: string
          ChargedThroughDate:
            description: " The date through which a customer has been billed for the\
              \ charge.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically\
              \ generated "
            format: date
            type: string
          CreatedById:
            description: "The ID of the Zuora user who created the `RatePlanCharge`\
              \ object.\n\n**Character limit**: 32\n\n\n**Values**: automatically\
              \ generated "
            type: string
          CreatedDate:
            description: " The date when the `RatePlanCharge` object was created.\n\
              \n\n**Character limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          DMRC:
            description: "A delta monthly recurring charge is the change in monthly\
              \ recurring revenue caused by an amendment or a new subscription.\n\n\
              **Character limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          DTCV:
            description: " After an Amendment, the change in the total contract value\
              \ (TCV) amount for this charge, compared with its previous value.\n\n\
              \n**Character limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          Description:
            description: " A description of the charge.\n\n\n**Character limit**:\
              \ 500\n\n\n**Values**: inherited from `ProductRatePlanCharge.Description` "
            type: string
          DiscountAmount:
            description: " Specifies the amount of a fixed-amount discount. You can\
              \ provide a value for this field if the `ChargeModel` field value is\
              \ `Discount-Fixed Amount`. If this field is included in a query, the\
              \ query will filter out the rate plans whose `ChargeModel` field is\
              \ not of a Discount type. You cannot query this field with the following\
              \ fields in a single query:\n\n- Price\n- IncludedUnits\n- DiscountPercentage\n\
              - OveragePrice\n\n\n**Character limit**: 16\n\n\n**Values**: a valid\
              \ currency amount "
            format: double
            type: number
          DiscountLevel:
            description: "Specifies if the discount applies to just the product rate\
              \ plan, the entire subscription, or to any activity in the account.\n\
              \n**Character limit**: 12\n\n\n**Values**: inherited from `ProductRatePlanCharge.DiscountLevel` "
            type: string
          DiscountPercentage:
            description: ' Query Filter '
            format: double
            type: number
          EffectiveEndDate:
            description: " The date when the segmented charge ends or ended.\n\n\n\
              **Character limit**: 16\n\n\n**Values**: automatically generated "
            format: date
            type: string
          EffectiveStartDate:
            description: " The date when the segmented charge starts or started.\n\
              \n\n**Character limit**: 16\n\n\n**Values**: automatically generated "
            format: date
            type: string
          EndDateCondition:
            description: " Defines when the charge ends after the charge trigger date.\
              \ This field can be updated when **Status** is `Draft`.\n\n\n\n**Values**:\
              \ one of the following:\n\n- `SubscriptionEnd`: The charge ends on the\
              \ subscription end date after the charge trigger date. This is the default\
              \ value.\n- `FixedPeriod`: The charge ends after a specified period\
              \ based on the trigger date of the charge. If you set this field to\
              \ `FixedPeriod`, you must specify the length of the period and a period\
              \ type by defining the `UpToPeriods` and `UpToPeriodsType` fields.\n\
              - `SpecificEndDate`: The specific date on which the charge ends. If\
              \ you set this field to `SpecificEndDate`, you must specify the specific\
              \ date by defining the `SpecificEndDate` field.\n\n\n\n**Note**: If\
              \ the subscription ends before the charge end date, the charge ends\
              \ when the subscription ends. But if the subscription end date is subsequently\
              \ changed through a Renewal, or Terms and Conditions amendment, the\
              \ charge will end on the charge end date. "
            type: string
          IncludedUnits:
            description: ' Query Filter '
            format: double
            type: number
          IsLastSegment:
            description: "Indicates if the segment of the rate plan charge is the\
              \ most recent segment.\n\n**Character limit**: 5\n\n\n**Values**: automatically\
              \ generated: `true`, `false` "
            type: boolean
          ListPriceBase:
            description: |
              The list price base for the product rate plan charge.


              **Values**: one of the following:

              - `Per Month`
              - `Per Billing Period`
              - `Per Week`
            type: string
          MRR:
            description: "Monthly recurring revenue (MRR) is the amount of recurring\
              \ charges in a given month. The MRR calculation doesn't include one-time\
              \ charges nor usage charges.\n\n**Character limit**: 16\n\n\n**Values**:\
              \ automatically generated "
            format: double
            type: number
          Name:
            description: "The name of the rate plan charge.\n\n**Character limit**:\
              \ 100\n\n\n**Values**: automatically generated "
            type: string
          NumberOfPeriods:
            description: "Specifies the number of periods to use when calculating\
              \ charges in an overage smoothing charge model.\n\n**Character limit**:\
              \ 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` "
            format: int64
            type: integer
          OriginalId:
            description: "The original ID of the rate plan charge.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          OverageCalculationOption:
            description: "Determines when to calculate overage charges. If the value\
              \ of the SmoothingMode field is null (not specified and not inherited\
              \ from ProductRatePlanCharge.SmoothingMode), the value of this field\
              \ is ignored.\n\n**Character limit**: 20\n\n\n**Values**: inherited\
              \ from `ProductRatePlanCharge.OverageCalculationOption` "
            type: string
          OveragePrice:
            description: ' Query Filter '
            format: double
            type: number
          OverageUnusedUnitsCreditOption:
            description: " Determines whether to credit the customer with unused units\
              \ of usage.\n\n\n**Character limit**: 20\n\n\n**Values**: inherited\
              \ from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` "
            type: string
          Price:
            description: ' Query Filter '
            format: double
            type: number
          PriceChangeOption:
            description: |2
               Applies an automatic price change when a termed subscription is renewed.


              **Character limit**:


              **Values**: one of the following:

              - `NoChange` (default)
              - `SpecificPercentageValue`
              - `UseLatestProductCatalogPricing`
            type: string
          PriceIncreasePercentage:
            description: " Specifies the percentage to increase or decrease the price\
              \ of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption`\
              \ value is set to `SpecificPercentageValue`.\n\n\n**Character limit**:\
              \ 16\n\n\n**Values**: a decimal value between -100 and 100 "
            format: double
            type: number
          ProcessedThroughDate:
            description: " The date until when charges have been processed. When billing\
              \ in arrears, such as usage, this field value is the the same as the\
              \ `ChargedThroughDate` value. This date is the earliest date when a\
              \ charge can be amended.\n\n\n**Character limit**: 29\n\n\n**Values**:\
              \ automatically generated "
            format: date
            type: string
          ProductRatePlanChargeId:
            description: " The ID of the product rate plan charge associated with\
              \ the subscription rate plan charge,\n\n**Character limit**: 32\n\n\n\
              **Values**: inherited from `ProductRatePlanCharge.Id` "
            type: string
          Quantity:
            description: " The default quantity of units, such as the number of authors\
              \ in a hosted wiki service. Valid for all charge models except for Flat\
              \ Fee pricing.\n\n\n**Character limit**: 16\n\n\n**Values**: a valid\
              \ quantity value "
            format: double
            type: number
          RatePlanId:
            description: " The ID of the rate plan associated with the rate plan charge.\n\
              \n\n**Character limit**: 32\n\n\n**Values**: inherited from `RatePlan.Id` "
            type: string
          RevRecCode:
            description: " Associates this product rate plan charge with a specific\
              \ revenue recognition code.\n\n\n**Character limit**: 70\n\n\n**Values**:\
              \ a valid revenue recognition code "
            type: string
          RevRecTriggerCondition:
            description: |2+
               Specifies when revenue recognition begins.


              **Character limit**: 22


              **Values**: one of the following:

              -  `ContractEffectiveDate`

              -  `ServiceActivationDate`

              -  `CustomerAcceptanceDate`

            type: string
          RevenueRecognitionRuleName:
            description: " Specifies the Revenue Recognition Rule that you want the\
              \ Rate Plan Charge to use. This field can be updated when **Status**\
              \ is `Draft`. By default, the Revenue Recognition Rule is inherited\
              \ from the Product Rate Plan Charge. For Amend\ncalls, you can use this\
              \ field only for NewProduct amendments. For Update\ncalls, you can use\
              \ this field only to update subscriptions in draft status. Note that\
              \ if you use this field to specify a Revenue Recognition Rule for the\
              \ Rate Plan Charge, the rule will remain as specified even if you later\
              \ change the rule used by the corresponding Product Rate Plan Charge.\
              \ See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles)\
              \ permission enabled to use this field.\n\n\n\n**Character limit**:\
              \ n/a\n\n\n**Values**: name of an active Revenue Recognition Rule "
            type: string
          RolloverBalance:
            description: |2
               Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.


              **Character limit**: 16


              **Values**: automatically generated

              **Note**:

              - You cannot query or filter this field with other fields in a single query.
              - To query or filter this field, you must specify and only specify the rate plan charge Id in the condition.
              - You cannot use this field in the query or filter condition.
            format: double
            type: number
          Segment:
            description: " The identifying number of the subscription rate plan segment.\
              \ Segments are numbered sequentially, starting with 1.\n\n\n**Character\
              \ limit**: 2\n\n\n**Values**: automatically generated "
            format: int32
            type: integer
          SpecificBillingPeriod:
            description: " Customizes the number of months or weeks for the charges\
              \ billing period. This field is required if you set the value of the\
              \ BillingPeriod field to `Specific Months` or `Specific Weeks`.\n\n\n\
              **Character limit**: 5\n\n\n**Values**: inherited from `ProductRatePlanCharge.BillingPeriod`\
              \ **Note:** You can override the value inherited from the Product Rate\
              \ Plan Charge, but only when creating a new subscription or a New Product\
              \ amendment. "
            format: int64
            type: integer
          SpecificEndDate:
            description: |2
               The specific date on which the charge ends, in `yyyy-mm-dd` format.


              **Character limit**: 29



              **Note**:

              - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
              - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
            format: date
            type: string
          TCV:
            description: " The total contract value (TCV) is the value of a single\
              \ rate plan charge in a subscription over the lifetime of the subscription.\
              \ This value does not represent all charges on the subscription. The\
              \ TCV includes recurring charges and one-time charges, but it doesn't\
              \ include usage charge.\n\n\n**Character limit**: 16\n\n\n**Values**:\
              \ automatically generated "
            format: double
            type: number
          TriggerDate:
            description: |2+
               The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is required if the `TriggerEvent` field value is `SpecificDate`.


              **Character limit**: 29

            format: date
            type: string
          TriggerEvent:
            description: |2
               Specifies when to start billing the customer for the charge.
              **Note: **This field can be passed through the subscribe
              and amend
              calls and will override the default value set on the Product Rate Plan Charge.


              **Character limit**: 18


              **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:

              - `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.
              - `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.
              - `CustomerAcceptance `is when the customer accepts the services or products for a subscription.
              - SpecificDate is valid only on the RatePlanCharge.
            type: string
          UOM:
            description: " Specifies the units to measure usage. Units of measure\
              \ are configured in the web-based UI: **Z-Billing > Settings**.\n\n\n\
              **Character limit**: 25\n\n\n**Values**: inherited from `ProductRatePlanCharge.UOM` "
            type: string
          UnusedUnitsCreditRates:
            description: " Specifies the rate to credit a customer for unused units\
              \ of usage. This field is applicable only for overage charge models\
              \ when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.\n\
              \n\n**Character limit**: 16\n\n\n**Values**: a valid decimal value "
            format: double
            type: number
          UpToPeriods:
            description: |2
               Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.


              **Character limit**: 5


              **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`

              **Note**:

              - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
              - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
              - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
              - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
              - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
            format: int64
            type: integer
          UpToPeriodsType:
            description: |2
               The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.


              **Values**: one of the following:

              - `Billing Periods` (default)
              - `Days`
              - `Weeks`
              - `Months`
              - `Years`


              **Note**:

              - You must use this field together with the `UpToPeriods` field to specify the time period.
              - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
            type: string
          UpdatedById:
            description: "The ID of the last user to update the object.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: " The date when the object was last updated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          UsageRecordRatingOption:
            description: " Determines how Zuora processes usage records for per-unit\
              \ usage charges.\n\n**Character limit**: 18\n\n\n**Values**: automatically\
              \ generated "
            type: string
          UseDiscountSpecificAccountingCode:
            description: " Determines whether to define a new accounting code for\
              \ the new discount charge.\n\n\n**Character limit**: 5\n\n\n**Values**:\
              \ inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode` "
            type: boolean
          Version:
            description: " The version of the rate plan charge. Each time a charge\
              \ is amended, Zuora creates a new version of the rate plan charge.\n\
              \n**Character limit**: 5\n\n\n**Values**: automatically generated "
            format: int64
            type: integer
          WeeklyBillCycleDay:
            description: |2
               Specifies which day of the week as the bill cycle day (BCD) for the charge.
              This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).




              **Values**: one of the following:

              - `Sunday`
              - `Monday`
              - `Tuesday`
              - `Wednesday`
              - `Thursday`
              - `Friday`
              - `Saturday`
            type: string
        type: object
      RatePlanChargeTier:
        description: ''
        items:
          $ref: '#/definitions/RatePlanChargeTier'
        type: array
    type: object
  RatePlanChargeTier:
    properties:
      CreatedById:
        description: "The ID of the Zuora user who created the RatePlanChargeTier\
          \ object.\n\n**Character limit**: 32\n\n\n**Values**: automatically generated "
        type: string
      CreatedDate:
        description: " The date when the RatePlanChargeTier object was created.\n\n\
          \n**Character limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
      EndingUnit:
        description: " The end number of a range of units for the tier.\n\n\n**Character\
          \ limit**: 16\n\n\n**Values**: any positive decimal value "
        format: double
        type: number
      IsOveragePrice:
        description: " Indicates if the price is an overage price. An overage occurs\
          \ when usage surpasses the last defined tier. This field is applicable only\
          \ to tier pricing and volume pricing models.\n\n\n\n**Values**: true, false "
        type: boolean
      Price:
        description: " The price of the tier if the charge is a flat fee, or the price\
          \ of each unit in the tier if the change model is tiered pricing.\n\n\n\
          **Character limit**: 16\n\n\n**Values**: any positive decimal value "
        format: double
        type: number
      PriceFormat:
        description: " Indicates if the price is a flat fee or is per unit.\n\n\n\
          **Character limit**: 8\n\n\n**Values**: `Flat Fee`, `Per Unit` "
        type: string
      RatePlanChargeId:
        description: " The ID of the subscription or amendment rate plan charge associated\
          \ with this tier. You can't create an unassociated tier.\n\n\n**Character\
          \ limit**: 32\n\n\n**Values**: inherited from `RatePlanCharge`.`Id` "
        type: string
      StartingUnit:
        description: " The start number of a range of units for the tier.\n\n\n**Character\
          \ limit**: 16\n\n\n**Values**: any positive decimal value "
        format: double
        type: number
      Tier:
        description: " A unique number that identifies the tier that the price applies\
          \ to.\n\n\n**Character limit**: 20\n\n\n**Values**: automatically generated "
        format: int32
        type: integer
      UpdatedById:
        description: "The ID of the last user to update the object.\n\n**Character\
          \ limit**: 32\n\n\n**Values**: automatically generated "
        type: string
      UpdatedDate:
        description: " The date when the object was last updated.\n\n\n**Character\
          \ limit**: 29\n\n\n**Values**: automatically generated "
        format: date-time
        type: string
    type: object
  RatePlanData:
    properties:
      RatePlan:
        description: ''
        properties:
          AmendmentId:
            description: " The ID of the amendment associated with the rate plan.\
              \ This field only applies to amendment rate plans.\n\n\n**Character\
              \ limit**: 32\n\n\n**Values**: a valid amendment ID "
            type: string
          AmendmentSubscriptionRatePlanId:
            description: "The ID of the subscription rate plan modified by the amendment.\
              \ This field only applies to amendment rate plans.\n\n**Character limit**:\
              \ 32\n\n\n**Values**: a valid rate plan ID "
            type: string
          AmendmentType:
            description: "The type of amendment associated with the rate plan. This\
              \ field only applies to amendment rate plans.\n\n**Character limit**:\
              \ 18\n\n\n**Values**: inherited from `Amendment.Type` "
            type: string
          CreatedById:
            description: "The ID of the Zuora user who created the RatePlan object.\n\
              \n**Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          CreatedDate:
            description: "The date when the `RatePlan` object was last updated.\n\n\
              **Character limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          Name:
            description: "The name of the rate plan. Leave this null in a subscribe\n\
              call to inherited the `ProductRatePlan.Name` field value.\n\n**Character\
              \ limit**: 100\n\n\n**Values**: a string of 100 characters or fewer\
              \ or inherited from ProductRatePlan.Name "
            type: string
          ProductRatePlanId:
            description: "The ID of the associated product rate plan.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: a valid product rate plan ID "
            type: string
          SubscriptionId:
            description: "The ID of the subscription that the rate plan belongs to.\n\
              \n**Character limit**: 32\n\n\n**Values**: a valid subscription ID "
            type: string
          UpdatedById:
            description: " The ID of the user who last updated the rate plan.\n\n\n\
              **Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: " The date when the rate plan was last updated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
        type: object
      RatePlanChargeData:
        description: ''
        items:
          $ref: '#/definitions/RatePlanChargeData'
        type: array
      SubscriptionProductFeatureList:
        description: ''
        properties:
          SubscriptionProductFeature:
            description: ''
            items:
              $ref: '#/definitions/SubscriptionProductFeature'
            type: array
        type: object
    type: object
  RevenueScheduleItemType:
    properties:
      accountingPeriodName:
        description: 'Name of the accounting period. The open-ended accounting period
          is named `Open-Ended`.

          '
        type: string
      customField__c:
        description: 'Any custom fields defined for this object. The custom field
          name is case-sensitive.

          '
        type: string
    required:
    - accountingPeriodName
    title: revenueItems
    type: object
  SaveResult:
    properties:
      Errors:
        description: ''
        items:
          $ref: '#/definitions/Error'
        type: array
      Id:
        description: ''
        type: string
      Success:
        description: ''
        type: boolean
    type: object
  SubscribeRequest:
    properties:
      Account:
        description: |2-
           This is the Account object containing the information for this particular subscription. It has all the information needed to create an account for a subscription.

          **Values:** A valid account.
        properties:
          AccountNumber:
            description: |
              Unique account number assigned to the account.

              **Character limit**: 50


              **Values**: one of the following:

              - null to auto-generate
              - a string of 50 characters or fewer that doesn't begin with the default account number prefix
            type: string
          AdditionalEmailAddresses:
            description: "List of additional email addresses to receive emailed invoices.\n\
              \n**Character limit**: 120\n\n\n**Values**: comma-separated list of\
              \ email addresses "
            type: string
          AllowInvoiceEdit:
            description: " Indicates if associated invoices can be edited.\n\n\n**Character\
              \ limit**: 5\n\n\n**Values**: `true`, `false` (default if left null) "
            type: boolean
          AutoPay:
            description: " Indicates if future payments are automatically collected\
              \ when they're due during a Payment Run.\n\n\n**Character limit**: 5\n\
              \n\n**Values**: `true`, `false` (default) "
            type: boolean
          Balance:
            description: "Current outstanding balance for the account.\n\n**Character\
              \ limit**: 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          Batch:
            description: " Organizes your customer accounts into groups to optimize\
              \ your billing and payment operations.\n\n\n**Character limit**: 20\n\
              \n\n**Values**:any system-defined batch (`Batch1` - `Batch50 `or by\
              \ name). "
            type: string
          BcdSettingOption:
            description: "Billing cycle day setting option.\n\n**Character limit**:\
              \ 9\n\n\n**Values**: `AutoSet`, `ManualSet` "
            type: string
          BillCycleDay:
            description: "Billing cycle day (BCD) on which bill runs generate invoices\
              \ for the account.\n\n**Character limit**: 2\n\n\n**Values**: any activated\
              \ system-defined bill cycle day (`1` - `31`) "
            format: int32
            type: integer
          BillToId:
            description: "ID of the person to bill for the account.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: a valid contact ID for the account "
            type: string
          CommunicationProfileId:
            description: "Associates the account with a specified communication profile.\n\
              \n**Character limit**: 32\n\n\n**Values**: a valid communication profile\
              \ ID "
            type: string
          CreatedById:
            description: "ID of the Zuora user who created the Account object.\n\n\
              **Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          CreatedDate:
            description: "Date when the Account object was created.\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          CreditBalance:
            description: "Total credit balance for the account.\n\n**Character limit**:\
              \ 16\n\n\n**Values**: automatically generated "
            format: double
            type: number
          CrmId:
            description: "CRM account ID for the account. A CRM is a customer relationship\
              \ management system, such as Salesforce.com.\n\n**Character limit**:\
              \ 100\n\n\n**Values**: a string of 100 characters or fewer "
            type: string
          Currency:
            description: ' Currency that the customer is billed in. See [a currency
              value defined in the Zuora Ui admin settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Customize_Currencies) '
            type: string
          CustomerServiceRepName:
            description: "Name of the account's customer service representative, if\
              \ applicable.\n\n**Character limit**: 50\n\n\n**Values**: a string of\
              \ 50 characters or fewer "
            type: string
          DefaultPaymentMethodId:
            description: "ID of the default payment method for the account. This field\
              \ is required if the AutoPay field is set to `true`.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: a valid ID for an existing payment method "
            type: string
          InvoiceDeliveryPrefsEmail:
            description: "Indicates if the customer wants to receive invoices through\
              \ email.\n**Character limit**: 5\n\n\n**Values**: `true`, `false` (default\
              \ if left null) "
            type: boolean
          InvoiceDeliveryPrefsPrint:
            description: "Indicates if the customer wants to receive printed invoices,\
              \ such as through postal mail.\n\n**Character limit**: 5\n\n\n**Values**:\
              \ `true`, `false` (default if left null) "
            type: boolean
          InvoiceTemplateId:
            description: |+
              The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation.

              **Character limit**: 32


              **Values**: a[ valid template ID configured in Z-Billing Settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Manage_Invoice_Rules_and_Templates) To find the ID of your current invoice template: In Zuora, navigate to **Settings > Z-Billing > Manage Invoice Rules and Templates** and click **Show Id **next to the template you want to use.


            type: string
          LastInvoiceDate:
            description: " The date when the previous invoice was generated for the\
              \ account. The field value is null if no invoice has ever been generated\
              \ for the account.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically\
              \ generated "
            format: date
            type: string
          Name:
            description: "Name of the account as displayed in the Zuora UI.\n\n**Character\
              \ limit**: 255\n\n\n**Values**: a string of 255 characters or fewer "
            type: string
          Notes:
            description: " Comments about the account.\n\n**Character limit**: 65,535\n\
              \n\n**Values**: a string of 65,535 characters "
            type: string
          ParentId:
            description: "Identifier of the parent customer account for this Account\
              \ object. Use this field if you have customer hierarchy enabled.\n\n\
              **Character limit**: 32\n\n\n**Values**: a valid account ID "
            type: string
          PaymentGateway:
            description: |
              Gateway used for processing electronic payments and refunds.

              **Character limit**: 40


              **Values**: one of the following:

              - a valid configured gateway name
              - Null to inherit the default value set in Z-Payment Settings
            type: string
          PaymentTerm:
            description: "Indicates when the customer pays for subscriptions.\n\n\
              **Character limit**: 100\n\n\n**Values**: [a valid, active payment term\
              \ defined in the web-based UI administrative settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Payment_Terms) "
            type: string
          PurchaseOrderNumber:
            description: "The number of the purchase order associated with this account.\
              \ Purchase order information generally comes from customers.\n\n**Character\
              \ limit**: 100\n\n\n**Values**: a string of 100 characters or fewer "
            type: string
          SalesRepName:
            description: "The name of the sales representative associated with this\
              \ account, if applicable.\n\n**Character limit**: 50\n\n\n**Values**:\
              \ a string of 50 characters or fewer "
            type: string
          SoldToId:
            description: "ID of the person who bought the subscription associated\
              \ with the account.\n\n**Character limit**: 32\n\n\n**Values**: a valid\
              \ contact ID for the account "
            type: string
          Status:
            description: |
              Status of the account in the system.

              **Character limit**: 8


              **Values**: one of the following:

              - leave null if you're using `subscribe
              `
              - if you're using `create
              `:
              - `Draft`
              - `Active`
              - `Canceled`
            type: string
          TaxCompanyCode:
            description: " Unique code that identifies a company account in Avalara.\
              \ Use this field to calculate taxes based on origin and sold-to addresses\
              \ in Avalara.\nThis feature is in **Limited Availability**. If you wish\
              \ to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).\n\
              \n\n\n**Character limit**: 50\n\n\n**Values**: a valid company code "
            type: string
          TaxExemptCertificateID:
            description: "ID of your customer's tax exemption certificate.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: a string of 32 characters or fewer "
            type: string
          TaxExemptCertificateType:
            description: "Type of the tax exemption certificate that your customer\
              \ holds.\n**Character limit**: 32\n\n\n**Values**: a string of 32 characters\
              \ or fewer "
            type: string
          TaxExemptDescription:
            description: "Description of the tax exemption certificate that your customer\
              \ holds.\n\n**Character limit**: 500\n\n\n**Values**: a string of 500\
              \ characters or fewer "
            type: string
          TaxExemptEffectiveDate:
            description: "Date when the the customer's tax exemption starts.\n\n**Character\
              \ limit**: 29 **Version notes**: requires Z-Tax "
            format: date
            type: string
          TaxExemptExpirationDate:
            description: "Date when the customer's tax exemption certificate expires\n\
              **Character limit**: 29 **Version notes**: requires Z-Tax "
            format: date
            type: string
          TaxExemptIssuingJurisdiction:
            description: "Indicates the jurisdiction in which the customer's tax exemption\
              \ certificate was issued.\n\n**Character limit**: 32\n\n\n**Values**:\
              \ a string of 32 characters or fewer "
            type: string
          TaxExemptStatus:
            description: |2
               Status of the account's tax exemption. Required if you use Z-Tax. This field is unavailable if you don't use Z-Tax.


              **Character limit**: 19


              **Values**: one of the following:

              - `Yes`
              - `No`
              - `PendingVerification`
            type: string
          TotalInvoiceBalance:
            description: "Total balance of the account's invoices.\n\n**Character\
              \ limit**: 16\n\n\n**Values**: a valid currency value "
            format: double
            type: number
          UpdatedById:
            description: "ID of the user who last updated the account.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: "Date when the account was last updated.\n\n**Character limit**:\
              \ 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          VATId:
            description: " EU Value Added Tax ID.\nThis feature is in **Limited Availability**.\
              \ If you wish to have access to the feature, submit a request at [Zuora\
              \ Global Support](http://support.zuora.com/).\n\n\n\n**Character limit**:\
              \ 25\n\n\n**Values**: a valid Value Added Tax ID "
            type: string
        type: object
      BillToContact:
        description: |2-
           This is the object that contains the contact associated with this account in the Account's `BillToId` field.
          This field is required only if the account does not exist.
          Values: A valid contact for the account.
        properties:
          AccountId:
            description: " The Zuora account ID associated with this contact. This\
              \ field is not required when you use the subscribe\ncall. This field\
              \ is required for all other calls.\n**Character limit: **32 **Values:\
              \ **a valid account ID "
            type: string
          Address1:
            description: " The first line of the contact's address, which is often\
              \ a street address or business name.\n\n\n**Character limit**: 255\n\
              \n\n**Values**: a string of 255 characters or fewer "
            type: string
          Address2:
            description: " The second line of the contact's address.\n\n\n**Character\
              \ limit**: 255\n\n\n**Values**: a string of 255 characters or fewer "
            type: string
          City:
            description: " The city of the contact's address.\n\n\n**Character limit**:\
              \ 40 **Values: **a string of 40 characters or fewer "
            type: string
          Country:
            description: ' The country of the contact''s address. '
            type: string
          County:
            description: " The country. May optionally be used by [Z-Tax](/C_Zuora_User_Guides/A_Billing_and_Payments/I_Taxes/Z-Tax)\
              \ to calculate county tax.\n\n\n**Character limit**: 32\n\n\n**Values**:\
              \ a string of 32 characters or fewer "
            type: string
          CreatedById:
            description: "The ID of the Zuora user who created the contact.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          CreatedDate:
            description: "The date when the contact was created.\n\n**Character limit**:\
              \ 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          Description:
            description: " A description for the contact.\n\n\n**Character limit**:\
              \ 100\n\n\n**Values**: a string of 100 characters or fewer "
            type: string
          Fax:
            description: " The contact's fax number.\n\n\n**Character limit**: 40\n\
              \n\n**Values**: a string of 40 characters or fewer "
            type: string
          FirstName:
            description: " The contact's first name.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of the contact's first name "
            type: string
          HomePhone:
            description: " The contact's home phone number.\n\n\n**Character limit**:\
              \ 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          LastName:
            description: " The contact's last name.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of 100 characters or fewer "
            type: string
          MobilePhone:
            description: " The contact's mobile phone number.\n\n\n**Character limit**:\
              \ 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          NickName:
            description: " A nickname for the contact.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of 100 characters or fewer "
            type: string
          OtherPhone:
            description: " An additional phone number for the contact.\n\n\n**Character\
              \ limit**: 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          OtherPhoneType:
            description: "The type of the `OtherPhone`.\n\n**Character limit**: 20\n\
              \n\n**Values**: `Work`, `Mobile`, `Home`, `Other` "
            type: string
          PersonalEmail:
            description: " The contact's personal email address.\n\n\n**Character\
              \ limit**: 80\n\n\n**Values**: a string of 80 characters or fewer "
            type: string
          PostalCode:
            description: " The zip code for the contact's address.\n**Character limit:**\
              \ 20 **Values: **a string of 20 characters or fewer "
            type: string
          State:
            description: ' The state or province of the contact''s address. '
            type: string
          TaxRegion:
            description: 'If using [Z-Tax](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/L_Taxes/A_Z-Tax)
              tax rules '
            type: string
          UpdatedById:
            description: " The ID of the user who lasted updated the contact.\n\n\n\
              **Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: " The date when the contact was last updated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          WorkEmail:
            description: " The contact's business email address.\n\n\n**Character\
              \ limit**: 80\n\n\n**Values**: a string of 80 characters or fewer "
            type: string
          WorkPhone:
            description: " The contact's business phone number.\n\n\n**Character limit**:\
              \ 40 **notes**: --\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
        type: object
      PaymentMethod:
        description: |2-
           This is the object defining the payment details for the Account. The Account will be updated with this payment as the default payment method.
          Use this field if you are associating an electronic payment method with the account. A payment gateway must be enabled.
          Values: A valid electronic PaymentMethod.
        properties:
          AccountId:
            description: ' The ID of the customer account associated with this payment
              method. '
            type: string
          AchAbaCode:
            description: " The nine-digit routing number or ABA number used by banks.\
              \ Use this field for ACH payment methods.\n\n\n**Character limit**:\
              \ 9\n\n\n**Values**: a string of 9 characters or fewer "
            type: string
          AchAccountName:
            description: " The name of the account holder, which can be either a person\
              \ or a company. Use this field for ACH payment methods.\n\n\n**Character\
              \ limit**: 70\n\n\n**Values**: a string of 70 characters or fewer "
            type: string
          AchAccountNumber:
            description: " The bank account number associated with the ACH payment.\
              \ Use this field for ACH payment methods.\n\n\n**Character limit**:\
              \ 30\n\n\n**Values**: a string of 30 numeric characters or fewer "
            type: string
          AchAccountNumberMask:
            description: " This is a masked displayable version of the ACH account\
              \ number, used for security purposes. For example: `XXXXXXXXX54321`.\
              \ Use this field for ACH payment methods.\n\n\n**Character limit**:\
              \ 32\n\n\n**Values**: automatically generated "
            type: string
          AchAccountType:
            description: |2
               The type of bank account associated with the ACH payment. Use this field for ACH payment methods.


              **Character limit**: 16


              **Values**:

              - `BusinessChecking`
              - `Checking`
              - `Saving`
            type: string
          AchAddress1:
            description: " Line 1 for the ACH address. Required on create for the\
              \ Vantiv payment gateway. Optional for other gateways.\n**Character\
              \ limit:** **Values:** an address "
            type: string
          AchAddress2:
            description: " Line 2 for the ACH address. Required on create for the\
              \ Vantiv payment gateway. Optional for other gateways.\n**Character\
              \ limit:** **Values:** an address "
            type: string
          AchBankName:
            description: " The name of the bank where the ACH payment account is held.\
              \ Use this field for ACH payment methods.\n\n\n**Character limit**:\
              \ 70\n\n\n**Values**: a string of 70 characters or fewer "
            type: string
          Active:
            description: " Specifies whether a payment method is available in Zuora.\
              \ The default value is `false`.\n\n\n**Character limit**: 5\n\n\n**Values**:\
              \ `true`, `false` "
            type: boolean
          BankBranchCode:
            description: " The branch code of the bank used for direct debit. Use\
              \ this field for direct debit payment methods.\n\n\n**Character limit**:\
              \ 10\n\n\n**Values**:  string of 10 characters or fewer "
            type: string
          BankCheckDigit:
            description: "The check digit in the international bank account number,\
              \ which confirms the validity of the account. Use this field for direct\
              \ debit payment methods.\n\n**Character limit**: 4\n\n\n**Values**:\
              \  string of 4 characters or fewer "
            type: string
          BankCity:
            description: " The city of the direct debit bank. Use this field for direct\
              \ debit payment methods.\n\n\n**Character limit**:70\n\n\n**Values**:\
              \  string of 70 characters or fewer "
            type: string
          BankCode:
            description: " The sort code or number that identifies the bank. This\
              \ is also known as the sort code. This field is required for direct\
              \ debit payment methods.\n\n\n**Character limit**: 18\n\n\n**Values**:\
              \  string of 18 characters or fewer "
            type: string
          BankIdentificationNumber:
            description: " The first six digits of the payment method's number, such\
              \ as the credit card number or account number. Banks use this number\
              \ to identify a payment method.\n\n\n**Character limit**: 6\n\n\n**Values**:\
              \  string of 6 characters or fewer "
            type: string
          BankName:
            description: " The name of the direct debit bank. Use this field for direct\
              \ debit payment methods.\n\n\n**Character limit**:80\n\n\n**Values**:\
              \  string of 80 characters or fewer "
            type: string
          BankPostalCode:
            description: " The zip code or postal code of the direct debit bank. Use\
              \ this field for direct debit payment methods.\n\n\n**Character limit**:20\n\
              \n\n**Values**:  string of 20 characters or fewer "
            type: string
          BankStreetName:
            description: " The name of the street of the direct debit bank. Use this\
              \ field for direct debit payment methods.\n\n\n**Character limit**:60\n\
              \n\n**Values**:  string of 60 characters or fewer "
            type: string
          BankStreetNumber:
            description: " The number of the direct debit bank. Use this field for\
              \ direct debit payment methods.\n\n\n**Character limit**:10\n\n\n**Values**:\
              \  string of 10 characters or fewer "
            type: string
          BankTransferAccountName:
            description: " The name on the direct debit bank account. Use this field\
              \ for direct debit payment methods.\n\n\n**Character limit**: 60\n\n\
              \n**Values**:  string of 60 characters or fewer "
            type: string
          BankTransferAccountNumber:
            description: " The number of the customer's bank account. Use this field\
              \ for direct debit payment methods.\n\n\n**Character limit**:30\n\n\n\
              **Values**:  string of 30 characters or fewer "
            type: string
          BankTransferAccountNumberMask:
            description: " This is a masked displayable version of the ACH account\
              \ number, used for security purposes. For example: `XXXXXXXXX54321`.\n\
              \n\n**Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          BankTransferAccountType:
            description: " The type of the customer's bank account. Use this field\
              \ for direct debit payment methods.\n\n\n**Character limit**: 11\n\n\
              \n**Values**: `DirectDebit` "
            type: string
          BankTransferType:
            description: |2
               Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user. Use this field is used for direct debit payment methods.


              **Character limit**: 20


              **Values**:

              - `AutomatischIncasso` (NL)
              - `LastschriftDE` (Germany)
              - `LastschriftAT` (Austria)
              - `DemandeDePrelevement` (FR)
              - `DirectDebitUK` (UK)
              - `Domicil` (Belgium)
              - `LastschriftCH` (CH)
              - `RID` (Italy)
              - `OrdenDeDomiciliacion` (Spain)
            type: string
          BusinessIdentificationCode:
            description: " The business identification code for Swiss direct payment\
              \ methods that use the Global Collect payment gateway. Use this field\
              \ only for direct debit payments in Switzerland with Global Collect.\n\
              \n\n**Character limit**: 11\n\n\n**Values**: string of 11 characters\
              \ or fewer "
            type: string
          City:
            description: " The city of the customer's address. Use this field for\
              \ direct debit payment methods.\n\n\n**Character limit**:80\n\n\n**Values**:\
              \  string of 80 characters or fewer "
            type: string
          Country:
            description: " The two-letter country code of the customer's address.\
              \ Use this field for direct debit payment methods.\n\n\n**Character\
              \ limit**: 2\n\n\n**Values**: a valid country code "
            type: string
          CreatedById:
            description: " The user ID of the person who created the `PaymentMethod`\
              \ object when there is a login user in the user session. In Hosted Payment\
              \ Method and Z-Checkout pages, this field is set to 3 as there is no\
              \ login user to initiate a user session.\n\n\n**Character limit**: 32\n\
              \n\n**Values**: automatically generated "
            type: string
          CreatedDate:
            description: " The date when the `PaymentMethod` object was created in\
              \ the Zuora system.\n\n\n**Character limit**: 29\n\n\n**Values**: automatically\
              \ generated "
            format: date-time
            type: string
          CreditCardAddress1:
            description: " The first line of the card holder's address, which is often\
              \ a street address or business name. Use this field for credit card\
              \ and direct debit payment methods.\n\n\n**Character limit**: 255\n\n\
              \n**Values**: a string of 255 characters or fewer "
            type: string
          CreditCardAddress2:
            description: " The second line of the card holder's address. Use this\
              \ field for credit card and direct debit payment methods.\n\n\n**Character\
              \ limit**: 255\n\n\n**Values**: a string of 255 characters or fewer "
            type: string
          CreditCardCity:
            description: " The city of the card holder's address. Use this field for\
              \ credit card and direct debit payment methods\n\n**Character limit**:\
              \ 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          CreditCardCountry:
            description: ' The country of the card holder''s address.'
            type: string
          CreditCardExpirationMonth:
            description: " The expiration month of the credit card or debit card.\
              \ Use this field for credit card and direct debit payment methods.\n\
              \n\n**Character limit**: 2\n\n\n**Values**: a two-digit number, 01 -\
              \ 12 "
            format: int32
            type: integer
          CreditCardExpirationYear:
            description: " The expiration month of the credit card or debit card.\
              \ Use this field for credit card and direct debit payment methods.\n\
              \n\n**Character limit**: 4\n\n\n**Values**: a four-digit number "
            format: int32
            type: integer
          CreditCardHolderName:
            description: " The full name of the card holder. Use this field for credit\
              \ card and direct debit payment methods.\n\n\n**Character limit**: 50\n\
              \n\n**Values**: a string of 50 characters or fewer "
            type: string
          CreditCardMaskNumber:
            description: " A masked version of the credit or debit card number.\n\n\
              \n**Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          CreditCardNumber:
            description: " The credit card or debit card number. This is an insert-only\
              \ field; it cannot be updated nor queried for security purposes. This\
              \ field is required only when you define a debit card or credit card\
              \ payment.\n\n\n**Character limit**: 16\n\n\n**Values**: a string of\
              \ 16 characters or fewer "
            type: string
          CreditCardPostalCode:
            description: " The billing address's zip code. This field is required\
              \ only when you define a debit card or credit card payment.\n\n\n**Character\
              \ limit**: 20\n\n\n**Values**: a string of 20 characters or fewer "
            type: string
          CreditCardSecurityCode:
            description: " The CVV or CVV2 security code. See [How do I control what\
              \ information Zuora sends over to the Payment Gateway?](https://knowledgecenter.zuora.com/kb/How_do_I_control_information_sent_to_payment_gateways_when_verifying_payment_methods%3F)\
              \ for more information. To ensure PCI compliance, this value is not\
              \ stored and cannot be queried.\n\n\n**Character limit**:\n\n\n**Values**:\
              \ a valid CVV or CVV2 security code "
            type: string
          CreditCardState:
            description: ' The billing address''s state. Use this field is if the
              `CreditCardCountry` value is either Canada or the US. State names must
              be spelled in full. '
            type: string
          CreditCardType:
            description: " The type of credit card or debit card. This field is required\
              \ only when you define a debit card or credit card payment.\n\n\n**Character\
              \ limit**: 32\n\n\n**Values**: `AmericanExpress`, `Discover`, `MasterCard`,\
              \ `Visa` "
            type: string
          DeviceSessionId:
            description: " The session ID of the user when the `PaymentMethod` was\
              \ created or updated. Some gateways use this field for fraud prevention.\
              \ If this field is passed to Zuora, then Zuora passes this field to\
              \ supported gateways. Currently only Verifi supports this field.\n\n\
              \n**Character limit**: 255\n\n\n**Values**: "
            type: string
          Email:
            description: " An email address for the payment method in addition to\
              \ the bill to contact email address.\n\n\n**Character limit**: 80\n\n\
              \n**Values**: a string of 80 characters or fewer "
            type: string
          ExistingMandate:
            description: " Indicates if the customer has an existing mandate or a\
              \ new mandate. A mandate is a signed authorization for UK and NL customers.\
              \ When you are migrating mandates from another system, be sure to set\
              \ this field correctly. If you indicate that a new mandate is an existing\
              \ mandate or vice-versa, then transactions fail. This field is used\
              \ only for the direct debit payment method.\n\n\n**Character limit**:\
              \ 3\n\n\n**Values**: `Yes`, `No` "
            type: string
          FirstName:
            description: " The customer's first name. This field is used only for\
              \ the direct debit payment method.\n\n\n**Character limit**: 30\n\n\n\
              **Values**: a string of 30 characters or fewer "
            type: string
          GatewayOptionData:
            description: " Use this field to pass gateway options.\n\n\n**Character\
              \ limit**: 255\n\n\n**Values**: GatewayOption "
            properties:
              GatewayOption:
                description: ''
                items:
                  $ref: '#/definitions/GatewayOption'
                type: array
            type: object
          IBAN:
            description: " The International Bank Account Number. This field is used\
              \ only for the direct debit payment method.\n\n\n**Character limit**:\
              \ 42\n\n\n**Values**: a string of 42 characters or fewer "
            type: string
          IPAddress:
            description: " The IP address of the user when the payment method was\
              \ created or updated. Some gateways use this field for fraud prevention.\
              \ If this field is passed to Zuora, then Zuora passes this field to\
              \ supported gateways. Currently PayPal, CyberSource, Authorize.Net,\
              \ and Verifi support this field.\n\n\n**Character limit**: 15\n\n\n\
              **Values**: a string of 15 characters or fewer "
            type: string
          Id:
            description: " The ID of this object. Upon creation, the ID of this object\
              \ is `PaymentMethodId`.\n\n\n**Character limit**: 32\n\n\n**Values**:\
              \ automatically generated "
            type: string
          LastFailedSaleTransactionDate:
            description: " The date of the last failed attempt to collect payment\
              \ with this payment method.\n\n\n**Character limit**: 29\n\n\n**Values**:\
              \ automatically generated "
            format: date-time
            type: string
          LastName:
            description: " The customer's last name. This field is used only for the\
              \ direct debit payment method.\n\n\n**Character limit**: 70\n\n\n**Values**:\
              \ a string of 70 characters or fewer "
            type: string
          LastTransactionDateTime:
            description: " The date of the most recent transaction.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: a valid date and time value "
            format: date-time
            type: string
          LastTransactionStatus:
            description: " The status of the most recent transaction.\n\n\n**Character\
              \ limit**: 39\n\n\n**Values**: automatically generated "
            type: string
          MandateCreationDate:
            description: |2+
               The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.


              **Character limit**: 29


            format: date
            type: string
          MandateID:
            description: " The ID of the mandate. A mandate is a signed authorization\
              \ for UK and NL customers. This field is used only for the direct debit\
              \ payment method.\n\n\n**Character limit**: 36\n\n\n**Values**: a string\
              \ of 36 characters or fewer "
            type: string
          MandateReceived:
            description: " Indicates if  the mandate was received. A mandate is a\
              \ signed authorization for UK and NL customers. This field is used only\
              \ for the direct debit payment method.\n\n\n**Character limit**: 3\n\
              \n\n**Values**: `Yes`, `No `(case-sensitive) "
            type: string
          MandateUpdateDate:
            description: |2+
               The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. This field is used only for the direct debit payment method.


              **Character limit**: 29


            format: date
            type: string
          MaxConsecutivePaymentFailures:
            description: " Specifies the number of allowable consecutive failures\
              \ Zuora attempts with the payment method before stopping.\n\n\n\n**Values**:\
              \ a valid number "
            type: integer
          Name:
            description: ' Create Query Delete Filter '
            type: string
          NumConsecutiveFailures:
            description: " The number of consecutive failed payment for this payment\
              \ method. It is reset to 0 upon successful payment. You can use the\
              \ API to update the field value to 0.\n\n\n**Character limit**:\n\n\n\
              **Values**: a positive whole number "
            format: int32
            type: integer
          PaymentMethodStatus:
            description: " Specifies the status of the payment method. It is set to\
              \ Active on creation.\n\n\n**Character limit**: 6\n\n\n**Values**: `Active`\
              \ or `Closed` PaymentMethodStatus should not be used in the `create\n\
              ` call. You can only set this field to **Closed** via the `update\n\
              ` call. "
            type: string
          PaymentRetryWindow:
            description: " The retry interval setting, which prevents making a payment\
              \ attempt if the last failed attempt was within the last specified number\
              \ of hours. This field is required if the `UseDefaultRetryRule` field\
              \ value is set to `false`.\n\n\n**Character limit**: 4\n\n\n**Values**:\
              \ a whole number between 1 and 1000, exclusive "
            type: integer
          PaypalBaid:
            description: " The PayPal billing agreement ID, which is a contract between\
              \ two PayPal accounts. Typically, the selling party initiates a request\
              \ to create a BAID, and sends it to buying party for acceptance. The\
              \ seller can keep track of the BAID and use it for future charges against\
              \ the buyer. This field is required when defining a PayPal payment method.\n\
              \n\n**Character limit**: 64\n\n\n**Values**: a string of 64 characters\
              \ or fewer "
            type: string
          PaypalEmail:
            description: " The email address associated with the account holder's\
              \ PayPal account or of the PayPal account of the person paying for the\
              \ service. This field is required only when you define a PayPal payment\
              \ method.\n\n\n**Character limit**: 80\n\n\n**Values**: a string of\
              \ 80 characters or fewer "
            type: string
          PaypalPreapprovalKey:
            description: " PayPal's Adaptive Payments API key. Zuora does not create\
              \ this key, nor does it call PayPal to generate it. You must use PayPal's\
              \ Adaptive Payments' API to generate this key, and then pass it to Zuora.\
              \ Zuora uses this key to authorize future payments to PayPal's Adaptive\
              \ Payments API. This field is required when you use PayPal Adaptive\
              \ Payments gateway.\n\n\n**Character limit**: 32\n\n\n**Values**: a\
              \ valid PayPal Adaptive Payment pre-approval key "
            type: string
          PaypalType:
            description: " Specifies the PayPal gateway: PayFlow Pro (Express Checkout)\
              \ or Adaptive Payments. This field is required when you use PayPal Adaptive\
              \ Payments or Payflow Pro (Express Checkout) gateways.\n\n\n**Character\
              \ limit**: 32\n\n\n**Values**: `ExpressCheckout`, `AdaptivePayments` "
            type: string
          Phone:
            description: " The phone number that the account holder registered with\
              \ the bank. This field is used for credit card validation when passing\
              \ to a gateway.\n\n\n**Character limit**: 40\n\n\n**Values**: a string\
              \ of 40 characters or fewer "
            type: string
          PostalCode:
            description: " The zip code of the customer's address. This field is used\
              \ only for the direct debit payment method.\n\n\n**Character limit**:\
              \ 20\n\n\n**Values**: a string of 20 characters or fewer "
            type: string
          SecondTokenId:
            description: " A gateway unique identifier that replaces sensitive payment\
              \ method data. SecondTokenId is conditionally required only when TokenID\
              \ is being used to represent a gateway customer profile. SecondTokenId\
              \ is used in the CC Reference Transaction payment method.\n\n**Character\
              \ limit**: 64\n\n\n**Values**: a string of 64 characters or fewer "
            type: string
          SkipValidation:
            description: " Creates the payment method even if authorization fails\
              \ with the payment gateway.\n\n\n**Character limit**: 5\n\n\n**Values**:\
              \ `t``rue`, `false` "
            type: boolean
          State:
            description: " The state of the customer's address. This field is used\
              \ only for the direct debit payment method.\n\n\n**Character limit**:\
              \ 70\n\n\n**Values**: a string of 70 characters or fewer "
            type: string
          StreetName:
            description: " The street name of the customer's address. This field is\
              \ used only for the direct debit payment method.\n\n\n**Character limit**:\
              \ 100\n\n\n**Values**: a string of 100 characters or fewer "
            type: string
          StreetNumber:
            description: " The street number of the customer's address. This field\
              \ is used only for the direct debit payment method.\n\n\n**Character\
              \ limit**: 30\n\n\n**Values**: a string of 30 characters or fewer "
            type: string
          TokenId:
            description: " A gateway unique identifier that replaces sensitive payment\
              \ method data or represents a gateway's unique customer profile. When\
              \ TokenId is used to represent a customer profile, then SecondTokenId\
              \ is conditionally required for representing the underlying tokenized\
              \ payment method. TokenId is required for the CC Reference Transaction\
              \ payment method.\n\n\n**Character limit**: 255\n\n\n**Values**: a string\
              \ of 255 characters or fewer "
            type: string
          TotalNumberOfErrorPayments:
            description: " The number of error payments that used this payment method.\n\
              \n\n**Character limit**:\n\n\n**Values**: automatically generated "
            format: int32
            type: integer
          TotalNumberOfProcessedPayments:
            description: " The number of successful payments that used this payment\
              \ method.\n\n\n**Character limit**:\n\n\n**Values**: automatically generated "
            format: int32
            type: integer
          Type:
            description: ' Create Query Update Delete Filter '
            type: string
          UpdatedById:
            description: " The ID of the user who last updated the payment method.\n\
              \n\n**Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: " The date when the payment method was last updated.\n\n\n\
              **Character limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          UseDefaultRetryRule:
            description: " Determines whether to use the default retry rules configured\
              \ in the [Z-Payments settings](https://knowledgecenter.zuora.com/CB_Billing/L_Payment_Methods/H_Configure_Payment_Method_Retry_Rules).\
              \ Set this to `true` to use the default retry rules. Set this to `false`\
              \ to set the specific rules for this payment method. If you set this\
              \ value to `false`, then the fields, `PaymentRetryWindow` and `MaxConsecutivePaymentFailures`,\
              \ are required.\n\n\n**Character limit**: 5\n\n\n**Values**: `t``rue`,\
              \ `false` "
            type: boolean
        type: object
      PreviewOptions:
        description: " Specify true to call subscribe() with preview mode. After that\
          \ is completed, the call system will roll back the subscription and return\
          \ only the temporary invoice data. Specify false to call subscribe() without\
          \ preview mode.\n\n**Values:** `true`, `false` "
        properties:
          EnablePreviewMode:
            description: ' Determines whether to create an amendment or display a
              preview of the change.'
            type: boolean
          IncludeExistingDraftInvoiceItems:
            description: ' Specifies whether to include draft invoice items in amendment
              previews.'
            type: boolean
          NumberOfPeriods:
            description: ' Indicates the number of invoice periods to show in a preview.'
            format: int32
            type: integer
          PreviewThroughTermEnd:
            description: ' Request to preview the charge through the end of the subscription
              term.'
            type: boolean
          PreviewType:
            description: ' The type of preview you will receive from a preview request.'
            type: string
        type: object
      SoldToContact:
        description: " Unless otherwise specified, this field defaults to the information\
          \ in the `BillToContact` field.\n\n**Values:** A valid contact. "
        properties:
          AccountId:
            description: " The Zuora account ID associated with this contact. This\
              \ field is not required when you use the subscribe\ncall. This field\
              \ is required for all other calls.\n**Character limit: **32 **Values:\
              \ **a valid account ID "
            type: string
          Address1:
            description: " The first line of the contact's address, which is often\
              \ a street address or business name.\n\n\n**Character limit**: 255\n\
              \n\n**Values**: a string of 255 characters or fewer "
            type: string
          Address2:
            description: " The second line of the contact's address.\n\n\n**Character\
              \ limit**: 255\n\n\n**Values**: a string of 255 characters or fewer "
            type: string
          City:
            description: " The city of the contact's address.\n\n\n**Character limit**:\
              \ 40 **Values: **a string of 40 characters or fewer "
            type: string
          Country:
            description: ' The country of the contact''s address. '
            type: string
          County:
            description: " The country. May optionally be used by [Z-Tax](/C_Zuora_User_Guides/A_Billing_and_Payments/I_Taxes/Z-Tax)\
              \ to calculate county tax.\n\n\n**Character limit**: 32\n\n\n**Values**:\
              \ a string of 32 characters or fewer "
            type: string
          CreatedById:
            description: "The ID of the Zuora user who created the contact.\n\n**Character\
              \ limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          CreatedDate:
            description: "The date when the contact was created.\n\n**Character limit**:\
              \ 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          Description:
            description: " A description for the contact.\n\n\n**Character limit**:\
              \ 100\n\n\n**Values**: a string of 100 characters or fewer "
            type: string
          Fax:
            description: " The contact's fax number.\n\n\n**Character limit**: 40\n\
              \n\n**Values**: a string of 40 characters or fewer "
            type: string
          FirstName:
            description: " The contact's first name.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of the contact's first name "
            type: string
          HomePhone:
            description: " The contact's home phone number.\n\n\n**Character limit**:\
              \ 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          LastName:
            description: " The contact's last name.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of 100 characters or fewer "
            type: string
          MobilePhone:
            description: " The contact's mobile phone number.\n\n\n**Character limit**:\
              \ 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          NickName:
            description: " A nickname for the contact.\n\n\n**Character limit**: 100\n\
              \n\n**Values**: a string of 100 characters or fewer "
            type: string
          OtherPhone:
            description: " An additional phone number for the contact.\n\n\n**Character\
              \ limit**: 40\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
          OtherPhoneType:
            description: "The type of the `OtherPhone`.\n\n**Character limit**: 20\n\
              \n\n**Values**: `Work`, `Mobile`, `Home`, `Other` "
            type: string
          PersonalEmail:
            description: " The contact's personal email address.\n\n\n**Character\
              \ limit**: 80\n\n\n**Values**: a string of 80 characters or fewer "
            type: string
          PostalCode:
            description: " The zip code for the contact's address.\n**Character limit:**\
              \ 20 **Values: **a string of 20 characters or fewer "
            type: string
          State:
            description: ' The state or province of the contact''s address. '
            type: string
          TaxRegion:
            description: 'If using [Z-Tax](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/L_Taxes/A_Z-Tax)
              tax rules '
            type: string
          UpdatedById:
            description: " The ID of the user who lasted updated the contact.\n\n\n\
              **Character limit**: 32\n\n\n**Values**: automatically generated "
            type: string
          UpdatedDate:
            description: " The date when the contact was last updated.\n\n\n**Character\
              \ limit**: 29\n\n\n**Values**: automatically generated "
            format: date-time
            type: string
          WorkEmail:
            description: " The contact's business email address.\n\n\n**Character\
              \ limit**: 80\n\n\n**Values**: a string of 80 characters or fewer "
            type: string
          WorkPhone:
            description: " The contact's business phone number.\n\n\n**Character limit**:\
              \ 40 **notes**: --\n\n\n**Values**: a string of 40 characters or fewer "
            type: string
        type: object
      SubscribeOptions:
        description: " This optional object specifies parameters related to invoicing\
          \ - whether to immediately generate an invoice and collect payment, and\
          \ whether the invoice should cover all subscriptions or just this new subscription.\n\
          The default behavior is to invoice immediately for all the account's subscriptions,\
          \ with the current date as the target date, and immediately collect payment\
          \ if the account's `AutoPay` flag is true.\n\n\n**Values:** A valid SubscribeOptions\
          \ object. "
        properties:
          ApplyCreditBalance:
            description: ''
            type: boolean
          ElectronicPaymentOptions:
            description: ''
            properties:
              PaymentMethodId:
                description: ''
                type: string
            type: object
          ExternalPaymentOptions:
            description: ''
            properties:
              Amount:
                description: ''
                format: double
                type: number
              EffectiveDate:
                description: ''
                format: date
                type: string
              GatewayOrderId:
                description: ''
                type: string
              PaymentMethodId:
                description: ''
                type: string
              ReferenceId:
                description: ''
                type: string
            type: object
          GenerateInvoice:
            description: ''
            type: boolean
          ProcessPayments:
            description: ''
            type: boolean
          SubscribeInvoiceProcessingOptions:
            description: ''
            properties:
              InvoiceDate:
                description: ''
                format: date
                type: string
              InvoiceProcessingScope:
                description: ''
                type: string
              InvoiceTargetDate:
                description: ''
                format: date
                type: string
            type: object
        type: object
      SubscriptionData:
        description: " This object contains the information on the contract's dates\
          \ and terms.\n\n\n**Values:** A valid SubscriptionData object. "
        properties:
          RatePlanData:
            description: ''
            items:
              $ref: '#/definitions/RatePlanData'
            type: array
          Subscription:
            description: ''
            properties:
              AccountId:
                description: ' This field can be updated when `Status` is `Draft`. '
                type: string
              AncestorAccountId:
                description: " A filter option for querying all subscriptions under\
                  \ the same account hierarchy.\n\n\n**Character limit**: 32\n\n\n\
                  **Values**: a valid account ID "
                type: string
              AutoRenew:
                description: " This field can be updated when `Status` is `Draft`.\
                  \ Indicates if the subscription automatically renews at the end\
                  \ of the term.\n\n\n\n**Values**: `true`, `false` "
                type: boolean
              CancelledDate:
                description: " The date of the amendment that canceled the subscription.\n\
                  \n\n\n**Values**: inherited from `Amendment`.`EffectiveDate` "
                format: date
                type: string
              ContractAcceptanceDate:
                description: |2
                   The date when the customer accepts the contract. This field can be updated when **Status** is `Draft`.


                  **Note**: The service activation date is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:

                  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.
                  - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.
                format: date
                type: string
              ContractEffectiveDate:
                description: " The date when the contract takes effect. This field\
                  \ can be updated when **Status** is `Draft`.\n\n\n**Note**: This\
                  \ field is required in the subscribe call. If you set the value\
                  \ of this field to null and both the ServiceActivationDate and ContractAcceptanceDate\
                  \ fields are not required, the subscribe call still returns success,\
                  \ but the new subscription is in `DRAFT` status. To activate the\
                  \ subscription, you must set a valid date to this field. "
                format: date
                type: string
              CreatedById:
                description: "The user ID of the person who created the subscription.\n\
                  \n**Character limit**: 32\n\n\n**Values**: automatically generated "
                type: string
              CreatedDate:
                description: " The date the subscription was created. This value is\
                  \ the same as the OriginalCreatedDate value until the subscription\
                  \ is amended.\n\n\n\n**Values**: automatically generated "
                format: date-time
                type: string
              CreatorAccountId:
                description: " The account ID that created the subscription or the\
                  \ amended subscription.\n\n\n**Character limit**: 32\n\n\n**Values**:\
                  \ automatically generated "
                type: string
              CreatorInvoiceOwnerId:
                description: "The account ID that owns the invoices associated with\
                  \ the subscription or the amended subscription.\n\n\n**Character\
                  \ limit**: 32\n\n\n**Values**: automatically generated "
                type: string
              CurrentTerm:
                description: " The length of the period for the current subscription\
                  \ term. If TermType is set to `TERMED`, this field is required and\
                  \ must be greater than `0`. If TermType is set to `EVERGREEN`, this\
                  \ value is ignored. Default is `0`.\n\n\n**Character limit**: 20\n\
                  \n\n**Values**: automatically generated "
                format: int32
                type: integer
              CurrentTermPeriodType:
                description: |2
                   The period type for the current subscription term. This field is used with the CurrentTerm field to specify the current subscription term.



                  **Values**:

                  - `Month` (default)
                  - `Year`
                  - `Day`
                  - `Week`
                type: string
              InitialTerm:
                description: " The length of the period for the first subscription\
                  \ term. This field can be updated when Status is `Draft`. If you\
                  \ use the subscribe\ncall, this field is required.\n\n\n**Required**:\
                  \ If TermType is Termed\n\n**Character limit**: 20\n\n\n**Values**:\
                  \ any valid number. The default value is 0. "
                format: int32
                type: integer
              InitialTermPeriodType:
                description: |2
                   The period type for the first subscription term.



                  **Values**:

                  - `Month` (default)
                  - `Year`
                  - `Day`
                  - `Week`


                  **Note**:

                  - This field can be updated when `Status` is `Draft`.
                  - This field is used with the `InitialTerm` field to specify the initial subscription term.
                type: string
              InvoiceOwnerId:
                description: ' This field can be updated when `Status` is `Draft`. '
                type: string
              IsInvoiceSeparate:
                description: " Determines if the subscription is invoiced separately.\
                  \ If `TRUE`, then all charges for this subscription are collected\
                  \ into the subscription's own invoice.\n\n\n\n**Values**: `TRUE`,\
                  \ `FALSE `(default) "
                type: boolean
              Name:
                description: |2
                   The unique identifier of the subscription. If you don't specify a value, then Zuora generates a name automatically. Whether auto-generated or manually specified, the subscription name must be unique. Otherwise an error will occur. You can change this value only when the subscription is in `Draft` status. Once the subscription is activated, you can't change this value, nor can you use this value for a different subscription.


                  **Character limit**: 100


                  **Values**: one of the following:

                  - leave null to automatically generate
                  - a string of 100 characters or fewer
                type: string
              Notes:
                description: " Use this field to record comments about the subscription.\n\
                  \n\n**Character limit**: 500\n\n\n**Values**: a string of 500 characters\
                  \ or fewer "
                type: string
              OpportunityCloseDate__QT:
                description: " The closing date of the Opportunity. This field is\
                  \ used in Zuora Reporting Data Sources to report on Subscription\
                  \ metrics. If the subscription was originated from Zuora Quotes,\
                  \ the value is populated with the value from Zuora Quotes.\n\n\n\
                  **Character limit**:\n\n\n**Values**: populated by Zuora Quotes "
                format: date
                type: string
              OpportunityName__QT:
                description: " The unique identifier of the Opportunity. This field\
                  \ is used in the Zuora Reporting Data Sources to report on Subscription\
                  \ metrics. If the subscription was originated from Zuora Quotes,\
                  \ the value is populated with the value from Zuora Quotes.\n\n\n\
                  **Character limit**: 100\n\n\n**Values**: populated by Zuora Quotes "
                type: string
              OriginalCreatedDate:
                description: " The date when the subscription was originally created.\
                  \ This value is the same as the CreatedDate value until the subscription\
                  \ is amended.\n\n\n\n**Values**: automatically generated "
                format: date-time
                type: string
              OriginalId:
                description: " The original ID of this subscription.\n\n\n\n**Values**:\
                  \ automatically generated "
                type: string
              PreviousSubscriptionId:
                description: " The subscription ID immediately prior to the current\
                  \ subscription.\n\n\n**Character limit**: 32\n\n\n**Values**: automatically\
                  \ generated "
                type: string
              QuoteBusinessType__QT:
                description: " The specific identifier for the type of business transaction\
                  \ the Quote represents such as New, Upsell, Downsell, Renewal or\
                  \ Churn. This field is used in the Zuora Reporting Data Sources\
                  \ to report on Subscription metrics. If the subscription was originated\
                  \ from Zuora Quotes, the value is populated with the value from\
                  \ Zuora Quotes.\n\n\n**Character limit**: 32\n\n\n**Values**: populated\
                  \ by Zuora Quotes "
                type: string
              QuoteNumber__QT:
                description: " The unique identifier of the Quote. This field is used\
                  \ in the Zuora Reporting Data Sources to report on Subscription\
                  \ metrics. If the subscription was originated from Zuora Quotes,\
                  \ the value is populated with the value from Zuora Quotes.\n\n\n\
                  **Character limit**: 32\n\n\n**Values**: populated by Zuora Quotes "
                type: string
              QuoteType__QT:
                description: " The Quote type that represents the subscription lifecycle\
                  \ stage such as New, Amendment, Renew or Cancel. This field is used\
                  \ in the Zuora Reporting Data Sources to report on Subscription\
                  \ metrics. If the subscription was originated from Zuora Quotes,\
                  \ the value is populated with the value from Zuora Quotes.\n\n\n\
                  **Character limit**: 32\n\n\n**Values**: populated by Zuora Quotes "
                type: string
              RenewalSetting:
                description: " This field can be updated when **Status** is `Draft`.\
                  \ Specifies whether a termed subscription will remain termed or\
                  \ change to evergreen when it is renewed.\n\n\n**Required**: If\
                  \ TermType is Termed\n\n\n**Values**: `RENEW_WITH_SPECIFIC_TERM\
                  \ `(default), `RENEW_TO_EVERGREEN` "
                type: string
              RenewalTerm:
                description: |2
                   The length of the period for the subscription renewal term. This field can be updated when **Status** is `Draft`. If you use the subscribe
                  call, this field is required.


                  **Required**: If TermType is Termed.


                  **Character limit**: 20


                  **Values**: one of the following:

                  - leave null to default to `0`
                  - any number
                format: int32
                type: integer
              RenewalTermPeriodType:
                description: |2
                   The period type for the subscription renewal term.



                  **Values**:

                  - `Month` (default)
                  - `Year`
                  - `Day`
                  - `Week`


                  **Note**:

                  - This field is used with the RenewalTerm field to specify the subscription renewal term.
                  - This field can be updated when Status is `Draft`.
                type: string
              ServiceActivationDate:
                description: |2
                   The date when the subscription is activated. This field can be updated when **Status** is `Draft`.


                  **Character limit**: 29

                  **Note**: The service activation date is only required if the [Require Service Activation of Orders?](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) Setting is set to `Yes`. If this setting is set to `Yes`:

                  - If ContractAcceptanceDate field is required, you must set this field, ContractAcceptanceDate, and ContractEffectiveDate fields in the subscribe call to activate a subscription.
                  - If ContractAcceptanceDate field is not required, you must set both this field and the ContractEffectiveDate field in the subscribe call to activate a subscription. If you only set a valid date in the ContractEffectiveDate field, the subscribe call still returns success, but the subscription is in `DRAT` status.
                format: date
                type: string
              Status:
                description: |2
                   The status of the subscription.


                  **Character limit**: 17


                  **Values**: automatically generated

                  **Possible values**: one of the following:

                  - `Draft`
                  - `PendingActivation`
                  - `PendingAcceptance`
                  - `Active`
                  - `Cancelled`
                  - `Expired`
                  - `Suspended` (This value is in **Limited Availability**.)
                type: string
              SubscriptionEndDate:
                description: " The date when the subscription term ends, where the\
                  \ subscription ends at midnight the day before. For example, if\
                  \ the SubscriptionEndDate is 12/31/2016, the subscriptions ends\
                  \ at midnight (00:00:00 hours) on 12/30/2016. This date is the same\
                  \ as the term end date or the cancelation date, as appropriate.\n\
                  \n\n**Character limit**: 29\n\n\n**Values**: automatically generated "
                format: date
                type: string
              SubscriptionStartDate:
                description: " The date when the subscription term starts. This date\
                  \ is the same as the start date of the original term, which isn't\
                  \ necessarily the start date of the current or new term.\n\n\n**Character\
                  \ limit**: 29\n\n\n**Values**: automatically generated "
                format: date
                type: string
              TermEndDate:
                description: " This field can be updated when **Status** is `Draft`.\
                  \ The date when the subscription term ends. If the subscription\
                  \ is evergreen, the TermEndDate value is null or is the cancelation\
                  \ date, as appropriate.\n\n**Character limit**: 29\n\n\n**Values**:\
                  \ automatically generated "
                format: date
                type: string
              TermStartDate:
                description: " This field can be updated when **Status** is `Draft`.\
                  \ The date when the subscription term begins. If this is a renewal\
                  \ subscription, then this date is different from the subscription\
                  \ start date.\n\n\n**Character limit**: 29 "
                format: date
                type: string
              TermType:
                description: " This field can be updated when **Status** is `Draft`.\
                  \ Indicates if a subscription is [termed or evergreen](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions#Termed_and_Evergreen_Subscriptions).\
                  \ A termed subscription has a specific end date and requires manual\
                  \ renewal. An evergreen subscription doesn't have an end date and\
                  \ doesn't need renewal. This field can be updated when the subscription\
                  \ status is Draft.\n\n\n**Character limit**: 9\n\n\n**Values**:\
                  \ `TERMED`, `EVERGREEN` "
                type: string
              UpdatedById:
                description: " The ID of the user who last updated the subscription.\n\
                  **Character limit:** 32 **Values: **automatically generated "
                type: string
              UpdatedDate:
                description: " The date when the subscription was last updated.\n\
                  **Character limit:** 29\n\n\n**Values**: automatically generated "
                format: date-time
                type: string
              Version:
                description: " The version number of the subscription.\n\n\n\n**Values**:\
                  \ automatically generated "
                format: int32
                type: integer
            type: object
        type: object
    type: object
  SubscribeResult:
    properties:
      AccountId:
        description: ''
        type: string
      AccountNumber:
        description: ''
        type: string
      ChargeMetricsData:
        description: ''
        properties:
          ChargeMetrics:
            description: ''
            items:
              $ref: '#/definitions/NewChargeMetrics'
            type: array
        type: object
      Errors:
        description: ''
        items:
          $ref: '#/definitions/Error'
        type: array
      GatewayResponse:
        description: ''
        type: string
      GatewayResponseCode:
        description: ''
        type: string
      InvoiceData:
        description: ''
        items:
          $ref: '#/definitions/InvoiceData'
        type: array
      InvoiceId:
        description: ''
        type: string
      InvoiceNumber:
        description: ''
        type: string
      InvoiceResult:
        description: ''
        properties:
          Invoice:
            description: ''
            items:
              $ref: '#/definitions/Invoice'
            type: array
        type: object
      PaymentId:
        description: ''
        type: string
      PaymentTransactionNumber:
        description: ''
        type: string
      SubscriptionId:
        description: ''
        type: string
      SubscriptionNumber:
        description: ''
        type: string
      Success:
        description: ''
        type: boolean
      TotalMrr:
        description: ''
        format: double
        type: number
      TotalTcv:
        description: ''
        format: double
        type: number
    type: object
  SubscriptionProductFeature:
    properties:
      CreatedById:
        description: ''
        type: string
      CreatedDate:
        description: " Date and time when the product feature was added to the subscription.\n\
          \n\n**Character limit**: 29\n\n\n**Values**: "
        format: date-time
        type: string
      Description:
        description: " Description of the subscription product feature.\n\n\n**Character\
          \ limit**: 500\n\n\n**Values**: "
        type: string
      FeatureCode:
        description: " Unique code of the feature.\n\n\n**Character limit**: 255\n\
          \n\n**Values**: "
        type: string
      FeatureId:
        description: " Internal Zuora ID of the feature.\n\n\n**Character limit**:\
          \ 32\n\n\n**Values**: "
        type: string
      Name:
        description: " Name of the feature.\n\n\n**Character limit**: 255\n\n\n**Values**: "
        type: string
      RatePlanId:
        description: " Id of the product rate plan to which the feature belongs.\n\
          \n\n**Character limit**: 32\n\n\n**Values**: "
        type: string
      UpdatedById:
        description: " Internal Zuora ID of the user who last updated the subscription\
          \ product feature.\n\n\n**Character limit**: 32\n\n\n**Values**: "
        type: string
      UpdatedDate:
        description: " Date and time when the subscription product feature was last\
          \ updated.\n\n\n**Character limit**: 29\n\n\n**Values**: "
        format: date-time
        type: string
    type: object
  SubscriptionProductFeatureList:
    properties:
      SubscriptionProductFeature:
        description: ''
        items:
          $ref: '#/definitions/SubscriptionProductFeature'
        type: array
    type: object
  zObject:
    type: object
  zObject_update:
    properties:
      Id:
        description: ''
        type: string
      fieldsToNull:
        description: ''
        type: string
    title: zObject
    type: object
